[{"content":"The core value that defines a person is privacy unknown to others. As usual, Mako wakes up to a series of data:\n\u0026ldquo;Your body temperature is 36 degrees Celsius, blood pressure 112/73 millimeters of mercury, in a good health state. Last night you slept for 7 hours and 19 minutes, of which deep sleep lasted for……\u0026rdquo;\nThis voice \u0026lsquo;grew\u0026rsquo; out of her brain. With the maturity of brain-computer interface technology, the electronic secretary created a voice that only one person could \u0026lsquo;hear\u0026rsquo; by stimulating the cortical area of the temporal lobe to simulate auditory impulses.\n\u0026ldquo;What time is it?\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s 9:55 am.\u0026rdquo;\n\u0026ldquo;Oh no! There\u0026rsquo;s a lecture by Masakazu Yoshida today! …What time does it start?\u0026rdquo;\n\u0026ldquo;It starts at 10:20 am.\u0026rdquo;\n\u0026ldquo;Then I must hurry!\u0026rdquo; Mako swiftly threw off the covers, the cold air flooding into her brain.\n\u0026ldquo;You won\u0026rsquo;t make it, you can\u0026rsquo;t enter after the lecture starts. Even if you hurry now, grooming and travel time will take 35 minutes, you\u0026rsquo;ll arrive at 10:30 am.\u0026rdquo;\n\u0026ldquo;You don\u0026rsquo;t understand! It\u0026rsquo;s such a stroke of luck to get a ticket to his lecture! If I hurry now… If I move a bit faster on the road, maybe I could still catch it…\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s impossible. Based on previous data and your current indicators, it\u0026rsquo;s calculated that you need 15 minutes to get ready and leave, and the planned route from home to school takes 20 minutes. Therefore, the earliest you can be at the school auditorium is 10:30 am, and this is accurate.\u0026rdquo;\n\u0026ldquo;What does a machine know? I cannot afford to be late this time!\u0026rdquo; Mako muttered while brushing her teeth.\nAt this moment, a smiling face appeared on the mirror of the sink, and the voice of the electronic secretary sounded again: \u0026ldquo;Firstly, the fastest you can arrive at the school auditorium is at 10:30 am, this is the result considering all parameters, there is no possibility of arriving earlier. Secondly, I would like to remind you that I am not just a computer, I am the full data service system developed by the Umbrella Corporation. Although I communicate with you by releasing sound signals through the brain-computer interface, in reality, I can network with every item in your life that contains an Umbrella chip, collect all the data you generate within a day, connect personal data with society databases, thus providing the most comprehensive life services. Our vision at Umbrella is to optimize life and serve the society. Our values are…\u0026rdquo;\nMako stopped paying attention to the electronic secretary. In the series of coherent actions that followed, she didn\u0026rsquo;t waste any time - the door automatically unlocked after recognizing her fingerprint; she ran to the elevator just as the doors opened; she took the elevator to the first floor, exited the apartment and a car stopped just in front of her, at the moment she seated herself sideways, the vehicle started.\nBetween leaving home and getting in the car, not even a second of spare time was left in each step of Mako\u0026rsquo;s journey because the electronic secretary pulled information from the cloud database, and after considering residential elevator usage and city traffic, it sent precise operational commands to the Umbrella chips embedded in the elevator and the car. The entire commute planning system was like precisely meshed gears, filled with an aesthetic of uniformity.\nMako\u0026rsquo;s car had no driver, and she was silently accelerated to 240 kilometers an hour. Looking out the window, the ring road was full of cars, speeding vehicles maintaining a mere 20 centimeters apart. Such a high speed and proximity between the cars turned this stream of vehicles into a real liquid.\nThis liquid could breathe. If a car needed to change lanes or turn, from afar to nearby, dozens of surrounding vehicles would gradually make space for it, clearing the way, like a well-drained Roman triplex formation, without the need for a commander\u0026rsquo;s coordination, as each soldier in the formation knew what to do next.\nPassing by a vast advertising slogan: \u0026ldquo;Smart City - A city with a heartbeat.\u0026rdquo;\nIt wasn\u0026rsquo;t long before the school auditorium came into view. Mako hurried out of the car and stepped onto the first step in front of the auditorium, looking up at the huge electronic clock overhead, it was 10:29 am.\nTwo seconds later, the numbers flickered gently.\n10:30 am, right on time.\nDue to being late, Mako could not enter the auditorium, so she had to ask a fellow student from the school office to find her a seat backstage. Even so, she could feel the lively atmosphere of the venue.\n\u0026ldquo;In conclusion, I would like to say to the youth present, you are lucky to be living in this well-ordered era! Humanity is experiencing stability and convenience like never before. This is the fruit of your parents\u0026rsquo; struggles and contributions, and it\u0026rsquo;s also the mission that you all continue to carry on!\u0026rdquo;\nAs the speaker\u0026rsquo;s voice faded, thunderous applause filled the auditorium. Without a doubt, the lecture was a success, and the school office staff finally breathed a sigh of relief - not even halfway through the year, and three students had already jumped off the dormitory roof to their deaths. Over the past decade, suicide rates, shootings, alcohol abuse, and drug cases in universities worldwide have been slowly rising. There were various speculations, but no consensus. Masakazu Yoshida is elegant and understated, rarely participating in public lectures. This time the school office went to great lengths to invite him to give a motivational talk in an attempt to reverse the growing sense of despondency among college students.\nThe host took over the microphone: \u0026ldquo;Thank you, Mr. Yoshida, for your inspiring lecture. Now, let\u0026rsquo;s move on to the Q\u0026amp;A session, the direction of questions is not limited. The student there… wearing a blue jacket and glasses, I see you were the first to raise your hand.\u0026rdquo;\n\u0026ldquo;Hello, Mr. Yoshida. You just said that we live in an orderly era… I believe you are referring to the era of full data. As a creator of the new era, could you share with us your most direct feelings about the changes in times? What has been the biggest change?\u0026rdquo;\nAfter listening, Masakazu Yoshida pondered for a moment: \u0026ldquo;If I had to describe the past era with one word, I would choose \u0026lsquo;chaos.\u0026rsquo; The world has changed rapidly in these years, and you can\u0026rsquo;t imagine the world of my childhood because you didn\u0026rsquo;t experience it.\n\u0026ldquo;In the past, it took over two and a half hours just to travel from the south to the north of the city due to poor traffic and congestion; and when someone fell seriously ill, they had to queue at the hospital for a famous doctor. If one doctor did not succeed, they would have to queue for another at a different hospital. Many people delay their treatment like this. There were also fraudsters everywhere - financial scams, telecommunications fraud, internet scams… Every day countless frauds took away people\u0026rsquo;s life savings, and then the scammers vanished without a trace, and the police were powerless against them.\n\u0026ldquo;In the world before the era of full data, this was the chaos people faced. As the name suggests, the era of full data means that the data generated by everyone every day is collected and uploaded to a central database. Using these data and results derived from data processing, we can provide people with better lives. But it wasn\u0026rsquo;t accomplished overnight; countless engineers and scientists have contributed their wisdom to the advent of the age of full data.\n\u0026ldquo;At the beginning of the 21st century, IBM (International Business Machines Corporation) was the first to apply big data technology to medicine. They developed IBM Watson, a cognitive computing system that can read through thousands of medical journals within minutes, compare massive cases in the database, and find the best treatment plan. As a result, big data medicine became popular, and humanity gradually moved away from depending solely on doctors for diagnosis and treatment. \u0026lsquo;Famous doctors\u0026rsquo; were no longer scarce resources; cloud-based diagnosis and treatment, dependent on computer systems, opened to everyone, and were more accurate and transparent. This approach provided patients not just with time but also hope for life.\n\u0026ldquo;Then, there was the autonomous driving field. Originally, the technology barrier for autonomous driving was very high due to the many random events on the roads. Before, we hoped cars could respond to emergencies in an instant by equipping each one with a sensitive LiDAR and a central system that could react quickly. However, this also meant high costs and the possibility of errors. Looking at the autonomous cars mass-produced and used today, they don\u0026rsquo;t have radars at all, and their control systems use chips at the personal computer level. This is because Google changed the research approach - though developing an autonomous car is difficult, if the entire city\u0026rsquo;s cars are self-driven, and the traffic is treated as a whole, then it\u0026rsquo;s another matter. Connected through networks, collecting and analyzing the position and speed information of each car, the networked car technology has made each vehicle a cell in a massive organism, with higher-level commands given by the central system, so no collisions will occur. This not only solves safety issues but also the cloud database contains the position and routes of all vehicles in the city, as well as reading the vehicles\u0026rsquo; historical records, each person\u0026rsquo;s travel habits, and driving patterns. With macro-management algorithms, the overall city\u0026rsquo;s traffic is planned, optimizing vehicle routes to maximize road utilization rate, therefore, the city is no longer plagued by congestion.\n\u0026ldquo;Of course, Chinese entrepreneurs and engineers did not want to lag in exploring the application of big data. With the rise of e-commerce at the beginning of the 21st century, China, a large country with billions of people, had major logistical challenges. For example, when everyone rushed to shop at the Singles Day discount, how to deliver each order to buyers as quickly as possible during an explosion of orders? The solution was simple: read all past customer data, predict the purchase situation for each merchant\u0026rsquo;s goods for the year, and then create warehouse distribution plans before the big sales. Before Singles Day arrived, sellers had already placed goods in different warehouses in South China, North China, and East China based on forecast data; logistics companies\u0026rsquo; delivery workers and vehicles were also positioned according to the predicted data. The average delivery time was reduced from a week to three days, significantly speeding up the national logistics network.\n\u0026ldquo;In this way, big data applications slowly permeated every corner of society: elevator systems collected residents\u0026rsquo; work schedules to optimize the operation and reduce waiting time; analyzing individual search terms and video viewing types to project user interests and preferences then deliver precise ads; smart toilets daily monitored excrement, recording personal health conditions, serving as part-time personal doctors, and could also provide the government with epidemic warnings…\n\u0026ldquo;To summarize - accurate data records of individuals can improve personal lives; massive data records of groups can optimize resource allocation. We have \u0026lsquo;calculated\u0026rsquo; the life we want using big data technology, and in this way, we have finally bid farewell to chaos. This is the change I\u0026rsquo;ve witnessed over the years.\u0026rdquo;\n\u0026ldquo;Thank you, Mr. Yoshida, for taking us through the detailed review of the full data era\u0026rsquo;s inception,\u0026rdquo; the host continued, addressing the audience, \u0026ldquo;So, the next question… Okay, the student in the red sweater there, please pass the microphone to him.\u0026rdquo;\n\u0026ldquo;Hello, Mr. Yoshida. As a university graduate about to step out of school, I am curious why you decided to enter the credit industry at that time. I have read many articles about you; back then you decisively gave up graduate admission from an Ivy League school and a high-paying offer from a top investment firm to start a new company in a niche industry. How were you considering at that time? Did you have full confidence in success?\u0026rdquo;\n\u0026ldquo;How could there be one hundred percent confidence before starting?\u0026rdquo; Masakazu Yoshida said with a smile, pushing his glasses, and Mako saw the intelligent crow\u0026rsquo;s feet at the corner of his eyes from the screen, \u0026ldquo;But I did see the trend at that time. We all know if businesses or individuals need loans, financial institutions will carry out a credit rating on them to determine the loan amount, interest rates, and period. In the past, credit ratings were usually done by credit bureaus, analyzing past large loan records, income levels, and asset size, then rigidly adopting formulas to rate; this not only required manual statistics but also could not avoid systemic errors. In contrast, my company, Umbrella, broke down the credit process on the Internet and integrated it into the everyday work and life of borrowers. Every individual\u0026rsquo;s every purchase, every monthly credit card record, salary transfer record, and every company\u0026rsquo;s transfer records became the basis for credit assessment.\n\u0026ldquo;However, if just that, it would still not be outstanding. Umbrella innovatively incorporated concepts such as genetic testing, personality tests, academic performance, romantic history, criminal records, and performance assessments all unrelated to finance into the credit system. Many academic studies have confirmed that a person\u0026rsquo;s trustworthiness in borrowing is related to their genes, personality, intellect, and even the level of loyalty in a romantic relationship. We gather all financial and non-financial information of an individual and algorithmically generate credit ratings. Compared to traditional credit, this is a more realistic and universal rating, which not only better reflects financial risks but is also applicable to other non-financial settings; it can be said to be versatile.\u0026rdquo;\n\u0026ldquo;For instance…can it be used for dating?\u0026rdquo; asked the student in the red sweater.\n\u0026ldquo;Haha…as expected of young people, always concerned about love. Yes, before a girl accepts your proposal, she can check your dating credit record. If you have a history of infidelity or if all your ex-partners think you\u0026rsquo;re inconsiderate, then of course she will friend-zone you. Besides that, school admissions, company hiring, and business cooperation can all make use of this comprehensive credit system. Umbrella achieved a unified credit system in human society for the first time. From then on, every individual and every company has to be responsible for every decision they make, this is epoch-making for the advancement of societal civilization.\n\u0026ldquo;However, the premise of the full data credit is the enormous task of data collection a single enterprise cannot complete it alone. Therefore, I proposed the political sphere, and with the government\u0026rsquo;s encouragement, the International Data Cooperation Act was passed at the United Nations headquarters. The act consists of a preamble and 26 articles, establishing 4 basic principles:\nFairness: All data generated by everyone\u0026rsquo;s daily actions will be collected, regardless of profession and background;\nSharing: After an individual\u0026rsquo;s data is collected, it will be shared to a cloud database, available for use by all enterprises and institutions worldwide;\nPrivacy: Personal data must be encrypted before it can be analyzed, and no enterprise or individual has the right to access targeted personal data. All terminal devices, including electronic secretaries, autonomous vehicles, and intelligent electronic devices, only receive the results of issued commands.\nFreedom: Individuals may purchase their data for a specific period to prevent it from being collected and stored, as long as it does not contravene laws or the interests of others.\u0026rdquo;\nThe host then said: \u0026ldquo;The milestone significance of the International Data Cooperation Act is self-evident! After its inception, the world has become transparent, we precisely describe and serve every individual with data, use it to improve living standards, and even predict future black swan events to prevent them. The stable and harmonious era of full data has finally arrived.\u0026rdquo;\nMasakazu Yoshida nodded slightly in agreement: \u0026ldquo;I think, my achievement is not so much in creating a large enterprise, but in promoting society into the full data era. Umbrella\u0026rsquo;s chips, developed by our company, are embedded in necessary items like refrigerators, shoe soles, rice cookers, lights, etc., to collect the data generated at every moment. They are also interconnected through the internet, continuously providing us with the most targeted services. This is probably why I was invited today to return to my alma mater to give this lecture… I hope everyone is satisfied with this answer. So, what\u0026rsquo;s the next question?\u0026rdquo;\nWhile the Q\u0026amp;A session on stage was still underway, Mako\u0026rsquo;s attention was drawn to a shadow in the backstage area.\nShe was standing in the corridor next to the backstage makeup room when a figure in a black hoodie tiptoed into Huang Zhaojing\u0026rsquo;s makeup room. Mako glanced inside through the door gap; there was no one else in the room, and the shadow was rummaging in front of a man\u0026rsquo;s jacket.\nShe had stumbled upon a thief. She hurried into the makeup room and demanded: \u0026ldquo;What are you doing?\u0026rdquo;\nThe shadow paused, then replied: \u0026ldquo;Don\u0026rsquo;t make a sound.\u0026rdquo; Shortly thereafter, they pulled a flat accessory the size of an eraser from Masakazu Yoshida\u0026rsquo;s jacket pocket. The brim of the thief\u0026rsquo;s hat was pressed so low that their entire face was shrouded in shadow. A hand swiftly reached out from the shadows, grabbed Mako\u0026rsquo;s wrist, and despite her resistance, dragged her outside and into a car.\nThroughout this process, she heard the noise accompanied by the school office staff\u0026rsquo;s shouting from backstage:\n\u0026ldquo;What\u0026rsquo;s going on?!\u0026rdquo;\n\u0026ldquo;Didn\u0026rsquo;t we have a record check for students before they entered?!\u0026rdquo;\n\u0026ldquo;Quick, get control of him first!\u0026rdquo;\nShe turned to the shadow: \u0026ldquo;What did you just take?\u0026rdquo;\nWhile starting the car, the shadow replied succinctly: \u0026ldquo;Masakazu Yoshida\u0026rsquo;s mobile database, which is also evidence of his unauthorized intrusion into the public database.\u0026rdquo;\nThe car left the school gate, and the figure finally pulled down their hood, revealing themselves as Mako\u0026rsquo;s classmate from the mathematics department, Lin Youjie. Seeing a familiar face from campus, Mako relaxed a bit. Although they hadn\u0026rsquo;t interacted before, she had heard of him. Lin Youjie\u0026rsquo;s reputation was tied to key phrases like \u0026ldquo;rich second generation,\u0026rdquo; \u0026ldquo;math genius,\u0026rdquo; and \u0026ldquo;eccentric behavior.\u0026rdquo; While she contemplated ways to escape, she realized her Umbrella chip was voice-controlled. How could she discreetly send a location signal to the cloud without Lin Youjie noticing?\n\u0026ldquo;Are you Lin Youjie? From the math department, right? …What exactly do you want?!\u0026rdquo; she demanded.\n\u0026ldquo;Quite a few questions… Yes, I\u0026rsquo;m Lin Youjie, from the math department. I\u0026rsquo;ll answer your third question later. Tell me your name first.\u0026rdquo;\n\u0026ldquo;My name is Mako…\u0026rdquo;\nLin Youjie connected the mobile accessory he had stolen from Masakazu Yoshida to his mobile computer, and the pre-set program started running automatically. The silence in the car was awkward. Mako noticed that she had no signal on her mobile phone, and whispering to her electronic secretary elicited no response. She looked up in a panic, only to receive an expected response.\n\u0026ldquo;Don\u0026rsquo;t bother trying. I\u0026rsquo;ve blocked your phone and electronic secretary. Also, I\u0026rsquo;ve purchased the data trajectory for the next 100 hours for both of us. During this time, none of the information you generate will be uploaded to the cloud.\u0026rdquo;\nHe purchased the data trajectory for 100 hours. Mako was shocked. Although the International Data Cooperation Act clearly stated that paying a certain fee could preserve one\u0026rsquo;s data from being recorded in the cloud, the cost for this privilege has remained prohibitively expensive over the years. Complete data isolation for one-hour costs about the weekly salary of an average office worker. When \u0026ldquo;connection to everything\u0026rdquo; had become the trend of the age, \u0026ldquo;disconnection and isolation\u0026rdquo; had turned into a costly luxury. Growing up in an ordinary salaried family, Mako had only experienced privacy isolation for two and a half hours last year when attending a wealthy friend\u0026rsquo;s birthday party, thanks to her friend\u0026rsquo;s father. She never understood the rich\u0026rsquo;s obsession with their privacy - why fear others knowing if you\u0026rsquo;re not doing anything wrong?\nNow, being granted a hundred hours of privacy isolation out of the blue, she was utterly baffled.\nThe rain started to fall outside, pouring onto the windshield as the wipers swung back and forth, trying to clear a view through the veil of rain. Lin Youjie focused on this window, hands on the steering wheel.\nOnly then did Mako realize that the car they were in was equipped with a manual driving system!\n\u0026ldquo;This car… is manually driven?!\u0026rdquo; she exclaimed.\n\u0026ldquo;Yes, it\u0026rsquo;s an old model. Want to listen to some music? There\u0026rsquo;s a CD in the compartment on your left, just slide it into the player,\u0026rdquo; he said.\nShe shook her head: \u0026ldquo;No, I don\u0026rsquo;t even know how to use that player. Where are you taking me?\u0026rdquo;\nLin Youjie kept his eyes on the road and didn\u0026rsquo;t answer her. He single-handedly opened the compartment and put the CD into the player.\nMako was perplexed by how Lin Youjie managed to drive a car at 240 kilometers per hour, weaving through the rhythmic, uniform traffic of autonomous vehicles, finding every gap, dodging in and out, all while being able to put music on. He was like the most jarring noise in a piano piece, with the gray downpour assaulting them upfront, water splashing high into the air from the tires.\n\u0026ldquo;You\u0026rsquo;re driving dangerously,\u0026rdquo; she said, her palms sweating from nervousness.\n\u0026ldquo;No, the cars around us controlled by algorithms each have a predetermined trajectory. Understanding the pattern makes it safe. Besides… I didn\u0026rsquo;t mean to kidnap you, there was no other way, I need to ask for your help.\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s what all kidnappers say to their victims. What exactly did you do in the auditorium? I\u0026rsquo;m not stupid; if you had done nothing wrong, you wouldn\u0026rsquo;t have been keen on driving off with me.\u0026rdquo;\nLin Youjie did not drive far. After circling the school a few times, he stopped at the coffee shop near the school gate. He motioned for Mako to get out, and they sat down at a table. After ordering drinks, Lin Youjie paid for them with some cash and picked up a book from the shelf, flipping through it while he said to Mako:\n\u0026ldquo;I like this coffee shop because they still have these paper books.\u0026rdquo;\n\u0026ldquo;Not many people read paper books nowadays. All my books are in electronic format.\u0026rdquo;\n\u0026ldquo;So… What kind of books do you like?\u0026rdquo; Lin Youjie shifted his gaze from the pages to Mako\u0026rsquo;s face.\n\u0026ldquo;The recently popular \u0026lsquo;Time Travel in the Deep Palace: The Eighth Princes Love Me\u0026rsquo; is fantastic! There\u0026rsquo;s also \u0026lsquo;The Heiress\u0026rsquo;s Three Lifetimes 2\u0026rsquo; and \u0026lsquo;Revenge of the Secret Agent Crown Princess.\u0026rsquo; They have very romantic love stories, and the male leads are both handsome and charming. These few books have practically monopolized the market, their advertisements are everywhere… And their intellectual property has been purchased, soon to be adapted on the big screen.\u0026rdquo;\n\u0026ldquo;If I tell you that I\u0026rsquo;ve never heard of these books, would you believe me?\u0026rdquo;\n\u0026ldquo;Impossible, they\u0026rsquo;re trendy among young people!\u0026rdquo; Mako hesitantly replied, \u0026ldquo;Many of my classmates are reading them.\u0026rdquo;\n\u0026ldquo;Vulgar literary works always attract attention, but once you\u0026rsquo;ve read a few similar e-books, Umbrella will classify you as an audience for mindless films. Your computer, phone, and any smart billboards you see will push similar content to you according to your \u0026rsquo;taste,\u0026rsquo; and then without realizing it, you become engrossed in cultural junk. Millions of young people are just like you. This feedback is sent back to publishing houses and film production companies, resulting in more and more vulgar books and TV shows being produced. Soon, the cultural market will be inundated with trash. So - extensive real-time data feedback can create this information black box, leading to monotony and ignorance. I\u0026rsquo;ve never allowed them to extract my data, so of course, I wouldn\u0026rsquo;t be poisoned by such books.\u0026rdquo;\nMako sneered dismissively: \u0026ldquo;What\u0026rsquo;s so great about that?… It\u0026rsquo;s just a book to relax with, no need to make a big deal out of it.\u0026rdquo;\n\u0026ldquo;If I tell you that in addition to books and movies, news, knowledge, information, and even your career and life choices have been stuffed into a predictable black box and that Masakazu Yoshida and his Umbrella company are going to be the culprits behind the decay of human society, would you believe that?\u0026rdquo;\nMako looked at Lin Youjie in confusion, taking a moment to respond: \u0026ldquo;…So you\u0026rsquo;re an anti-full-data individual! I noticed earlier; that you\u0026rsquo;re manually driving, you\u0026rsquo;re paying with cash, you\u0026rsquo;re reading physical books - all to avoid leaving a digital trail. I heard in the news that your conservative faction is on the rise. But forgive my frankness, every technological revolution comes with opposition. You\u0026rsquo;re like the Luddites of the 19th century who went around destroying looms. Could they stop the Industrial Revolution? A few looms to an entire era are like grains of sand. Your voice in the full data era is less than even a grain of sand.\u0026rdquo;\nLin Youjie shook his head helplessly as a waiter brought over a cup of coffee, which Lin Youjie gently slid towards Mako: \u0026ldquo;Here, an espresso, I ordered it for you.\u0026rdquo;\nMako brightened slightly at the sight of the coffee: \u0026ldquo;Hmm, thank you. I was wanting this…\u0026rdquo;\n\u0026ldquo;Your phone alarm has your routine, indicating you\u0026rsquo;re an early riser and nap-taker; your smart toilet detected your blood sugar levels; your fitness tracker has recorded your heartbeat and temperature; your digital wallet indicated that you had a filling breakfast this morning and you habitually drink espresso to stay alert. Therefore, by analyzing your physical indicators, it can be concluded: that you\u0026rsquo;re feeling sleepy right now and could use a cup of coffee to wake up… Does this cup of coffee meet your expectations?\u0026rdquo;\n\u0026ldquo;Yes… But how were you able to access targeted personal information? According to the International Data Cooperation Act, personal data must be encrypted before being used for algorithmic analysis; no enterprise or individual has the right to access targeted personal data. Are you saying… you hacked into the cloud database?!\u0026rdquo;\nBefore Mako\u0026rsquo;s questioning, Lin Youjie remained noncommittal: \u0026ldquo;Every day, there are about 130 people with a reliance on caffeine, just like you, who come to this place for an espresso. With this data, the cafe can adjust inventory and staffing, preparing enough raw materials in advance; IBS (location-based services) have their macro analyses - most students who come here for coffee sit all day. So many students congregating here indicates business opportunities. Hence, bubble tea shops, copy centers, and reading rooms have opened up around, each with significant customer traffic and profit. Students found a study spot, staff earned wages, shops made profits, the school collected rent, the neighborhood became more commercially valuable, and you, Miss Mako, were no longer sleepy this afternoon thanks to a cup of coffee. In this case, full data ensures the most optimal resource allocation and benefits everyone.\u0026rdquo;\nMako nodded, looking at Lin Youjie with confusion. \u0026ldquo;So, why are you opposing the full data era then? Why do you oppose Masakazu Yoshida?\u0026rdquo;\n\u0026ldquo;Because we\u0026rsquo;ll never know if Masakazu Yoshida wants to drink coffee. There\u0026rsquo;s an issue with the \u0026lsquo;Principle of Freedom\u0026rsquo; in the International Data Cooperation Act. Those at the top of the Forbes list can, of course, afford to prevent access to all their personal and family data at any time. But what about the average person? The salaryman? The family of five living in a 40-square-meter space? Privacy? They probably wouldn\u0026rsquo;t buy such an intangible thing, would they?\u0026rdquo;\n\u0026ldquo;So what? I am that average person. So what if all my data is uploaded? I haven\u0026rsquo;t felt any inconvenience…\u0026rdquo;\nLin Youjie cut her off: \u0026ldquo;Mako, have you ever considered what determines why some people reach the top of the pyramid while others live paycheck to paycheck every day?\u0026rdquo;\nMako was taken aback, not expecting such a clichéd question, and said hesitantly, \u0026ldquo;…Successful people are 99% hard work and 1% genius?\u0026rdquo;\n\u0026ldquo;Do you believe that? We got into top universities, aren\u0026rsquo;t we all Masakazu Yoshida\u0026rsquo;s juniors? Aren\u0026rsquo;t we diligent? Aren\u0026rsquo;t we talented? Yet after we graduate, 99% of us lead mediocre lives.\nYou know, the proportion wasn\u0026rsquo;t nearly this high during Masakazu Yoshida\u0026rsquo;s time.\u0026rdquo;\n\u0026ldquo;Do you think all this is caused by the Umbrella company?\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s caused by the full data era,\u0026rdquo; Lin Youjie corrected, \u0026ldquo;Today, computers can replace most of the work carried out by humans, whether it\u0026rsquo;s intellectual work or crafts, none is spared. Once algorithms are cracked, even the most talented traders can\u0026rsquo;t compete with computers; as soon as designs are read, the craftsmanship of seasoned artisans doesn\u0026rsquo;t match the precision of machines. So, what\u0026rsquo;s left of human value? - It\u0026rsquo;s the secrets not known to others, the paths once taken, people met, and experiences had, that constitute a person\u0026rsquo;s core value. The key for a person to stand out is not diligence or genius, but privacy. In this era, the difference between elites and the average, the rich and the poor, lies in who controls privacy and data.\u0026rdquo; He paused, \u0026ldquo;But most people won\u0026rsquo;t think about this anymore. Once privacy is uploaded, it means the full data era has robbed them of creativity and reflective ability… And, thanks to my father who has some money, besides buying me a car, also bought me the highest level of privacy protection. Otherwise, I would be like you all, chasing novels and TV shows, not feeling that there\u0026rsquo;s anything wrong with this absurd era.\u0026rdquo;\n\u0026ldquo;No wonder they didn\u0026rsquo;t detect your anti-full data tendencies in the auditorium; because all the data… it was never stored in the database at all!\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s not the point, extended privacy protection has given me the ability to think independently. If a person\u0026rsquo;s preferences are fully transparent, then simply by tweaking a few settings in the city\u0026rsquo;s central computer and conveying them via the electronic secretaries inserted in people\u0026rsquo;s brains, they can be guided to appear in any place, do anything… Their work experience and personal abilities are recorded in the database, replaceable by computers or others at any time, producing nothing of unique value. Thus, they can only do the lowest repetitive tasks in the city\u0026rsquo;s ecosystem, earning just enough to live. Life is like a road with an end in sight; there\u0026rsquo;s no chance and no challenge, and everyone feels the ceiling over them before even graduating, which is why the suicide rate among young people around the world is rising!\u0026rdquo;\nFaced with Lin Youjie\u0026rsquo;s crazy theory, Mako\u0026rsquo;s rationality returned: \u0026ldquo;These are all speculations; where is the evidence?\u0026rdquo;\nLin Youjie pondered for a moment: \u0026ldquo;Evidence… I have it. Did you just ask me if I hacked into the cloud database? You give me too much credit. Such databases are maintained year-round by top cybersecurity experts; even with exceptional skills, it would be difficult to find a vulnerability.\u0026rdquo;\n\u0026ldquo;Then how did you obtain my data? All service endpoints, whether it\u0026rsquo;s electronic secretaries or others, should receive only the outcomes of cloud data computation; the intermediate process should be a black box!\u0026rdquo;\n\u0026ldquo;The mobile hard drive that I just mentioned contains all the updated data from Masakazu Yoshida every day. I used it to forge his identity, and after the cloud database recognized it, I was able to retrieve your information.\u0026rdquo;\n\u0026ldquo;The thing you stole backstage just now?\u0026rdquo;\nLin Youjie nodded: \u0026ldquo;Masakazu Yoshida bought off his data, blocking all of his data from the cloud database, but he also wanted to understand the status of his health, assets, and company operations. How to securely collect the data continuously generated by oneself for personal use? The solution is simple - all data generated by Masakazu Yoshida is collected at the terminal into that small box, existing independently from the outside world in the most primitive form of isolation for data security. But it is also the most unsafe. I only need to steal its physical form… there will be no alarms, and no possibility to remotely format it after it\u0026rsquo;s discovered to be stolen… As long as I have it, I firmly hold Masakazu Yoshida\u0026rsquo;s secrets.\u0026rdquo;\n\u0026ldquo;How ironic… In an era where information security is highly emphasized, the theft of top secrets is actually through such a crude method.\u0026rdquo;\nLin Youjie nodded: \u0026ldquo;If this gets out, Masakazu Yoshida will spend the rest of his life in prison. Not only that but with this evidence, a comprehensive investigation into Umbrella can be initiated by the government. Once the government\u0026rsquo;s experts analyze a sufficient number of samples, they can also prove that the entire data collection and analysis system is detrimental to human society. It\u0026rsquo;s just… I\u0026rsquo;m afraid I need your help with this.\u0026rdquo;\n\u0026ldquo;Why?\u0026rdquo;\n\u0026ldquo;Because there\u0026rsquo;s no time. The moment my face appeared backstage, they would have pinpointed my identity.\u0026rdquo;\n\u0026ldquo;What should I do now?\u0026rdquo;\n\u0026ldquo;Finish your espresso. Then, go to my car - a manually driven car is detached from the database. Don\u0026rsquo;t worry, they won\u0026rsquo;t find you that quickly - use the notebook in the car with this small black box to access the cloud database. Download the useful information and distribute it to five different media outlets, with the list all on the computer.\u0026rdquo;\n\u0026ldquo;And then?\u0026rdquo;\n\u0026ldquo;…You might also want to look at your data in the cloud database, it could be quite interesting!\u0026rdquo;\nHe stood up and walked out of the coffee shop\u0026rsquo;s door, and his elongated silhouette in the sunshine looked like a straight exclamation mark.\nBy the time Mako snapped back to reality and raced to the door of the coffee shop, Lin Youjie had vanished, leaving only the manually driven car behind. \u0026ldquo;If \u0026lsquo;being connected to everything\u0026rsquo; has become inevitable, then \u0026lsquo;disconnecting from the system\u0026rsquo; has become the most fragile luxury…\u0026rdquo; she murmured to herself.\nMako entered Lin Youjie\u0026rsquo;s car and took the computer before anyone could discover her. However, as she walked home with the computer in her arms, a terrifying silence descended upon her. Only an hour had gone by since she had disconnected, and she still had a long time to go before the 100-hour privacy break ended.\nThe mobile phone signal was back, but it lacked functionalities like advertisement push and travel planning, now just a bare communication tool, much quieter. There was no telling voice guiding her when to turn left at an intersection, nor did the red traffic lights turn green for her. She had never been caught in the rain before, because her electronic secretary would have planned her itinerary based on weather predictions to avoid her exposure to rain, but today she became a drenched chicken, a lost one at that on the streets.\nYet she felt a thrill, with no electronic secretary\u0026rsquo;s nagging reminders, she learned to be alone for the first time and to listen to her thoughts. For the first time, her life was completely her own; her secrets belonged to her, not to be meddled with by others. But what when the rain stops? When the 100 hours are over?\nDid she have to return to the predetermined track? When she got home, she opened the portable computer, impersonating Masakazu Yoshida, and logged into the page where all her data was recorded.\n\u0026ldquo;Where\u0026rsquo;s the fascination in this? Just a bunch of boring numbers,\u0026rdquo; she said to herself, recalling Lin Youjie\u0026rsquo;s words. Then an idea flashed through her mind; she checked the computer\u0026rsquo;s hidden folders and found a complex algorithm Lin Youjie had left behind. Subconsciously, she uploaded all her data to the algorithm.\nAn image appeared on the screen - it was Mako herself but aged by ten years. She immediately realized this was a simulation of her future based on past data.\nThe scene was set in a villa. She was dressed elegantly, enjoying afternoon tea with a few equally well-dressed ladies, holding bone china cups. Her obedient son and daughter sat by her side, the daughter\u0026rsquo;s eyes like hers, the son\u0026rsquo;s nose like hers. The afternoon sunlight streamed through the windows, casting a soft, surreal glow on the house and its occupants.\n\u0026ldquo;This is your future, Miss Mako,\u0026rdquo; a line of text appeared on the computer screen.\n\u0026ldquo;…Not bad. But it\u0026rsquo;s not interesting to know the future so early!\u0026rdquo; She opened her email to attach the data package containing Masakazu Yoshida\u0026rsquo;s evidence. Just as she was about to click \u0026lsquo;send email,\u0026rsquo; the villa door on the screen was gently pushed open, and a man stood outside. Only the hand that pushed the door, with a wedding ring, was visible.\n\u0026ldquo;Don\u0026rsquo;t you want to see who your future husband is?\u0026rdquo; the computer prompted.\n\u0026ldquo;Never mind, I guess I\u0026rsquo;m not destined to meet him anyway.\u0026rdquo; Mako clicked the \u0026lsquo;send\u0026rsquo; button, and the data recording her actions updated swiftly with a few lines. The beautiful future scene on the screen vanished instantly, replaced by a long silence and a black screen.\n\u0026ldquo;Goodbye, full data era,\u0026rdquo; Mako mumbled to herself.\n\u0026ldquo;Notice of the Dismissal of Masakazu Yoshida as Chairman\u0026rdquo;:\n\u0026ldquo;During Masakazu Yoshida\u0026rsquo;s tenure as CEO of Umbrella (August 2028 - November 2039), he illegally penetrated the international cloud database and accessed others\u0026rsquo;s information, severely violating the International Data Cooperation Act and adversely affecting the company\u0026rsquo;s image. Now Masakazu Yoshida has been subjected to a court subpoena, and Umbrella will fully cooperate with the related investigations. At the same time, to minimize the impact of this incident on public life, the board of directors has decided, effective immediately, to relieve Masakazu Yoshida of his duties as CEO of Umbrella, with the former Chief Technology Officer taking over the company\u0026rsquo;s operational affairs.\u0026rdquo;\nMako did not anticipate Umbrella\u0026rsquo;s swift response; they reacted just hours after the news release. Mako continued to scroll down with her mouse but noticed that besides the punishment of Masakazu Yoshida individually, there was no mention of a government investigation into Umbrella\u0026rsquo;s data processing methods.\nThe accompanying image in the notice on the website was a photo with a caption noting \u0026ldquo;former CEO of Umbrella cooperates with the investigation.\u0026rdquo; Although the man was wearing the same style suit, and the same glasses, a closer inspection by Mako revealed that he was not Masakazu Yoshida at all!\n\u0026ldquo;How is this possible…\u0026rdquo; she murmured, \u0026ldquo;This person is not Masakazu Yoshida, I\u0026rsquo;ve seen his face.\u0026rdquo;\nShe immediately went online to search for images of Masakazu Yoshida, and all the official photos of him were different from what she remembered. If Mako had never seen Lin Youjie, perhaps she would have doubted her memory.\n\u0026ldquo;Damn it…\u0026rdquo; She quickly sent a video call to Lin Youjie; after the news had come out, he should have been out of danger.\nHer phone screen lit up, and greeting her was a man in a black hoodie, the same warmth, the same handsome look. Except - it was a completely unfamiliar face.\nShe broke out in a cold sweat and quickly hung up the call.\nAt this point, Mako gradually understood the real meaning behind Lin Youjie\u0026rsquo;s words - that the core value of a person is those unknown privacies. Once all data is extracted, a persona can be painted, machines can mimic all their behaviors, access all their accounts, and simulate a possible future.\nAt this time, does it matter who is who, whether their physical bodies exist?\nMasakazu Yoshida may have never existed, just an image tool presented by Umbrella for PR purposes, or maybe he did exist once, but could easily be made a scapegoat and vanish into a wisp of history. And so could she. If a mathematics student who drives a manual car, doesn\u0026rsquo;t read e-books and only pays with cash can be defined as Lin Youjie, then a girl who reads romantic novels and is late for seminars can be defined as Mako.\nAs for how she will be replaced by whom and in what way in the tide of the full data era, it remains unknown. An electronic secretary could control her whereabouts in any manner and guide her to live or die because she is transparent, yet she knows nothing on the other end of the scale. She used to think that data was a tool for convenience, after meeting Lin Youjie she thought data was a shortcut for some people, but now she finally understood that data itself is power.\nAnd she no longer had the chance to tell anyone these realizations.\nBecause the 100 hours of privacy coverage had passed, the voice of the electronic secretary rose in her mind: \u0026ldquo;Hello, Miss Mako, we meet again.\u0026rdquo;\nFor the first time, Mako felt truly alone.\n","date":"2024-03-09T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*DQtPiFsZ8kYwJ18roQEayQ.png","permalink":"http://localhost:1313/p/data-era/","title":"Data Era"},{"content":"With the release of vue3.4 version, defineModel has also officially become a regular version. It can simplify the two-way binding between parent and child components and is the currently officially recommended two-way binding implementation.\nHow to implement two-way binding in the past Everyone should know that v-model is just syntactic sugar. It actually defines the modelValue attribute and listens for the update:modelValue event for the component, so we had to implement two-way data binding before. You need to define a modelValue attribute for the subcomponent, and when you want to update the modelValue value in the subcomponent, you need to emit send out a update:modelValue event. Pass the new value as the second field.\nLet’s look at a simple example. The code of the parent component is as follows:\n1 2 3 4 5 6 7 8 9 \u0026lt;template\u0026gt; \u0026lt;CommonInput v-model=\u0026#34;inputValue\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { ref } from \u0026#34;vue\u0026#34;; const inputValue = ref(); \u0026lt;/script\u0026gt; The code for the subcomponent is as follows:\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;template\u0026gt; \u0026lt;input :value=\u0026#34;props.modelValue\u0026#34; @input=\u0026#34;emit(\u0026#39;update:modelValue\u0026#39;, $event.target.value)\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; const props = defineProps([\u0026#34;modelValue\u0026#34;]); const emit = defineEmits([\u0026#34;update:modelValue\u0026#34;]); \u0026lt;/script\u0026gt; The above example should be very familiar to everyone. It’s how we used to implement two-way binding with v-model. But there is a problem, the input box actually supports direct use of v-model, but we did not use v-model here, instead we added value attribute and input event to the input box.\nThe reason is that starting from Vue2, it has been a one-way data flow, and the value in the props cannot be directly modified in the child components. Instead, an event should be thrown from the child component, and the parent component should listen to this event, and then modify the variable passed to the props in the parent component. If we directly add v-model = 'props.modelValue’ to the input box here, it is actually modifying the modelValue directly in the props of the child component. Due to the reason of one-way data flow, Vue does not support the direct modification of props, so we need to write the code in the above way.\nUse defineModel to implement two-way data binding The code of the parent component is the same as before, as follows:\n1 2 3 4 5 6 7 8 9 \u0026lt;template\u0026gt; \u0026lt;CommonInput v-model=\u0026#34;inputValue\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { ref } from \u0026#34;vue\u0026#34;; const inputValue = ref(); \u0026lt;/script\u0026gt; The code for the subcomponent is as follows:\n1 2 3 4 5 6 7 8 \u0026lt;template\u0026gt; \u0026lt;input v-model=\u0026#34;model\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; const model = defineModel(); model.value = \u0026#34;xxx\u0026#34;; \u0026lt;/script\u0026gt; In the above example, we directly bind the return value of defineModel to the input box using v-model , without defining the modelValue attribute and monitoring update:modelValue is a ref . We can modify the value of the model variable in the child component, and the inputValue in the parent component The value of the variable is also updated synchronously, so that two-way binding can be achieved.\nNow here comes the question, from Vue2 onward, we’ve been operating with one-way data flow. When the value of the child component is modified, the variable value of the parent component is also changed. Does this not revert back to the two-way data flow of Vue1? Actually it’s not the case, it is still a one-way data flow.\nWe will briefly explain the implementation principle of defineModel in the following.\nImplementation principle defineModel actually defines a variable called model within the child component as ref and modelValue as props, and it also watches the modelValue in the props. When the value of modelValue in props changes, it will synchronize and update the value of the model variable.\nMoreover, when the value of the model variable inside the child component changes, it will emit an update:modelValue event. Once the parent component receives this event, it will update the corresponding variable value within the parent component.\nThe implementation principle code is as follows.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;input v-model=\u0026#34;model\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { ref, watch } from \u0026#34;vue\u0026#34;; const props = defineProps([\u0026#34;modelValue\u0026#34;]); const emit = defineEmits([\u0026#34;update:modelValue\u0026#34;]); const model = ref(); watch( () =\u0026gt; props.modelValue, () =\u0026gt; { model.value = props.modelValue; } ); watch(model, () =\u0026gt; { emit(\u0026#34;update:modelValue\u0026#34;, model.value); }); \u0026lt;/script\u0026gt; After reading the above code, you should understand why the return value of defineModel can be directly modified in the child component, and the corresponding variables of the parent component will also be updated synchronously. What we modify is actually the ref variable returned by defineModel , rather than directly modifying modelValue in props. The implementation method is still the same as vue3.4 \u0026rsquo;s previous two-way binding, except that defineModel macro helps us encapsulate the previous cumbersome code into internal implementation.\nIn fact, the source code of defineModel is implemented using customRef and watchSyncEffect. I used the examples of ref and watch here, in order to make it easier for everyone to understand the implementation principle of defineModel.\nHow to define type, default, etc. in defineModel? Since defineModel declares a prop, it can also define the type and default of prop. The specific code is as follows.\n1 const model = defineModel({ type: String, default: \u0026#34;20\u0026#34; }); In addition to supporting type and default , required and validator are also supported. The usage is the same as when defining prop .\nHow to implement multiple v-model bindings in defineModel? It also supports multiple v-model bindings on the parent component. At this time, the first parameter we pass to defineModel is not an object, but a string.\n1 2 const model1 = defineModel(\u0026#34;count1\u0026#34;); const model2 = defineModel(\u0026#34;count2\u0026#34;); The code when using v-model in the parent component is as follows:\n1 2 \u0026lt;CommonInput v-model:count1=\u0026#34;inputValue1\u0026#34; /\u0026gt; \u0026lt;CommonInput v-model:count2=\u0026#34;inputValue2\u0026#34; /\u0026gt; We can also define type , default , etc. in multiple v-model\n1 2 3 4 const model1 = defineModel(\u0026#34;count1\u0026#34;, { type: String, default: \u0026#34;aaa\u0026#34;, }); How to use built-in and custom modifiers in defineModel? If you want to use the system’s built-in modifiers such as trim , the writing method of the parent component is still the same as before:\n1 \u0026lt;CommonInput v-model.trim=\u0026#34;inputValue\u0026#34; /\u0026gt; There is no need to make any modifications to the subcomponent, it is the same as the other defineModel examples above:\n1 const model = defineModel(); defineModel also supports custom modifiers. For example, if we want to implement a uppercase custom modifier that changes all letters in the input box to uppercase, we also need to use the built-in trim modifier.\nThe parent component code is as follows:\n1 \u0026lt;CommonInput v-model.trim.uppercase=\u0026#34;inputValue\u0026#34; /\u0026gt; The subcomponent needs to be written like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;template\u0026gt; \u0026lt;input v-model=\u0026#34;modelValue\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; const [modelValue, modelModifiers] = defineModel({ set(value) { if (modelModifiers.uppercase) { return value?.toUpperCase(); } }, }); \u0026lt;/script\u0026gt; At this time, the first argument we pass to defineModel is an object containing get and set methods. When reading the modelValue variable, it will go into the get method. When writing to the modelValue variable, it will go into the set method. If only interception of write operations is needed, then get can be omitted.\nThe return value of defineModel can also be destructured into two variables. The first variable is the ref object we used for v-model binding in the previous examples. The second variable is an object, which contains what modifiers are there. Here we have two modifiers trim and uppercase, so the value of modelModifiers is:\n1 2 3 4 { trim: true, uppercase: true } When input is made in an input box, it will go to the set method, and then calling value?.toUpperCase() can convert the entered letters into uppercase.\nSummary This article introduces how to use the defineModel macro to implement two-way binding and the implementation principle of defineModel.\nCalling the defineModel macro within a child component will return a ref object. Inside the child component, this ref object can be directly assigned, and the corresponding variable in the parent component will be modified synchronously.\nEssentially, defineModel defines a ref variable and a corresponding prop within the child component, and then listens to the corresponding prop to keep the value of the ref variable consistent with the corresponding prop. When the value of the ref variable is modified in the child component, an event is thrown to the parent component to update the corresponding variable value, thereby achieving two-way binding.\nBy using defineModel({ type: String, default: ‘20’ }) you can define options such as type and default for the prop.\nUsing defineModel(‘count’) can implement multiple v-model bindings.\nBy destructuring the return value of defineModel(), the modelModifiers modifier object can be obtained. Custom modifiers can be implemented in combination with the “get” and set converter options.\n","date":"2024-03-08T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1274/format:webp/1*XNUMO2PM_SwVgmdGARQtCQ.png","permalink":"http://localhost:1313/p/understanding-definemodel-in-vue3/","title":"Understanding defineModel in Vue3"},{"content":"Kev was driving on the road with his wife and child.\nJust as the three were happily chatting, an accident happened with a large truck.\nThe violent impact made Kev lose consciousness instantly.\n\u0026ldquo;Mr. Kev, your virtual life experience ends here, you lived 38 years, we look forward to your experience of the next life.\u0026rdquo;\n1\n\u0026ldquo;Dad, our teacher posed a riddle during class today.\u0026rdquo;\n\u0026ldquo;What riddle?\u0026rdquo; Kev, gripping the steering wheel, smiled and glanced at his laughing son Ian in the rearview mirror.\n\u0026ldquo;What in the world is the longest yet shortest, the fastest yet slowest, the most divisible yet most extensive, and the most often overlooked yet most regrettable?\u0026rdquo;\nKev considered this for a moment, then said, \u0026ldquo;Dad can\u0026rsquo;t figure it out.\u0026rdquo;\n\u0026ldquo;Mum, can you guess?\u0026rdquo; Ian turned his wide eyes towards his mother Carla.\n\u0026ldquo;Mom doesn\u0026rsquo;t know either.\u0026rdquo;\n\u0026ldquo;Hehe, it\u0026rsquo;s time.\u0026rdquo;\n\u0026ldquo;My son is so clever.\u0026rdquo; Kev, turning his head to praise his son, heard a sudden outcry.\n\u0026ldquo;Kev! Watch out!\u0026rdquo;\nSimultaneously with his wife\u0026rsquo;s shout, Kev looked ahead only to see a roaring truck heading straight for them.\nTime seemed to slow down at that moment. Even the transmission of sound became sluggish. Kev could see the head of the truck deforming due to the collision and the horrified expression of the truck driver.\nImmediately after, the windshield shattered. Countless glass shards rushed towards Kev and his family. Kev instinctively threw himself in front of his wife and son, but it was of no avail. The sensation of weightlessness soon followed. It was as if the car was in a tumble dryer, tossing Kev around the corners of the car.\nKev knew that the car was flipping in the air. His mind was blank. With a few violent impacts, Kev finally lost consciousness.\n…\nKev slowly opened his eyes and came close to a shiny metal plate.\n\u0026ldquo;Where am I?\u0026rdquo;\nKev tried to move his limbs but found he was enclosed in a metal box. With the memory of the accident flashing back, a word suddenly came to his mind - coffin.\n\u0026ldquo;Am I… Am I in a coffin?\u0026rdquo; wondered Kev.\nSoon after, the metal plate was lifted, and Kev was hit with a blinding light.\n\u0026ldquo;Mr. Davis, are you alright?\u0026rdquo;\nKev listened to the stranger in a suit, his mind recalling fragments of the scene before the accident.\n\u0026ldquo;What about my wife and son? How are they?\u0026rdquo;\nThe man in the suit seemed taken aback for a moment, and then responded, \u0026ldquo;You mean Carla and Ian?\u0026rdquo;\n\u0026ldquo;Yes, where are they?\u0026rdquo; Kev asked anxiously.\n\u0026ldquo;Oh, they are virtual characters in your deep learning session, what you might call intelligent AI.\u0026rdquo;\nKev processed the man\u0026rsquo;s words slowly, trying to reconcile the shattered pieces of his memory.\nOne of the doctors behind the man in the suit spoke up: \u0026ldquo;Mr. Davis, this time your consciousness deep learning virtual life length was 38 years, from birth to death. Mr. Davis, this time your consciousness deep learning simulation lasted for 38 years. The ending of your virtual life was considerable; a car accident due to distracted driving resulted in your death. We trust you should have a deep impression of traffic rules in your head now, as a result. Always remember to obey traffic rules in real life because you only get one life.\u0026rdquo;\nKev was left sitting alone in the cabin, the reality of his situation sinking in.\nDeep learning consciousness, virtual life, reality…\u0026quot; These series of words were constantly stimulating the memory in Kev\u0026rsquo;s mind until all the memories were strung together into a thread.\n\u0026ldquo;I remember…\u0026rdquo; Kev\u0026rsquo;s expression began to calm down: \u0026ldquo;The doctor just told me my virtual life lasted for thirty-eight years. But wasn\u0026rsquo;t it stated in the contract that it guarantees a forty-year life experience? Shouldn\u0026rsquo;t you be refunding the money for the two missing years?\u0026rdquo;\n\u0026ldquo;Mr. Kev,\u0026rdquo; the man in the suit said as he pulled out the contract as if he had anticipated Kev\u0026rsquo;s question, \u0026ldquo;The contract clearly states that if death is due to force majeure, we will compensate. However, if it results from personal behavior, you will have to deal with the consequences. Running a red light that caused an accident falls under your behavior. Therefore, our company reserves the right not to compensate.\u0026rdquo;\nKev initially wanted to argue with the man in the suit. Seeing his prepared demeanor and because the two missing years of his virtual life experience might not have significant learnings, he reluctantly backed off.\nKev left the cabin and checked the time on his watch. Only ten minutes had passed since he had entered the cabin for deep learning. This was the advantage of deep learning consciousness - needing just a dozen minutes to experience decades\u0026rsquo; worth of time in a virtual conscious world. During this virtual period, consciousness would learn different knowledge and experience different aspects of life.\nLooking around, Kev saw similar cabins dotted across the entire hall. There was a multitude of such deep learning halls in the city, yet despite their number, they were still insufficient to cater to the turnout of people eager to learn.\nFrom when did learning require just resources and no effort? People from the past fantasized about such a possibility, and now in the present, traditional ways of learning have become meaningless. Everyone had to keep up with the trend by joining the rat race and finding better jobs or else being left behind.\nMoreover, to prevent virtual life from corrupting people\u0026rsquo;s consciousness, causing mental disturbances, and blurring the lines between virtual and reality, the device defaulted to blocking the individual\u0026rsquo;s real-world memories. Thus, the trajectory of virtual life became arbitrary. Sometimes, those with less favorable luck would have to undergo deep learning multiple times to gain the desired skills or knowledge.\nSo, the cycle for everyone was earning money from learning, using the knowledge to make more money, and using more money to acquire more knowledge.\nKev was no exception. His short ten-minute learning experience had depleted more than half of his savings and had even accrued him a significant amount of debt. But now, armed with the knowledge of a high-level engineer, Kev could apply for a high-paying job in any tech company. Maybe it wouldn\u0026rsquo;t take long for his learning expenditure to be recouped, possibly even exceeding the previous amount.\nWalking through the bustling crowd, Kev began to envision a better future life. He confidently began to look for jobs on his phone. The sorrow of losing his wife and child in a car accident in his virtual life seemed to have only lasted for a moment.\nNow, all Kev wants to do is land a good job, pay off the debt, and enjoy life. Thoughts of marriage and childbirth are no longer important since he had already experienced them in his virtual life.\n…\n\u0026ldquo;We\u0026rsquo;ve reviewed your resume and confirmed that you do indeed possess the qualifications of a senior engineer from your deep learning experience. However, since your specialized knowledge is rather limited, our preference leans toward individuals with more versatile skills. Therefore, you do not fully meet our recruitment conditions…\u0026rdquo;\nKev was squatting on the stairs, replaying the recruiter\u0026rsquo;s words and his professional fake smile in his mind. He looked at the many unsent resumes in his hands. He had assumed that spending so much money on gaining life experience would pave a golden road for him, but the reality turned out to be much harsher.\n\u0026ldquo;So real life is very different from virtual life…\u0026rdquo;\nPerhaps during those short ten minutes when Kev was in virtual life, countless people had progressed and surpassed him. But this wasn\u0026rsquo;t the worst part. The worst part was that the only way to break out of this situation was to figure out how to go through more rounds of deep learning.\n\u0026ldquo;Hey, buddy, are you here for an interview?\u0026rdquo; A tall, thin man had somehow ended up by Kev\u0026rsquo;s side and was peeping curiously at Kev\u0026rsquo;s resumes with a smirk on his face.\n\u0026ldquo;Yes.\u0026rdquo; Kev was feeling annoyed and quickly covered and returned his resume to his pocket.\n\u0026ldquo;I can tell the result was not good from your expression, am I right?\u0026rdquo; The tall, thin man sat down leisurely beside Kev with a signed job contract on his lap, \u0026ldquo;Let me guess, because of limited specialized knowledge?\u0026rdquo;\nKev glanced at the tall, thin man. He still had an unpleasant grin on his face, and his small eyes were constantly checking Kev out.\n\u0026ldquo;Do we know each other?\u0026rdquo; Kev asked coldly, hoping to drive the man away.\n\u0026ldquo;Not. But I was once just like you, hitting a wall everywhere I went. I thought I could land a job after one round of deep learning.\u0026rdquo; The skinny man picked up the signed job contract on his lap and changed the subject, \u0026ldquo;Who would have thought I could land a job that other people work hard for so easily.\u0026rdquo;\n\u0026ldquo;If you came to flaunt, I think you\u0026rsquo;ve found the wrong person.\u0026rdquo; Kev got up, preparing to leave.\n\u0026ldquo;I just thought we had a connection,\u0026rdquo; The tall, thin man pulled out a white paper from his bag, \u0026ldquo;If you want to solve your current problems, go to the address on this paper and find a person named William, you\u0026rsquo;ll thank me.\u0026rdquo;\nKev never believed in getting something for nothing, so he didn\u0026rsquo;t take the paper. The man left the paper on the step and walked away with a shake of his head.\nWatching the tall, thin man\u0026rsquo;s disappearing back, Kev let out a sigh of relief. His eyes caught sight of the paper on the step and driven by an inexplicable curiosity, he picked it up.\nKev squatted down and picked up the paper. It read \u0026ldquo;Industrial Area, Fourth Street, №223.\u0026rdquo;\n\u0026ldquo;If you want to solve your current problems…\u0026rdquo;\nThe words of the tall, thin man echoed unusually in Kev\u0026rsquo;s mind, like a persistent fly he couldn\u0026rsquo;t swat away.\nKev looked at the white paper in his hand, hesitated, and finally made a decision.\n\u0026ldquo;I\u0026rsquo;m heading to Industrial Area, Fourth Street, 223.\u0026rdquo;\n2\nindustrial Zone - A place Kev had never set foot in. In an era when everyone can be a high-end intellectual, the industrial zone was the first to realize fully automated operation, which also made it the first place that lost the warmth of humanity. Today, only some vagrants and those who can\u0026rsquo;t see the light coexist.\nThinking about this, Kev suddenly had some regrets. Seeing those rambled vagrants outside the window. Some walked aimlessly with distorted bodies, some crouched in wall corners shaking, as if they were all as insane as those in psychiatric hospitals. This made Kev not dare to meet their eyes, fearing that he would be pulled off the bus and robbed of all his possessions the next second.\n\u0026ldquo;Young man, if I may ask, what are you doing here?\u0026rdquo; The driver asked.\n\u0026ldquo;I\u0026rsquo;m looking for someone,\u0026rdquo; Kev answered.\n\u0026ldquo;Looking for someone here? Do you know what kind of people are here?\u0026rdquo; The driver looked back and said: \u0026ldquo;This place is full of people left behind by the times, all are unscrupulous men who are willing to risk their lives for money.\u0026rdquo;\n\u0026ldquo;Just drive and don\u0026rsquo;t look back.\u0026rdquo; Kev patted the driver\u0026rsquo;s seat and said.\n\u0026ldquo;Don\u0026rsquo;t worry, my virtual life during deep learning was a racing driver.\u0026rdquo; The driver said proudly.\n\u0026ldquo;Then why are you driving a taxi here? Aren\u0026rsquo;t you participating in professional competitions?\u0026rdquo;\n\u0026ldquo;This is no longer the era of matching supply and demand. If this were in the past… especially in the early days of deep learning, I would have a chance to shine.\u0026rdquo; The driver patted the steering wheel and said: \u0026ldquo;But now it\u0026rsquo;s not possible, if I want to enter professional racing, in addition to being a capable driver, I also need to have a lot of other skills in repair and business. Almost one person is a whole team.\u0026rdquo;\n\u0026ldquo;In other words, people who have only experienced deep learning once, aren\u0026rsquo;t much different from these people who haven\u0026rsquo;t had the opportunity to do deep learning?\u0026rdquo; Kev said, looking at the vagrants outside the car window.\n\u0026ldquo;There is a bit of difference, otherwise, you wouldn\u0026rsquo;t encounter me. In this era, the vast majority of people are like me, stuck in a position that is better than a vagrant but not as good as an outstanding elite, and can only do some ordinary jobs…\u0026rdquo; The driver stopped the car gradually as he was talking: \u0026ldquo;We\u0026rsquo;ve arrived at №223.\u0026rdquo;\nOutside the car window was an abandoned factory. Even the original factory brand had become blurry. There were many such abandoned factories in the industrial zone, all of which were historical buildings left behind by the impact of full automation.\n\u0026ldquo;Are you sure the address is correct?\u0026rdquo; The driver looked out the window at the dilapidated environment with some worry: \u0026ldquo;Are there people in this place?\u0026rdquo;\nKev took out the piece of paper again and confirmed that the address was correct, then paid the driver and got out of the car. Not until Kev walked into the factory did the driver start the car to leave. Even Kev himself was a little hesitant. Are there people here?\nThe inside of the factory was very spacious. The puddles everywhere on the ground made the surrounding environment very damp and cold. Perhaps only the huge safety signs on the wall still remembered the spectacular scene of a hundred people working at the same time.\nKev walked aimlessly toward the depths of the factory. He didn\u0026rsquo;t know where his destination was, let alone to find a man named William.\nPerhaps human curiosity always coincides with the inevitable direction of events. Kev\u0026rsquo;s eyes were attracted by an inconspicuous iron door in the corner. He walked up and knocked on the door on a whim.\nKev himself didn\u0026rsquo;t expect that a pair of eyes suddenly appear in the small window of the door.\n\u0026ldquo;Can I help you?\u0026rdquo; The person inside asked, sounding very alert.\n\u0026ldquo;I… came to find William,\u0026rdquo; Kev answered tentatively.\n\u0026ldquo;Are you alone?\u0026rdquo;\n\u0026ldquo;Yes.\u0026rdquo; Kev nodded.\nThe eyes inside the door changed noticeably at the mention of the name \u0026ldquo;William\u0026rdquo;, but he still looked around carefully behind Kev\u0026rsquo;s back, apparently checking to see if there were any other people around.\nSuddenly, the small window was closed again, and then there was a series of unlocking sounds from behind the door. From the sound, there was certainly more than one lock behind the door.\nThe door opened, and a man in a plaid shirt appeared in front of Kev.\n\u0026ldquo;Come in.\u0026rdquo; The man waved his hand to beckon, and after Kev entered, he quickly locked the door.\nKev sized up this William. He had a rough beard, and his hair was also greasy. His plaid shirt was very dirty, full of sweat and grease stains that had soaked in and dried out again and again. Even his slippers might break in half at any time during the \u0026ldquo;plop plop\u0026rdquo; walking process.\nThe air inside the room was turbid. The mixed smell of fermented food and cigarettes came from the beer bottles and lunch boxes scattered around, and the cigarette butts piled up like a mountain on the table.\n\u0026ldquo;Do you smoke?\u0026rdquo; The man pulled out a box of cigarettes and handed it to Kev.\n\u0026ldquo;No thanks.\u0026rdquo; Kev declined.\nKev smokes in his normal life, but because the man\u0026rsquo;s living environment is unsightly, Kev subconsciously rejects the man.\n\u0026ldquo;So, you are William?\u0026rdquo;\nThe man nodded, then lit a cigarette for himself and threw the box onto the table: \u0026ldquo;William is a pseudonym, but you can call me that if you want.\u0026rdquo;\nHearing that William was the man\u0026rsquo;s pseudonym, Kev couldn\u0026rsquo;t help but be startled. Who uses a pseudonym in this day and age besides criminals? Perhaps it\u0026rsquo;s a smoker\u0026rsquo;s habit, but Kev unintentionally glanced at the cigarette box and found that it was an expensive luxury product. This detail, which didn\u0026rsquo;t match the man\u0026rsquo;s living conditions at all, made Kev more certain that what the man was doing was extraordinary.\n\u0026ldquo;These cigarettes are quite expensive, aren\u0026rsquo;t they?\u0026rdquo;\nSmoking a cigarette, William chuckled: \u0026ldquo;This is my only hobby. By the way… how did you find me?\u0026rdquo;\n\u0026ldquo;I was introduced here by a tall and thin man. He said you could solve my problem.\u0026rdquo; Kev replied, and then thought for a moment and added: \u0026ldquo;The problem of finding a job.\u0026rdquo;\n\u0026ldquo;Do you know what I do?\u0026rdquo;\n\u0026ldquo;No clue.\u0026rdquo;\n\u0026ldquo;Let me show you first.\u0026rdquo; William didn\u0026rsquo;t hide anything and went straight to the point.\nHe got up and walked towards a black plastic at the corner of the room, then gently lifted it.\nLooking at what was under the plastic cloth, Kev opened his eyes in surprise - it was a consciousness-deep learning machine. Although the surface of the machine was somewhat rusty, and some wires were wrapped with tape, it looked just like the machines in the learning hall overall.\nPointing at the learning machine and then at William, Kev said: \u0026ldquo;This thing…\u0026rdquo;\n\u0026ldquo;This is exactly what I do. This thing can be understood as a pirated deep learning machine.\u0026rdquo; William patted the shell of the learning machine, making a \u0026ldquo;clanging\u0026rdquo; sound.\n\u0026ldquo;Where did you get this?\u0026rdquo; Kev stepped forward and carefully looked at this pirated learning machine.\n\u0026ldquo;I stole it from a scrap yard. I\u0026rsquo;ve done a simple repair. It\u0026rsquo;s almost no different from the normal learning machine.\u0026rdquo;\n\u0026ldquo;This is illegal,\u0026rdquo; Kev said nervously, his voice much quieter.\n\u0026ldquo;Of course, I know it\u0026rsquo;s illegal, and I\u0026rsquo;m not the only one doing this.\u0026rdquo; William covered the black plastic cloth back on it, then walked back to the couch, sat down, and lit another cigarette: \u0026ldquo;So I didn\u0026rsquo;t force you to be complicit. You only need to pay a fiftieth of the regular fee to use my learning machine.\u0026rdquo;\nKev quickly calculated in his head. Based on his current savings, he could use this pirated learning machine nearly fifty times.\nWhat does it mean to perform fifty deep learnings? Kev had not thought about it in detail. As far as he knew, no one in the world had performed deep learning more than ten times. Thinking about this, Kev started to doubt the authenticity of the learning machine in front of him.\n\u0026ldquo;Has there ever been a problem with this pirate machine?\u0026rdquo;\nWilliam languidly leaned back on the couch and exhaled smoke into the air: \u0026ldquo;The machine I can guarantee you because there hasn\u0026rsquo;t been any problem so far, but there are some things to be careful about when it comes to users.\u0026rdquo;\n\u0026ldquo;What to be careful about?\u0026rdquo;\n\u0026ldquo;In the regular learning hall, the machines all have a so-called virtual-reality isolation device, which is designed to prevent users from mixing real-world memories in the virtual life, thus causing mental and cognitive confusion. This is one of the core technologies of the learning machine, which ensures that people can repeatedly use the learning machine without burden.\u0026rdquo; William extinguished the cigarette on the table again: \u0026ldquo;But this scrapped machine does not have such a protective device. Simply put, people who use my learning machine can possess real-world memories in their virtual life.\u0026rdquo;\nHearing this, Kev finally realized why he could quickly step out of the virtual life in which he had lost his wife and children due to a car accident. So, he immediately excitedly asked: \u0026ldquo;In this way, wouldn\u0026rsquo;t the course of the virtual life be dominated by the user? In other words, can the user do whatever they want in the virtual world?\u0026rdquo;\n\u0026ldquo;Hmm… indeed.\u0026rdquo; William stared straight at Kev: \u0026ldquo;So, I suggest that it is best not to perform deep learning more than five times on this machine.\u0026rdquo;\n\u0026ldquo;Five times? How could such a good thing be used only five times?\u0026rdquo; Kev was very puzzled by this. He had already ignored the messy environment and sat on the chair by moving aside the beer bottles on it. At this moment, all his attention was on this learning machine that might bring him everything.\n\u0026ldquo;As I just said, there are no problems with the machine. The key is people. Without the protection of virtual-reality isolation, after many deep learning exercises, users\u0026rsquo; mental states will have various problems, big and small. I don\u0026rsquo;t want to cause any trouble because of this. Moreover, the five times I mentioned is just an approximation, some people have problems after using it once.\u0026rdquo;\n\u0026ldquo;You\u0026rsquo;ve used it yourself, haven\u0026rsquo;t you?\u0026rdquo; Kev asked: \u0026ldquo;I don\u0026rsquo;t believe that you\u0026rsquo;ve used it less than five times.\u0026rdquo;\n\u0026ldquo;Me? Why would I use it?\u0026rdquo; William shrugged: \u0026ldquo;I\u0026rsquo;m the man dealing in illegal deals. All I need is to make money off of you guys. Don\u0026rsquo;t expect to get any psychological comfort from me. Let me tell you, I tell you the risk out of goodwill. The risk is for you to bear. Moreover, others who do this kind of trade may not necessarily tell you the risk.\u0026rdquo;\nAs William said, Kev was planning to find some comfort from him, to prove that there would be no problem with this learning machine, but it seemed that William was not going to give him that reassurance.\n\u0026ldquo;Can I use it once now?\u0026rdquo; Kev thought for a moment and said.\n\u0026ldquo;Just pay the money.\u0026rdquo; William stretched lazily, rubbing his fingers in front of Kev.\nWithout a word, Kev took out his wallet and handed a stack of cash to William.\nAfter receiving the money, William did not count it but placed it on the table casually. After smoking the last puff of the cigarette, he stood up and walked to the learning machine, clicked the control panel, and said: \u0026ldquo;The cleanliness is not as good as the regular machine. After all, all sorts of people have used it before. I hope you are okay with that.\u0026rdquo;\nAfter saying this, William pulled open the metal plate of the learning machine to reveal the internal cabin of the learning machine. Inside the cabin, except for some messy wiring and occasional hints of odd smell, it was no different from the one in the learning hall.\nKev frowned and climbed into the cabin. William sorted out the wires from a spider web-like bundle and pasted them on Kev\u0026rsquo;s head and body in order.\nThe cold electrodes made Kev nervous again. He swallowed his saliva and said, \u0026ldquo;You\u0026rsquo;re sure there\u0026rsquo;s no problem, right?\u0026rdquo;\n\u0026ldquo;There won\u0026rsquo;t be any problem, rest assured.\u0026rdquo; After William said this, he covered the metal plate, leaving Kev alone inside the cabin listening to his increasingly rapid heartbeat.\n\u0026ldquo;Three, two, one! Start!\u0026rdquo;\n3\nWilliam\u0026rsquo;s countdown reached Kev\u0026rsquo;s ears through the metal plate, and the next second, Kev felt the originally cramped cabin start to soften. The air around him seemed to be replaced by some kind of fluid. Kev wanted to leave the cabin but found himself completely powerless.\nJust as Kev was about to suffocate, a force suddenly pulled him out of the cabin. The bright light made his eyes squint, all he could hear was laughter all around him.\n\u0026ldquo;Congratulations, it\u0026rsquo;s a boy.\u0026rdquo;\nUpon hearing this, Kev suddenly realized he had successfully entered the virtual world and began a virtual life as a newborn. If it were not for his real memories, the experience of being born from his mother wouldn\u0026rsquo;t be as clear as it is now.\nAfter a long time, Kev\u0026rsquo;s eyes gradually adjusted to the light. He opened his eyes and observed everything around him. Within his sight, apart from the soft quilt, a woman with a sweaty head gently looked at him - no doubt this woman was Kev\u0026rsquo;s mother in the virtual world.\nThough Kev\u0026rsquo;s real memories only exist in the consciousness of his brain and could not manifest in the body of a newborn baby, this did not hinder Kev\u0026rsquo;s growth in the subsequent times like a child prodigy.\nWhen he was ten years old, Kev\u0026rsquo;s adult-like behaviors worried his parents a great deal. From their perspective, Kev was a smart child. However, that cleverness had a sense of maturity as if he had forgotten to drink Mengpo soup in his previous life. Fortunately, Kev became aware of this and made some changes. Otherwise, his virtual childhood might constantly be dealing with psychologists.\nAs such, for most of the time in his virtual life, Kev has to decipher the different reactions to daily life at various ages.\nIn his twenties, Kev, who had planned to reach the pinnacle of life in the virtual world, suddenly changed his mind.\nPerhaps the enactment of the past twenty-odd years of virtual life has compressed Kev, or perhaps the experiences in real life left him with nowhere to vent. Kev, in his current state, is not keen on learning all kinds of knowledge that can improve himself but decided to be a carefree whirlpool, drawing from life\u0026rsquo;s experiences that have always floated on the surface and been totally out of reach.\nIn his thirties, amidst the strange gazes of people in his virtual life, Kev experiences the rebelliousness of youth and the indulgence of being an adult.\nHowever, just when Kev thought he could keep playing until the end of this virtual life, he had an accident during a motorcycle race.\nBefore he could react, he was already flying in the air unable to differentiate between up and down, left and right. Not until his body fell heavily on the ground did he realize he had a car accident.\nThe smell of blood filled his nose and mouth, he struggled to get up, but he didn\u0026rsquo;t have the energy to do anything but his eyeballs. This reminded him of the car accident in his previous virtual life, the pain in his body at that time was no different than the current pain, it hurt so much that his soul was torn apart.\n……\nKev opened his eyes wildly and pushed open the metal plate. Unlike his reaction after waking up in a regular learning hall last time, Kev showed no panic after awakening this time, however, he was still breathing heavily.\n\u0026ldquo;That was quick?\u0026rdquo; William, holding a cigarette, said with a surprised tone.\n\u0026ldquo;How long has it been?\u0026rdquo; Kev tried to calm down.\n\u0026ldquo;I wasn\u0026rsquo;t paying attention. I haven\u0026rsquo;t even finished a cigarette, and you\u0026rsquo;re already out.\u0026rdquo; William said, handing Kev a cigarette, \u0026ldquo;Do you want to smoke now?\u0026rdquo;\nKev silently took the cigarette, took out his lighter lit it, and took a deep breath, \u0026ldquo;I killed myself in a motorcycle race.\u0026rdquo;\nWilliam was taken aback, then also lit a cigarette for himself and said, \u0026ldquo;Did you die instantly?\u0026rdquo;\nKev squinted his eyes and countered, \u0026ldquo;Otherwise?\u0026rdquo;\n\u0026ldquo;Well, you\u0026rsquo;re quite lucky.\u0026rdquo;\n\u0026ldquo;Lucky?\u0026rdquo; Kev was a little confused by William\u0026rsquo;s words, \u0026ldquo;Your understanding of luck seems to be different from normal people?\u0026rdquo;\nWilliam waved his hand, \u0026ldquo;It\u0026rsquo;s something I heard from other sellers of pirated study machines. They said a client, like you, had an accident and fell from the fifth floor in their virtual life. But the key is the man didn\u0026rsquo;t completely die, he became a vegetable, hanging by a thread and being taken care of by his family in the virtual world. He spent the rest of his ten years in the hospital. Just imagine, not being able to move at all and not knowing when you could die to come out…it\u0026rsquo;s even worse than death.\u0026rdquo;\n\u0026ldquo;That sounds…indeed quite scary, so what happened to that person later?\u0026rdquo;\nWilliam shook his head, \u0026ldquo;Who knows…our pirated ones don\u0026rsquo;t have a reality-virtuality isolation device. If it were a regular version, perhaps the client might suffer less.\u0026rdquo;\n\u0026ldquo;That reminds me of a riddle.\u0026rdquo;\n\u0026ldquo;Let\u0026rsquo;s hear it.\u0026rdquo;\n\u0026ldquo;Do you know what in the world is longest and shortest, fastest and slowest, can be divided yet is vast, is the least valued yet is the most worthy of regret?\u0026rdquo;\nWilliam thought for a while and replied, \u0026ldquo;I don\u0026rsquo;t know.\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s time.\u0026rdquo;\nWilliam nodded pensively, \u0026ldquo;You are quite cultured.\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s just something I heard.\u0026rdquo; Kev explained, \u0026ldquo;I heard this from my son in the last virtual life.\u0026rdquo;\n\u0026ldquo;Alright.\u0026rdquo; William chuckled, \u0026ldquo;It seems deep learning does have some use.\u0026rdquo;\n\u0026ldquo;When can I start the second time?\u0026rdquo;\n\u0026ldquo;Not going to rest a bit?\u0026rdquo;\n\u0026ldquo;No,\u0026rdquo; Kev stated. After experiencing the first pirated deep learning session, he felt that he had adapted to the virtual life mixed with real memories.\n\u0026ldquo;All the same, just pay.\u0026rdquo; William continued, rubbing his fingers together.\nKev nodded, but when he opened his wallet, he realized he had only a little cash left.\n\u0026ldquo;Could I use a card?\u0026rdquo;\n\u0026ldquo;Brother, we are committing a crime here. Could you be a bit more serious?\u0026rdquo; William helplessly shook his head, pointed to the door, and said, \u0026ldquo;Turn left at the door, about five hundred meters away, there is an ATM.\u0026rdquo;\nKev put his wallet away and said, \u0026ldquo;Then wait for me, I\u0026rsquo;ll be back soon.\u0026rdquo;\nWilliam nodded, and then unlocked the layers of locks on the door, \u0026ldquo;I suggest you should withdraw more at once, looking at you, it seems like you\u0026rsquo;ll need it many times.\u0026rdquo;\nKev didn\u0026rsquo;t reply and just walked straight out the door, walked through the damp, abandoned factory, and made his way onto the main street of the industrial zone. Kev feels he\u0026rsquo;s not far from living a happy life.\nBut withdrawing money in such a mixed-bag place like the industrial zone is undoubtedly a very dangerous behavior. Thinking about this made Kev nervous again. Luckily, the path to the ATM was quiet, with no one around.\nTen minutes later, Kev arrived at the ATM. The ATM\u0026rsquo;s one-from-one security system relaxed the originally tense Kev a little, but he still kept looking around as he withdrew money, fearing the desperados lurking in some dark corner.\nAfter Kev stashed the money away and double-checked again that there was no one around the ATM, he hugged his bag and quickly ran towards the abandoned factory.\nBut just then, a homeless man appeared out of nowhere at the entrance of the abandoned factory, right where Kev was standing. The homeless man sat on the ground, covered in dirt and filth, his hair was long and covered in dust. By comparison, William looked merely shabby, but this homeless man was completely filthy.\nKev and the homeless man stared at each other for more than a minute. This stare-down felt like a cheetah and a gazelle on a prairie.\nThe next second, the homeless man stood up and walked toward Kev, but his actions were not in a storm-like manner to snatch things. He approached Kev in a trance, at a leisurely pace.\nKev was startled by the homeless man\u0026rsquo;s actions, almost shouting out loud, but he eventually held out as being in such a place, shouting would only attract more predators.\nThen the homeless man stopped when he was a few meters away from Kev, then pointed at the bag in Kev\u0026rsquo;s hand, and made a series of incomprehensible gestures.\nKev didn\u0026rsquo;t know what the homeless man wanted to express; he only knew that the other party must want money.\n\u0026ldquo;This is mine! You can\u0026rsquo;t take it!\u0026rdquo; Kev somehow found the courage to say this to the homeless man.\nThe homeless man became a little frantic when he heard Kev\u0026rsquo;s words, his hand gestures also became more chaotic. He spoke a few words intermittently, \u0026ldquo;Go… you can\u0026rsquo;t… horrible… don\u0026rsquo;t…\u0026rdquo;\nThe homeless man had lost his ability to speak, and at this moment, Kev was like a cornered dog, hugging his money and running towards the abandoned factory.\nKev originally thought his actions were swift, but the moment he brushed past the homeless man, Kev\u0026rsquo;s arm was grabbed by the homeless man, and the bag fell to the ground.\nKev wanted to pick up the bag, but the homeless man had a firm grip on him and wouldn\u0026rsquo;t let go. He continued to speak incoherently.\nPerhaps out of fright, in the struggle, Kev kicked the homeless man in the stomach. The pain made the homeless man let go and fall to the ground.\nRealizing that the other party wasn\u0026rsquo;t that tough, Kev began punching and kicking at the homeless man. Once the homeless man couldn\u0026rsquo;t get up again, Kev finally picked up the bag that fell to the ground.\n\u0026ldquo;If you dare to rob again, I will kill you!\u0026rdquo; Kev said angrily to the man.\nThe man fell to the ground, one hand holding his stomach, and the other hand slightly raised, as if trying to grab Kev again.\nKev, seeing that there was nobody around, and considering that this was an industrial zone, where killing a person would hardly be noticed, kicked the homeless man in the face, finally, the man stopped moving.\nSeeing his coat dirtied by the homeless man, Kev didn\u0026rsquo;t hesitate to take off his jacket and throw it to the side. He told himself that he would buy a more expensive coat after earning money from several more rounds of deep learning.\nReturning to William\u0026rsquo;s place, Kev put the bag of money into William\u0026rsquo;s arms.\n\u0026ldquo;Here is the money for thirty times.\u0026rdquo; Kev rolled up his sleeves and spoke, his spirit was entirely different from before.\nWilliam, with the bag full of money in his arms, weighed it, and then casually tossed it onto the sofa without counting it.\n\u0026ldquo;Thirty times? Are you sure?\u0026rdquo; Despite asking, William had already opened the plastic sheet and began configuring the learning machine.\n\u0026ldquo;Is there a problem?\u0026rdquo; Kev asked, and without waiting for a response, he lay down in the learning machine.\n\u0026ldquo;Of course, no problem. The customer is king. Especially the ones who\u0026rsquo;ve paid, we put your needs first.\u0026rdquo; William laughed as he placed the electrode sheets on Kev. \u0026ldquo;But let me make it clear since the users are different, I have no idea what will happen if you use it thirty times under these circumstances.\u0026rdquo;\n\u0026ldquo;Well, that\u0026rsquo;d be at least bearable. It\u0026rsquo;s just like what happened to your client you mentioned, lying in the virtual life for perhaps over a dozen or even several dozen years…but that\u0026rsquo;d be better than this miserable and brutal reality life.\u0026rdquo;\n\u0026ldquo;So, we start now?\u0026rdquo;\n\u0026ldquo;Let\u0026rsquo;s get started.\u0026rdquo;\n4\nThirty lifetimes in a virtual world take about an hour and a half in the real world. Weighing up the time, William couldn\u0026rsquo;t help but marvel at the magic of this machine. Just by spending one and a half hours, the man who just entered the learning machine could gain about two thousand years of life experience, but that\u0026rsquo;s if everything goes well.\n\u0026ldquo;Knock, knock, knock …\u0026rdquo;\nA knock on the door interrupted William\u0026rsquo;s thoughts, but he didn\u0026rsquo;t feel like opening it and instead quietly waited for a few seconds.\n\u0026ldquo;Open the door! It\u0026rsquo;s me!\u0026rdquo;\nHearing the person outside announce themselves, William walked slowly to open the iron door, only to see the tall thin man standing outside.\nThe tall man walked into the room and immediately saw the learning machine in operation.\n\u0026ldquo;Oh! Is it already in use?\u0026rdquo; The tall man asked in surprise.\nWilliam locked the iron door and walked to the sofa to pick up Kevin\u0026rsquo;s bag. He took out several bundles of money and handed it to the tall man, saying, \u0026ldquo;Here … this is what you deserve. You\u0026rsquo;ve outdone yourself this time. He wanted to use it thirty times right from the start.\u0026rdquo;\nThe tall man counted the money and laughed, saying, \u0026ldquo;Aren\u0026rsquo;t you afraid someone will die?\u0026rdquo;\n\u0026ldquo;No one\u0026rsquo;s going to die, at most he may lose his soul, becoming yet another vagabond in this industrial zone.\u0026rdquo;\n\u0026ldquo;Our line of work has certainly increased the population of this industrial district.\u0026rdquo; The tall man sighed, \u0026ldquo;But on the other hand, if this guy goes mad after this, won\u0026rsquo;t I have to go find the next customer for you?\u0026rdquo;\n\u0026ldquo;I\u0026rsquo;m afraid that would be troublesome for you.\u0026rdquo; William spread his hands and laughed helplessly.\n\u0026ldquo;As long as there\u0026rsquo;s money to be made, a bit of trouble is nothing.\u0026rdquo; The tall man picked up the money and took a deep sniff, \u0026ldquo;Who could resist the smell of money?\u0026rdquo;\nThe two laughed heartily. The tall man left the room with his money after a few minutes, and William sat back on the sofa. He checked the time once more and mused to himself, \u0026ldquo;I\u0026rsquo;m really curious about what he\u0026rsquo;ll be like after he comes out.\u0026rdquo;\n……\nKevin could no longer remember how many times he had been born. He only remembered that he had had a few close shaves due to difficult births, but thankfully everything worked out fine each time.\nHowever, having lived so many lifetimes, some of his memories had begun to blur. Whenever Kevin reached adulthood, his memories would intertwine with his previous virtual lives.\nDid he arrange to go out with friends? Does he have asthma? Does he have a younger brother? Did his parents divorce? Did he confess to his crush? What did he plan to do in this life?\nHe originally thought that thirty lifetimes would each be memorable, but he didn\u0026rsquo;t expect that this false immortality, with only consciousness accumulating, would put such a great strain on memory storage.\nIt\u0026rsquo;s not hard to imagine that if he continues to live a virtual life in his current state, Kevin\u0026rsquo;s mind will certainly be thrown into chaos.\nThe only solution Kevin could think of now was to accelerate the progression of his virtual life by constantly dying and escaping the learning machine as soon as possible while he was still relatively sober.\nBut even though he knew he was living a virtual life, everything around him looked exactly like the real world, and the experience of the five senses was no different from reality. Accepting death a dozen times or so is too difficult; No one dares to die a dozen times, and Kevin\u0026rsquo;s consciousness is not very clear now. Reality and virtuality have lost their clear boundary in his mind. Every death to him feels almost like a real death.\nKevin stood on the rooftop, desperately trying to control his trembling legs. In Zhuangzi\u0026rsquo;s butterfly dream, was it Zhuangzi dreaming of becoming a butterfly, or was it a butterfly dreaming of becoming Zhuangzi? Just like Kevin now, he wasn\u0026rsquo;t sure whether entering the learning machine was a dream.\nAfter pondering for almost an hour, Kevin decided to give up thinking. He wandered towards the ground like a leaf losing its anchor.\nOnce, twice, three times…\nThe fourth time he stood on the roof of a high-rise building, Kevin was trembling, and the psychological pain caused by only three deaths almost crushed his spirit.\nThis time, Kevin left the roof in a daze.\nIn the following lives, no matter how Kevin\u0026rsquo;s outward age changed, he acted like a zombie without want or need, or you could say that his consciousness had already turned into a stone. Whether it was being carved hollow by the wind and sand of suffering, or being worn into depressions by the river of life, Kevin was feeling nothing. Now in his life, he would only do one thing - to wait for death.\n……\nAn hour and a half later, William lit a cigarette, but until he finished, the learning machine showed no sign of being opened.\nWas the person dead inside?\nThinking this, William walked over and tentatively opened the metal lid of the learning machine.\nKevin was lying there with his eyes wide open, looking no different from being dead.\nWilliam lightly slapped Kevin\u0026rsquo;s face and Kevin slowly turned his face.\n\u0026ldquo;Brother, are you okay?\u0026rdquo; William asked.\nKevin didn\u0026rsquo;t answer, but just slowly sat up from the learning machine. The electrode sheets on his body fell off due to the pull.\n\u0026ldquo;I\u0026rsquo;m asking you something,\u0026rdquo; William asked again.\nBut Kevin still didn\u0026rsquo;t seem to hear, as he walked out of the learning machine.\n\u0026ldquo;It looks like he\u0026rsquo;s gone mad,\u0026rdquo; William muttered, rushing to unlock the iron door before Kevin.\nKevin left the room slowly, step by step.\n\u0026ldquo;Take care, next time… never mind, there won\u0026rsquo;t be a next time.\u0026rdquo; William laughed as he closed the iron door, followed by a series of locking sounds.\nNow in the abandoned factory, there was only the dazed Kevin, who walked aimlessly towards the factory door. The vagabond who was killed by Kevin was still lying there. Of course, this memory was already gone from Kevin\u0026rsquo;s mind at this moment, but even if he could recall it, he wouldn\u0026rsquo;t care…\nSo, the huge industrial area has one more resident lost in their world…\n5\nSeveral months later, another oddly dressed man found his way into the industrial district. He is holding a piece of paper, looking around nervously, obviously in search of something.\nSoon, the man stopped in front of an abandoned factory. After hesitating for a while, he finally stepped inside.\nAll of this was witnessed by Kevin from a dark corner. He was covered in dirt, his hair was messy, and his eyes were void. There was a flicker of surprise in his eyes when he saw the man.\nAn hour later, the man reappeared outside the factory. His expression had noticeably changed. He even wore a triumphant smile from time to time.\nThe man withdrew a large sum of money from an ATM not far from the factory, then ran back with a bag full of cash.\nKevin, feeling as though he was looking at his past self, was spirited for the first time in his dazed state. His chaotic thoughts had a clear purpose for the first time: to stop that man.\nKevin pushed his skinny legs to run towards the man. Before the man could react, Kevin grabbed the big bag full of money and fell hard onto the ground.\nThe man was startled, but when he realized his money had been taken, he became angry, and he started to kick the fallen Kevin.\n\u0026ldquo;A piece of scum dare to steal my money? I\u0026rsquo;ll kick you to death!\u0026rdquo; The man kicked Kevin while he was down.\nKevin clung tightly to the bag, using his body to pin it down, despite being unable to exert much strength.\n\u0026ldquo;Don\u0026rsquo;t go… don\u0026rsquo;t go…\u0026rdquo; Kevin repeated these words over and over again.\n\u0026ldquo;I\u0026rsquo;ll kill you, you roach!\u0026rdquo; The man was too enraged to listen to anything. He thought Kevin was begging for mercy.\nWhen Kevin was spitting out blood and was barely alive, the man snatched back the bag and spat on Kevin.\n\u0026ldquo;Once I become a councilor, you garbage of society better be prepared to get cleared away.\u0026rdquo; The man said and directly walked into the factory.\nKevin was lying on the ground, motionless. He could feel his internal organs had been shattered by the kicks. He didn\u0026rsquo;t even have the strength left to feel the pain. Those eyes that had finally become spirited were now hollow again.\n\u0026ldquo;It\u0026rsquo;s finally time to die… This life was horrible… The next one should be much better.\u0026rdquo;\nFor Kevin now, the thing that was the longest yet the shortest, the fastest yet the slowest, the most divisible yet the most vast, the most negligible yet the most regrettable was not time, but life.\nWith these thoughts in his mind, Kevin slowly closed his eyes.\n","date":"2024-03-07T18:52:17+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*UnijjfZ4pT5tdvnIcL47DQ.jpeg","permalink":"http://localhost:1313/p/virtual-life/","title":"Virtual Life"},{"content":"The day we broke up, I discovered my girlfriend was an ultra-rich second-generation.\nBut when she was with me, she always pretended to be poor.\nFor three years, she lived and ate at my expense, even the underwear she wore was from my Wish 9.9 Bundle Purchase for her.\nWhen breaking up, she said she was tired of the plain congee and dishes, and it was time to change the taste.\nBut later, she, with red eyes, said she was willing to compensate me for everything.\nI clicked on the video in the top trending news. A woman was leaning casually against a luxury car, giving the camera a slight smile. A man was filming. The camera soon started to shake, followed by a burst of screams.\n\u0026ldquo;She is looking at me! She\u0026rsquo;s so pretty!\u0026rdquo;\nAfter that, the video ended and jumped back to the beginning.\nI watched the short video over and over dozens of times.\nThis video was released yesterday. The headline was #Chris attends the event with a new face, suspected of revealing a romantic relationship.\nChris is a new actor, the overlord of a rich family, and is known for being genuine in the entertainment circle. He is 30 years old and unmarried but never avoids admitting to relationships. Moreover, every girlfriend he revealed was younger and prettier than the last.\nEach time his romantic relationship was exposed, many people asked him to teach them how to be a Casanova.\nSome even joked that even though an 18-year-old girl has just come of age, it would be too late for her to be Chris\u0026rsquo;s girlfriend.\nWhen the video was just released, my best friend Jhonny shared it with me immediately.\nHe joked, \u0026ldquo;This beauty looks like Alice. What\u0026rsquo;s the matter? Did you piss her off, so she went to the entertainment industry to sell her body?\u0026rdquo;\nI hadn\u0026rsquo;t had a chance to reply when Johnny sent another message, \u0026ldquo;Damn it, it\u0026rsquo;s not just alike, it\u0026rsquo;s Alice! Go check the trending news.\u0026rdquo;\nThat was when I clicked on the trending news in confusion.\nAnd then, I saw that video at the top of the news list.\nI never expected that a piece of simple entertainment news could turn so many times.\nSome people initially said that Alice is a freshman in Film Academy and that she was with Chris for money and fame, in the hopes of making her way into the entertainment industry.\nBut soon someone refuted that by saying Alice was not from the Film Academy. She was a campus flower at A University and came from an average family. She worked part-time and paid tuition by herself, which means she was likely being taken care of financially by Chris due to her lack of funds. This person even posted a student card as evidence.\nBut not long after, this piece of news was overturned again.\nSomeone revealed that Alice was the little princess of the Laurence Group, the only daughter of CEO Lewis.\nShe wasn\u0026rsquo;t just any rich second generation, but a fighter jet among them. She usually kept a low profile, and her hard work and thrift were just to demonstrate her abilities. Since she was young, Chris had always been her ideal type.\nHowever, after chasing after him desperately for five years, the male side did not respond.\nThe reason for Alice\u0026rsquo;s high-profile appearance this time was that Chris was bullied by the event organizer, and she rushed to help him out, making a grand entrance with her luxury car, to save face for her beloved man.\nAnd the fact that Chris didn\u0026rsquo;t deny her presence should be an implied acknowledgment of her feelings.\nSoon after, along with this hot search, another photo came out.\nAlice, with an intense gaze, confronted a short, obese middle-aged woman.\nChris, on the other hand, was hiding behind her. The typically imposing and aloof handsome man, standing next to the dazzling woman, had eyes full of love and tenderness.\nOnce this photo was out, the hot search blew up.\nThe photo was a bit blurry, but it had a story of its own, telling the tale of a beautiful, wealthy woman who is deeply loved, and a star-like man who is completely infatuated with her.\nMeanwhile, my chat record with Alice on WeChat was still stuck at last night.\nShe told me, \u0026ldquo;I\u0026rsquo;m tired, I miss you, let\u0026rsquo;s go have hotpot tomorrow, okay?\u0026rdquo;\nI remember what I replied then.\nOh yes, I said,\n\u0026ldquo;You shouldn\u0026rsquo;t work too hard either. If it\u0026rsquo;s tiring, you don\u0026rsquo;t need to work part-time. I have money, so worst case scenario, I can take care of you.\u0026rdquo;\nBut looking back, my attempts at pretending to be rich in front of Alice were nothing short of a joke.\nAfter all, Alice in the video was decked out in high-end brands that I didn\u0026rsquo;t even recognize, and the watch she was wearing alone was worth over a million.\nWhat kind of wealth was I pretending to have as a worker earning less than 10k a month?\nShe hasn\u0026rsquo;t responded to the Weibo link I sent her.\nI drafted and deleted text in the chat box over and over again, but I still didn\u0026rsquo;t know what to say.\nI wanted to ask her what the hell was going on. Was she a rich second-generation? What was her relationship with Chris?\nEven though the trending news was buzzing, I still had a glimmer of hope, hoping to hear her explain in person that all this was a misunderstanding, that she had indeed lied to me, but all because of her helpless situation.\nBut I didn\u0026rsquo;t expect it.\nBefore I could send out any words after much drafting and deleting, I received a message from her.\nOnly three words: \u0026ldquo;Let\u0026rsquo;s break up.\u0026rdquo;\nI was stunned, and my hand, quicker than my brain, sent out an inquiry, \u0026ldquo;Why?\u0026rdquo;\n\u0026ldquo;I\u0026rsquo;m tired of it.\u0026rdquo;\n\u0026ldquo;Oh, then what about your stuff at my place?\u0026rdquo;\n\u0026ldquo;Throw them away, they\u0026rsquo;re not worth anything.\u0026rdquo;\nJhonny dragged me out for a drink.\nHe said that it\u0026rsquo;s rare for me to experience a breakup, so I should drink away the sorrow, or else it would dishonor the times he was \u0026lsquo;dog food-fed\u0026rsquo; in the past three years.\nThe bar was decked out in vibrant colors, a chaotic ambiance.\nJhonny clinked my glass and persuaded me, \u0026ldquo;It\u0026rsquo;s okay, Alice is so beautiful. Sleeping with her is a win, considering your salary, you wouldn\u0026rsquo;t be able to afford such a gorgeous girl and it\u0026rsquo;s a blessing.\u0026rdquo;\nI finished the drink in one gulp, frowned at Jhonny, and said, \u0026ldquo;Don\u0026rsquo;t talk about a girl like that.\u0026rdquo;\nHe gave a guilty smile, \u0026ldquo;Alright, let\u0026rsquo;s drink.\u0026rdquo;\nThe music was blaring.\nJhonny claimed to drink, but his tolerance was very poor. After a few glasses, he started to blur.\nAnd I have to work tomorrow.\nLooking at the emails in my inbox, I let out a deep sigh. A hard-working man barely had the right to drink away his sorrow.\nAfter dropping Jhonny off at his house, I took a cab home.\nI wanted to cry, but I endured it.\nI wanted to text her, but I held back.\nBut more than anything, I was bewildered.\nI was saving money in hopes of buying a house and writing her name on it.\nAfter all, she told me her family was not well off so she had always lacked a sense of security.\nWere the moments we shared over the past three years all fake?\nWas she done with me after just one remark?\nI leaned my head against the car window, the uneven road jolted me a little.\nIt was a struggle to get home.\nAs soon as I got off, I was hit by the cold wind and my head became even more dizzy.\nI just sat down by the road, thinking I would go upstairs when I sobered up a bit.\nBut I didn\u0026rsquo;t sit for long, someone walked over, blocking the street light.\nI looked up and saw Alice\u0026rsquo;s face.\nShe was in a plain black dress, her hair cascading down her back in waves. Her valuable accessories from head to toe made her all the more dazzling.\nShe was getting more and more out of my league.\nShe looked down at me.\n\u0026ldquo;How pathetic, do you miss me that much?\u0026rdquo;\nI was flabbergasted, not knowing what to say for a moment.\nThe look in her eyes was cold, like a stranger\u0026rsquo;s.\nI had never seen her like this before.\nShe always used to smile. Whenever we made eye contact she would suddenly lean over and hug me, and in a coquettish voice would ask me, \u0026ldquo;Brother, have you loved me more today?\u0026rdquo;\nI would always shake my head and say no. Then she would tickle me and make me take it back.\nNow, these memories filled my heart with a throbbing pain.\nI took a deep breath, only after suppressing my tears did I manage to ask her calmly.\n\u0026ldquo;What was the reason for all this?\u0026rdquo;\nShe didn\u0026rsquo;t say anything, just waved her hand.\nA Maybach car drove over from the corner of the street and stopped nearby.\nThe car door opened, and a few people got down, among them, a girl with vibrant red hair took a few steps toward me and stood in front of me, asking,\n\u0026ldquo;Poor guy, do you still remember who I am?\u0026rdquo;\nIt took me a long time to associate the person in front of me with the face I remembered.\n\u0026ldquo;Amy?\u0026rdquo;\n\u0026ldquo;Oh, you even remember. I thought you had forgotten.\u0026rdquo;\nAmy took a step back and hooked arms with Alice.\nThe smile on her face was the same as four years ago.\nI met Amy in my sophomore year. I was studying at A University and took on part-time jobs to afford tuition. One of the part-time jobs was tutoring.\nAmy was the first student I taught.\nHer family was wealthy, but her grades were poor, and she was playful.\nThe first day of class was tit and tat.\nBut by the second class, she started to play tricks.\nShe threw 500 yuan at me and asked me to help her cover up the fact that she skipped class, then, she prepared to jump out the window to attend a party.\nI didn\u0026rsquo;t take the money, but I couldn\u0026rsquo;t stop her either.\nAfraid that something would happen, I called her mother.\nBut I didn\u0026rsquo;t expect that her gentle mom would be so strict when disciplining her.\nAmy was slapped and put under strict house arrest for a long time.\nBecause of this incident, she started to bear a grudge against me.\nShe ran to A university every day making a fuss, clamoring that she would make me pay, and forcing me to apologize.\nBut accepting money to tutor, and informing the parents when the child left, was my duty.\nShe got hit was out of my expectations.\nI felt sorry but didn\u0026rsquo;t think I did something wrong.\nTherefore, I simply ignored Amy as if she didn\u0026rsquo;t exist.\nAnd she didn\u0026rsquo;t appear after that either.\nAt that time, I thought she lost interest and had forgotten about it.\nI did not expect the next time we met, it would be like this.\nAmy was watching my expression, apparently knowing I remembered, she pointed boastfully at Alice next to her and said,\n\u0026ldquo;This is my sister, do you know her? She was with you just to get back at me.\u0026rdquo;\nAlice frowned, seeming at a loss for words, but in the end, she said nothing.\nBut I got the whole picture.\nI suddenly wanted to laugh.\nAnd indeed, I did laugh. I looked up at Amy and asked, \u0026ldquo;Now, you got your revenge too, so are we square?\u0026rdquo;\nAmy was stunned, seemingly unprepared for my response.\nShe frowned and nodded hesitantly.\n\u0026ldquo;I guess…I\u0026rsquo;ve had enough of this anyway, but, aren\u0026rsquo;t you mad?\u0026rdquo;\nI shook my head, laughing even more happily, \u0026ldquo;There\u0026rsquo;s nothing to be mad about, a bet is a bet.\u0026rdquo;\n\u0026ldquo;Then I\u0026rsquo;ll go home first if there\u0026rsquo;s nothing else. Ladies, have fun.\u0026rdquo;\nAfter saying this, I turned and walked away.\nAs I went upstairs, I could vaguely hear whispers coming from behind me.\n\u0026ldquo;No way, is this guy not even sorry? Shouldn\u0026rsquo;t he be? Has Ling\u0026rsquo;s appeal stopped working? After three years of dating, he isn\u0026rsquo;t moved?\u0026rdquo;\nMorning.\nAfter turning off the alarm, I lie on the bed staring at the ceiling.\nMy mind is a mess.\nI didn\u0026rsquo;t sleep well last night,\nOr rather, I barely slept at all.\nIt\u0026rsquo;s because I searched online, asking \u0026ldquo;How to quickly get over a breakup?\u0026rdquo;\nThe most upvoted answers were: cry, keep yourself busy, read, and think.\nBut I sat on the sofa for a long time, and I just couldn\u0026rsquo;t cry.\nSo I start to tidy up, pack all my belongings, and prepare to move out.\nThe house is a two-bedroom apartment, which is large but a bit far from where I work.\nI wouldn\u0026rsquo;t have rented it if it wasn\u0026rsquo;t for her.\nNow that we\u0026rsquo;ve broken up, I could just move out.\nHowever, as I was packing, I realized that Alice didn\u0026rsquo;t have many belongings, and most of them were ones I bought for her.\nNo wonder she said she didn\u0026rsquo;t care about them.\nBecause they are not worth much.\nI went to bed at four in the morning.\nTurned off the light, tossed and turned, staring at the refreshing mobile phone screen, switching back and forth in several apps, but couldn\u0026rsquo;t take in any of the words on the screen.\nUntil the faint sunlight seeped into the room through the curtains, and then the alarm rang.\nI got up with dark circles under my eyes.\nTook a shower, and changed clothes.\nAfter a few sets of strength training, I finally looked a bit better, not so much like a ghost.\nI picked up my bag and prepared to leave for the subway as usual.\nBut outside the door, there was a sudden knock.\nI was a bit puzzled, pulled back my hand on the doorknob, and looked out through the peephole.\nBut all I saw was a patch of red, swaying in my line of sight.\nHesitant, I opened the door anyway.\nBut I didn\u0026rsquo;t expect to meet Amy who was about to knock her head on the door.\nI was startled, and frowned subconsciously, \u0026ldquo;Why are you here?\u0026rdquo;\nHer eyes brightened.\nAs if she had seen a savior, she pushed everything in her hands to me.\n\u0026ldquo;Um, I came to apologize to you, I\u0026rsquo;m sorry, it\u0026rsquo;s all my fault, I was petty, I\u0026rsquo;m sorry, could you please forgive me?\u0026rdquo;\nI stepped back a few steps and did not take the things in her hand.\nThey were some exquisite shopping bags, each of them printed with the logo of luxury brands, and a bag filled with cash.\n\u0026ldquo;What do you mean?\u0026rdquo;\nSeeing that I didn\u0026rsquo;t take the stuff, Amy\u0026rsquo;s face fell, \u0026ldquo;I just want to apologize to you.\u0026rdquo;\nI stared at her for a few seconds, and asked, \u0026ldquo;Did Alice send you?\u0026rdquo;\nShe paused, and shook her head, \u0026ldquo;Ah, no, no, Alice doesn\u0026rsquo;t know about this.\u0026rdquo;\nA male voice suddenly sounded, interrupting Amy\u0026rsquo;s stuttering, \u0026ldquo;I was the one who asked her to come, sorry, Mr. Andy.\u0026rdquo;\nAnd with the voice, another man walked around the corner of the stairs.\nThe man was wearing a mask and sunglasses, tightly wrapped, making it hard to see his face.\nBut he\u0026rsquo;s tall and well-proportioned, dressed in understated but high-quality attire, perfectly highlighting his status.\nHe stepped forward, standing beside Amy.\nThen he took off his sunglasses in front of me and extended his hand to me, \u0026ldquo;Hello, let me introduce myself, I am Chris.\u0026rdquo;\n\u0026ldquo;I am Amy\u0026rsquo;s brother, I heard about the prank they played on you… so I brought her to apologize to you.\u0026rdquo;\nChris is Amy\u0026rsquo;s brother.\nI was a little surprised, but thinking about it, it made sense.\nAlice and Amy are friends, and she berated the event organizers for Chris.\nSince they are all rich second generations, in the same circle.\nThey know each other.\nBut for his later words, I shook my head, \u0026ldquo;You don\u0026rsquo;t need to apologize to me.\u0026rdquo;\n\u0026ldquo;No, it\u0026rsquo;s all Amy\u0026rsquo;s fault, she was too immature, Alice couldn\u0026rsquo;t stand Amy\u0026rsquo;s pestering and was forced to participate in this ridiculous prank, so in essence, I didn\u0026rsquo;t teach my sister properly, it\u0026rsquo;s only right for me to apologize.\u0026rdquo;\nAs he spoke, he took the bags from Amy\u0026rsquo;s hand and irresistibly shoved them into my hands, \u0026ldquo;This is a small gift we bought on the way, consider it as compensation.\n\u0026ldquo;Plus, Alice and I are about to get engaged, I know you had some time together, but everyone knows that was just a misunderstanding, so I hope in the future you could stop bothering her, is that okay?\u0026rdquo;\n\u0026ldquo;Is this, Alice\u0026rsquo;s wish?\u0026rdquo;\n\u0026ldquo;Mr. Andy, even though you have broken up now, after all, now you know her real background…\u0026rdquo;\nThe man in front of me nodded and smiled comfortably, I don\u0026rsquo;t know what kind of person he thought I was.\nBut for that moment, I felt like a clown with nowhere to hide.\nAfter the breakup, I was sad and a little heartbroken, but before that, I never really hated Alice.\nBecause I always felt that even though our start was wrong, even though our end was ungracious,\nBut the whole three years, all the little moments we\u0026rsquo;ve had, she should at least know what kind of person I truly am.\nI don\u0026rsquo;t care whether she has money or not, and I certainly wouldn\u0026rsquo;t throw away my dignity and face, to chase after her persistently for her money.\nBut the man in front of me still smiled politely, as if not noticing the changes in my expression, he asked again,\n\u0026ldquo;Mr. Andy, you can do it, right?\u0026rdquo;\nThe final character was typed out.\nI sorted out the plan and sent it to the team lead for confirmation.\nDespite the exhaustion that has clouded my mind, I couldn\u0026rsquo;t help but think of something Chris said to me this morning.\nI said to him, \u0026ldquo;…You can rest assured. We\u0026rsquo;ve broken up, so I won\u0026rsquo;t initiate contact with my ex, irrespective of whether she\u0026rsquo;s a second-generation rich or not. So, please take these things. I don\u0026rsquo;t need them.\u0026rdquo;\nHaving said this, I put the bags back at Chris\u0026rsquo;s feet.\nRather than looking down, he laughed and said, \u0026ldquo;These are just some small items, which are not worth much. If Mr. Andy doesn\u0026rsquo;t like them, just throw them away.\u0026rdquo;\nWhen he said this, he reminded me of Alice.\nThe surreal nonchalance, as if it\u0026rsquo;s devoid of any evil intentions, yet you can\u0026rsquo;t help but feel an immense humiliation when you hear it.\nThis, in turn, brought back memories of Alice\u0026rsquo;s birthday.\nI was working extremely hard, saving costs to buy her gifts, and presenting to her what she considered as cheap stuff.\nShe must have found me ridiculous then.\nMy colleague tapped on my desk jolting me back to the present.\nShe asked, \u0026ldquo;What\u0026rsquo;s up?\u0026rdquo;\nI laughed and said, \u0026ldquo;Did you not see the group chat? The manager has been looking for you. He wants you in his office.\u0026rdquo;\n\u0026ldquo;Ahh okay, got it.\u0026rdquo; I hurriedly set aside my scattered thoughts.\nAfter thanking my colleagues, I went to the manager\u0026rsquo;s office.\nThe manager had asked about an old issue.\nThe company wanted me to host a car show in Atlanta, but was lacking experience. Hence, they needed someone from the headquarters to oversee the situation.\nThis position offered a promotion and double the salary.\nThe only issue was that even after the project ended, there would still be a possibility of being posted to Atlanta for at least half a year.\nAbout half a month ago, just when the news broke, the manager had asked me once about this.\nI had tactfully refused him by saying that I lacked experience.\nBut the manager probably knew that it was just an excuse.\nSo, he asked me again.\nThis time, I didn\u0026rsquo;t refuse.\nAfter one week of organizing my belongings, I left my unused stuff at the rental house and sent my luggage which I couldn\u0026rsquo;t carry to Jhonny. I planned to ask him to ship them to me after I found a place to stay in Atlanta.\nThe company had booked a hotel for me in Atlanta. I just needed to go there after I got off the plane.\nFor the farewell meal, Jhonny insisted on a hot pot.\nI returned to university with Jhonny and went to the usual place we used to eat.\nWhen it came to choosing the soup base for the hotpot, I habitually chose the \u0026lsquo;Yuan Yang\u0026rsquo; hotpot (spicy and non-spicy soup base).\nBut Jhonny looked puzzled and asked, \u0026ldquo;Wait, when did you stop eating spicy food?\u0026rdquo;\nI was a bit surprised and said, \u0026ldquo;I do eat spicy food.\u0026rdquo;\n\u0026ldquo;Then why did you choose the Yuan Yang hot pot? We both eat spicy food. We should have chosen the Nine Palace hotpot. \u0026quot;\nOnly then did I come back to my senses. I saw the small tick behind the Yuan Yang hotpot.\n\u0026ldquo;I accidentally ticked the wrong box,\u0026rdquo; I said, then crossed the tick and reselected the Nine Palace hotpot.\nBut in truth, it was because I was used to it.\nBecause Alice didn\u0026rsquo;t eat spicy food.\nShe encountered it when we had just started dating.\nShe thought hotpot places were too noisy and would rather eat at home.\nBut later on, she would ask me if I felt like eating hot pot.\nOnce, when we chose the Nine Palace hotpot, she was sweating all over, gulping down cold water to survive. She hardly ate anything but consumed a lot of water.\nYet when we left the hot pot place, she was still stubborn and said, \u0026ldquo;You helped a lot, brother. I think I can\nhandle spicy food better than before.\u0026rdquo;\nSeeing her pretty side profile under the streetlight, and her child-like silly laugh, I felt a sense of tenderness towards her.\nEver since then, we have only eaten the \u0026lsquo;Yuan Yang\u0026rsquo; hotpot.\nWhen I returned to my senses, Jhonny had already taken the menu and efficiently ordered some dishes. He asked me if I wanted to add more meat.\nI shook my head and said, \u0026ldquo;No need, you order.\u0026rdquo;\n\u0026ldquo;Don\u0026rsquo;t try to save money on me, Andy. Otherwise, you\u0026rsquo;ll be paying for the next meal. I\u0026rsquo;m planning on spending all your money.\u0026rdquo;\n\u0026ldquo;Well, then let\u0026rsquo;s go for a buffet next time.\u0026rdquo;\n\u0026ldquo;Get lost!\u0026rdquo;\nWe teased each other and laughed.\nThe conversation ranged from all aspects.\nBut, we avoided talking about the real reason for my departure.\nI don\u0026rsquo;t have work tomorrow.\nWe both had a drink.\nWhile I just had a flush on my face and was a bit dizzy, Jhonny was completely drunk. He was singing \u0026lsquo;I knew you were trouble\u0026rsquo; by my ear, not only off-key but also out of tune.\nI held onto him with one hand and used the other hand to pay.\nUnwittingly, he ran away when I was swiping my card.\nAfter finally paying, I found him leaning against the dining table next to the counter, talking to other customers.\nHe said, \u0026ldquo;You seem like a player to me.\u0026rdquo;\nI was completely flabbergasted.\nI rushed over to pick him up and rushed to apologize to the customers whose meal was interrupted by him.\nSuddenly, someone called my name, \u0026ldquo;Andy, what a coincidence!\u0026rdquo;\nIt was then I realized that Amy was one of the people sitting at the table.\nI was taken aback and a sense of unease started to rise within me.\nAmy was here, so would…\nI turned my head stiffly and as expected, Alice was sitting just beside me, outside the dining table.\nJhonny kept insisting and pointing at her, \u0026ldquo;Young lady, you are indeed a player. In my opinion, you should do good\ndeeds for the rest of your life, become a nun to atone for your sins.\u0026rdquo;\nBut Alice seemed unmoved by his words and just stared at me.\nFour people were at the table, and everyone was quiet. No one dared to speak.\nThe embarrassment made my scalp go numb, and I regretted letting Jhonny drink that last bottle of beer.\nI managed to control him and was about to leave.\nBut he used all his strength to struggle, \u0026ldquo;Don\u0026rsquo;t stop me!\u0026rdquo;\nWhen I managed to drag Jhonny out of the hot pot restaurant and squat at the door, I was already sweating.\nOn one hand, I was hailing a cab,\nOn the other hand, I said to Jhonny, \u0026ldquo;Stay quiet for a bit.\u0026rdquo;\nBut he looked at me for a while, and suddenly he sniffed.\n\u0026ldquo;Andy, for a woman, you even abandoned your buddies. Are you still considered a friend?\u0026rdquo;\nHis eyes gradually reddened as he was muddled by the alcohol, and tears began to drop. He grabbed my sleeve and sobbed loudly.\nTwo men were pulling and tugging at each other, which seemed bizarre.\nPassersby were looking at us.\nBut I know, Jhonny regards me as his family. I felt a bit sour in my nose for a moment. I wanted to give him a tissue to wipe his tears, but I couldn\u0026rsquo;t find any after searching my pockets.\n\u0026ldquo;Use this.\u0026rdquo;\nSomeone behind me spoke, the voice familiar.\nThe hand that reached out to me was fair and slender, holding a beautiful handkerchief.\nI didn\u0026rsquo;t take it.\nI used my sleeve to dry the tears on Jhonny\u0026rsquo;s face.\nThe person took back her hand and asked casually, \u0026ldquo;Did you block me?\u0026rdquo;\nI still didn\u0026rsquo;t answer, bowed my head to finish calling the cab, and then helped Jhonny to wait by the roadside.\nBut she caught up and grabbed my sleeve.\nI forcefully shook off her hand, and finally raised some anger, \u0026ldquo;Alice, are you sick? You are the one who said you had enough and broke up. You warned me not to harass you, what are you doing now?\u0026rdquo;\nAfter I shook her off, her eyebrows were locked, but in the end, she only said three words, \u0026ldquo;I\u0026rsquo;m sorry.\u0026rdquo;\nBut to me, it just sounded funny.\n\u0026ldquo;Alice, don\u0026rsquo;t you think your apology is a little too late?\u0026rdquo;\nShe saw me smiling, but frowned, \u0026ldquo;If you\u0026rsquo;re upset, just scold me, don\u0026rsquo;t be like this.\u0026rdquo;\n\u0026ldquo;No, I was indeed a little upset, but now I don\u0026rsquo;t care. For three years, even if you raise a cat or a dog, you would feel some emotions. But you, you\u0026rsquo;re not worthy, you aren\u0026rsquo;t, so now I just feel relieved that we broke up early.\u0026rdquo;\nMy phone vibrated, it was the driver.\nI saw the taxi parked by the side of the road, turned off the screen, and turned around, saying, \u0026ldquo;I\u0026rsquo;m leaving, and I hope to never see you again.\u0026rdquo;\nAfter I got home, I received a friend request.\nThere was no profile picture or remark, the request message only had three words: I\u0026rsquo;m sorry.\nI easily guessed who sent this message.\nBut I didn\u0026rsquo;t pay attention to it.\nBut to my surprise, the other party was very persistent.\nShe tried several different accounts, and the request messages were diverse, from \u0026ldquo;Handsome man, get to know you\u0026rdquo;, to \u0026ldquo;Bar recommendation\u0026rdquo;, then to \u0026ldquo;I am your leader, I switched numbers, add my new number.\u0026rdquo;\nIn the end, she seemed to finally realize that I wouldn\u0026rsquo;t be fooled, and filled in desperately, \u0026ldquo;I\u0026rsquo;m sorry, bro, I know I was wrong, but can you give me a chance to explain?\u0026rdquo;\nI found it funny and only replied to the last one, \u0026ldquo;Explain what? Explain that you are a liar, or explain that you are playing both ends against the middle. You want to break up peacefully, then invite me to your wedding with Chris?\u0026rdquo;\nThis time, the other party finally kept quiet.\nUpon arrival in Atlanta, the branch arranged for people to pick up at the airport.\nThe person holding the sign with my name was long-haired and stunningly beautiful. But because the temperament was too prominent, standing among a group of little girls waiting for their idols at the airport, it was obviously out of place.\n\u0026ldquo;Hello, Andy.\u0026rdquo;\n\u0026ldquo;Hello, Janey.\u0026rdquo;\nThe manager of the planning department in Atlanta and my new boss is named Janey.\nSo when I heard this name, I froze for a moment.\n\u0026ldquo;I thought you would send an assistant to pick me up.\u0026rdquo;\nJaney explained, \u0026ldquo;The assistant is off, her cat is going to give birth.\u0026rdquo;\n\u0026ldquo;Could even take a leave because her cat is giving birth, is the working atmosphere of the branch so relaxed?\u0026rdquo;\nWhile leading the way for me, Janey said with a smile, \u0026ldquo;Yes, it\u0026rsquo;s convenient for fishing, so you won\u0026rsquo;t regret it after you come.\u0026rdquo;\nI was also amused.\nThe new boss is humorous, which is a good sign.\nThe tension of leaving home and switching cities was somewhat alleviated.\nOn the way to the hotel, Janey simply introduced the situation of the branch and the work that I would be taking over.\nThe workload is not small, but it is relatively easy to get started.\nIt\u0026rsquo;s just that I had just been transferred, and I wasn\u0026rsquo;t familiar enough with the new colleagues, so it would take some time to match.\nArrive at the hotel and check in.\nMy original plan was to wait for the work to stabilize and then choose a weekend to rent a house.\nBut on the car, Janey told me that it would be very busy for the next while due to a large-scale exhibition.\nI arrived a few days early and reported to the company next Monday.\nWhy not take these few days to find a house first?\nBut just after contacting the agency and preparing to go out, I suddenly received a message from Jhonny.\n\u0026ldquo;Andy, Alice came to find me, she asked me if you moved, and where you are now.\u0026rdquo;\nI frowned, thinking that my response yesterday was already clear enough.\nI don\u0026rsquo;t understand, what\u0026rsquo;s the point of her persistence now?\nCompetitive spirit?\nDid she feel that her charm was belittled because of my indifference?\n6\nI sent a voice message directly to Johnny, firmly saying, \u0026ldquo;No matter what she asks you, don\u0026rsquo;t tell her.\u0026rdquo;\n\u0026ldquo;I understand, I haven\u0026rsquo;t said anything. However, she drank too much and seemed to have cried. She said that initially, she indeed approached you because of Amy, but after being with you, she had truly fallen for you. She intended to find an opportunity to explain everything and reveal her true identity to you, but she was afraid to hurt you, so she kept dragging. She didn\u0026rsquo;t expect you to see that video first… She said a lot, but I can\u0026rsquo;t remember all of it. Do you want to hear her explanation?\u0026rdquo;\n\u0026ldquo;No need, there\u0026rsquo;s nothing to explain. Initially, I was considerate of her because she was struggling with her studies, to make her work less part-time and concentrate on her studies, I worked hard to earn money and even got hospitalized due to exhaustion. Yet, she knew everything but deceived me for three years…\u0026rdquo;\nHalfway through typing in the chat box, I lost my train of thought.\nActually, over the past three years, Alice never asked me for anything. Working, earning money, and striving hard for our shared future, were all choices I made.\nShe didn\u0026rsquo;t ask for help, didn\u0026rsquo;t see it, and naturally, she didn\u0026rsquo;t know.\nAs for her claims, at first, she approached me with a purpose, but later got emotionally attached, I don\u0026rsquo;t doubt them.\nYou can disguise your motives, and use language to deceive, but subconscious reactions and eye contact can\u0026rsquo;t be faked.\nCountless times I was busy with work and left her aside. When I finally finished and went to find her, I could see the disappointment and loneliness on her face, which instantly transitioned into cheerful happiness.\nWhen my phone died on my way home from work, and she ran out in slippers and searched for me for two hours, only to find that I had already returned home, her first reaction was to hug me with reddened eyes, not blaming me.\nShe is a pure girl who differentiates between love and hate.\nWhen protecting her favorite person conflicted with avenging her best friend, she was probably anxious too.\nBetween revealing the truth to face the issue and continuously dragging to postpone the conflict, she was indecisive.\nIn the end, when the truth revealed itself, I became the one who was abandoned.\nSome people say that feelings between men and women are a struggle, either the east wind overpowers the west wind, or vice versa, but I disagree with this statement.\nI think a good relationship should be built on equality.\nBut because of Alice\u0026rsquo;s deception, this relationship was unequal from the beginning.\nMaybe she had a reason for it.\nBehind those actions that have hurt me deeply, was something that she couldn\u0026rsquo;t resist.\nBut, these things are meaningless to me.\nBecause we are not from the same world, we briefly fell in love due to a lie, and when the truth was revealed, we had to return to our realities.\nFrom the moment the lie was exposed, everything between us had already ended.\nThinking of this, looking at the text that I had finished typing in the chat box, I suddenly felt tired.\nThe things and people that I decided to let go, there\u0026rsquo;s no need to bring them up and complain about them again.\nI took a deep breath and deleted all the text, replacing it with a single sentence,\n\u0026ldquo;Alice is getting engaged to Chris, her affairs have nothing to do with me.\u0026rdquo;\nThe person on the other side was shocked.\n\u0026ldquo;Wow, she\u0026rsquo;s still clinging onto you even though she\u0026rsquo;s getting engaged, is she sick?\u0026rdquo;\n\u0026ldquo;Today she was passionately talking to me but didn\u0026rsquo;t retaliate at all, I thought she knew she was wrong.\n\u0026ldquo;She almost fooled me, good-looking people are the worst.\u0026rdquo;\n\u0026ldquo;But, Andy, what do you plan to do?\u0026rdquo;\n\u0026ldquo;Should we expose her? I can\u0026rsquo;t swallow this down.\u0026rdquo;\nAfter the person on the other side calmed down, I said, \u0026ldquo;No need, since we\u0026rsquo;ve broken up, there\u0026rsquo;s no need to keep getting entangled with her. Just ignore her.\u0026rdquo;\n\u0026ldquo;Okay, I understand. I promise to keep my mouth shut, I won\u0026rsquo;t let her annoy you again.\u0026rdquo;\n\u0026ldquo;How\u0026rsquo;s the situation over there? Is the South hot? Is it very different from where we are? Are you getting used to the company? Are the colleagues easy to get along with?\u0026rdquo;\nIn early May, the north is still at the junction of spring and summer, sunny days occasionally mixed with a few days of rain, jackets and short sleeves are put to use, neither can be put away.\nBut Atlanta in the south had already entered summer.\nI glanced outside the hotel window, the same tall buildings, hurrying pedestrians on the road, it didn\u0026rsquo;t seem too different from New York.\nI said on the phone, \u0026ldquo;It\u0026rsquo;s a bit hot, but it\u0026rsquo;s bearable. I\u0026rsquo;ve arrived early, and haven\u0026rsquo;t reported to the company yet. The department manager picked me up in person, seem like a nice person.\u0026rdquo; Johnny immediately became alert and anxiously asked, \u0026ldquo;Why is the manager doing such a small thing as picking up people, male or female? Is it a middle-aged woman who thinks you\u0026rsquo;re handsome and wants an office romance?\u0026rdquo; I laughed.\n\u0026ldquo;Stop talking nonsense, the branch staff is young, she\u0026rsquo;s not much older than me. She had to pick me up only because the assistant took a sudden leave and no one else could replace her.\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s impressive to be a manager at such a young age, so what does she look like, pretty?\u0026rdquo;\n\u0026ldquo;She\u0026rsquo;s… pretty good-looking.\u0026rdquo;\nBecause of Johnny\u0026rsquo;s question, I subconsciously recalled.\nLooking at the face, Janey can\u0026rsquo;t be said to be cute.\nBut at the airport, she stood in the crowd with a sign, definitely drawing quite a few people\u0026rsquo;s attention.\nI read a topic on the internet before, discussing whether cute or sexy is more important.\nOpinions were diverse and clashed with each other but a single concise statement topped the list:\nA true goddess lacks neither cuteness nor sexiness.\nJaney fully confirmed this statement.\nExquisite features, a tall nose bridge, and a well-proportioned body. Even with the most common long straight hair and work wear, she is exceptionally eye-catching on the street.\nPerhaps fearing that I was down, Johnny chatted with me on trivial topics and was reluctant to end the conversation.\nIt was me who took the initiative to tell him to go to work.\nHe hesitated for a bit then hung up the phone. Before hanging up, he said if I felt uncomfortable I should let him know and not suppress it.\nI complained with a smile, \u0026ldquo;I know, don\u0026rsquo;t act like an old lady.\u0026rdquo;\nAfter hanging up the phone, I felt very warm.\nBecause I had to view the house in the afternoon,\nSo I took my bag and went out to find a place to eat lunch.\nOn the way to the meal, I added the contact information of the rental house agent.\nThis agent was recommended to me by Janey when she heard I was looking for a house.\nThe agent was very efficient. After I sent over my requirements, they quickly matched six to seven houses for me and made an appointment for me to view them in the afternoon.\nFor commuting convenience, I wanted to rent near the company.\nWith no exception, they were all expensive.\nA twenty square meters studio, excluding utilities, costs nineteen hundred dollars. The kitchen was next to the bathroom, and the washer was squeezed next to the stove.\nAfter viewing countless houses, a flat that was up for rent seemed the most fitting.\nIt was sixty square meters, slightly away from the company, approximately one kilometer, and walkable.\nThe master bedroom had been rented out, the room available for rent was eighteen square meters and included a small bathroom. The kitchen and the living room were shared space, the rent was fifteen hundred dollars.\nMost importantly, the house was neat and had good lighting.\nI was instantly tempted, but there was only one issue - the other tenant was female.\nOne man and one woman living together sounds ambiguous and stimulating.\nBut from a realistic perspective, it brings about trouble.\nYet, the agent kept persuading me.\nThe house was newly posted not long ago, has high-cost performance, and will be rented out quickly. Once it is gone, there will be no identical ones left. The other tenant was nice; not a troublesome girl.\nIt was just because the roommate was switching jobs and moving, the room was vacant.\nAlong with my preference for the house.\nAfter hesitating for a while, I finally followed the agent\u0026rsquo;s advice.\nI wanted to wait until the other tenant got off work, to see what kind of person she was.\nUntil.\nThe agent received a message that the other tenant had returned.\nWhen the door opened, Janey walked in with her bag.\nOh, now I understand.\nWhy did the agent\u0026rsquo;s contact information just happen to be stored in Janey\u0026rsquo;s phone?\n\u0026ldquo;My roommate is changing jobs and is looking for a person to share the rent, is that you?\u0026rdquo;\nJaney reluctantly replied, \u0026ldquo;Yeah, are you also planning to live near the office?\u0026rdquo;\n\u0026ldquo;Yes.\u0026rdquo;\nThe agent, sandwiched between us, looked at me and then at her, said bewildered, \u0026ldquo;You guys know each other, what a coincidence?\u0026rdquo;\nWe both smiled bitterly.\nIndeed, it\u0026rsquo;s quite a coincidence.\nBut even so.\nI eventually decided not to share the rent with Janey.\nAfter all, sharing a living space with the opposite sex is complicated enough,\nAdding the co-worker relationship on top of this, it\u0026rsquo;s embarrassingly awkward.\nI believe Janey thinks the same.\nAfter saying goodbye to the agent,\nI took a taxi back to the hotel.\nI planned to spare another day to look at a few more rooms the agent recommended.\nBut what I didn\u0026rsquo;t expect was the arrival of Alice.\nThe hotel I am staying at was arranged by the company. Even Johnny doesn\u0026rsquo;t know the exact location.\nSo, in the lobby of the hotel, I was stunned to see Alice sitting lazily on the sofa, playing with her mobile phone, attracting frequent attention from the crowd with her beauty.\nDid she come to find me on purpose, or was it a coincidence?\nBut no matter which one it is, I don\u0026rsquo;t want to have any intersection with her.\nSo, I raised my arm to cover my face, trying to pass through the hall quickly.\nBut I didn\u0026rsquo;t expect to bump into someone.\nA middle-aged man, slightly fat, reeked of alcohol, leaning on the counter and lighting a cigarette. I bumped the lit lighter directly onto his hair, burning off a tuft of hair on his forehead.\nThe man had a slow reaction due to alcohol and even made eye contact when he raised his eyes to look at his hair. Only when the smell of burnt hair filled the air,he come back to his senses.\nAfter he hastily extinguished the fire on his head, he smashed the lighter on the ground.\n\u0026ldquo;Didn\u0026rsquo;t you see where you\u0026rsquo;re going, huh?\u0026rdquo;\n\u0026ldquo;Sorry, I didn\u0026rsquo;t see you.\u0026rdquo;\n\u0026ldquo;What nonsense, you didn\u0026rsquo;t see me, who\u0026rsquo;s this big?\u0026rdquo;\nHis roar of anger attracted the attention of everyone in the hall.\nIncluding Alice.\nI\u0026rsquo;m not good at dealing with drunken people, especially in a situation where I have to deal with a middle-aged man who looks strikingly similar to someone from my nightmares.\nMy palms were sweating unconsciously, and I wanted to escape, but I couldn\u0026rsquo;t.\nSo, I kept apologizing.\nUntil someone came over and blocked the verbal abuse of the drunk with her body, \u0026ldquo;Are you going to let him scold you like this?\u0026rdquo;\nI looked up and directly met Alice\u0026rsquo;s hurt and aggrieved gaze.\n\u0026ldquo;Don\u0026rsquo;t you think you should wait for me to explain before you decide to escape?\u0026rdquo;\nBefore I could speak, the cursing drunk got furious.\n\u0026ldquo;Who the hell is this little bitch, mind your own business, are you looking for death?\u0026rdquo;\n\u0026ldquo;Can you be quiet? You just want money, don\u0026rsquo;t you? Is this enough?\u0026rdquo;\nAlice\u0026rsquo;s gaze was sharp, and she took off her wristwatch and threw it directly into the drunk\u0026rsquo;s arms.\nThe million-dollar watch successfully calmed the drunk down.\nBut I couldn\u0026rsquo;t let her continue like this.\nWe have already broken up. There shouldn\u0026rsquo;t be any connection between us.\nSo, I had to suppress my feelings, walk around her, and face the drunk.\n\u0026ldquo;Sorry, I don\u0026rsquo;t know this person. Can you give the watch back to her? I can compensate for your burnt hair, however much you demand.\u0026rdquo;\nI didn\u0026rsquo;t carry any cash on me, so I had to take out my credit card as proof that I really would pay.\nAlice\u0026rsquo;s eyebrows furrowed, and the emotions in her eyes deepened, \u0026ldquo;Andy, what are you doing? Are you trying to alienate me?\u0026rdquo; \u0026ldquo;Alice, we\u0026rsquo;ve already broken up.\u0026rdquo;\n\u0026ldquo;But I don\u0026rsquo;t want to break up with you. There are some things that I can\u0026rsquo;t tell you right now, but I can assure you, I will not marry Chris. Can you give me some more time? I will soon call off the engagement…\u0026rdquo;\n\u0026ldquo;There\u0026rsquo;s no need.\u0026rdquo;\n\u0026ldquo;Andy, can you stop it?\u0026rdquo;\nThe friend of the drunken man, seeing us quarrel, finally sensed something wrong.\nHe came over and pulled the man away.\nHowever, this drew the attention of the crowd, many people were watching the drama secretly.\nI turned around and prepared to leave.\nBut she held my arm.\n\u0026ldquo;Can\u0026rsquo;t you give me another chance? I know I lied to you, but I came here to apologize, I know I was wrong, can\u0026rsquo;t you forgive me once? You\u0026rsquo;re just going to let go of our three-year relationship, is your heart made of stone?\u0026rdquo;\nHer eyes tinged red, irrespective of the people around her, she stared at me persistently.\nThis is the first time she has lost control since we broke up.\nI have a lot of things to say.\nBut in the end, I didn\u0026rsquo;t explain anything.\nInstead, I unwrapped her fingers gripping my arm one by one.\nAfter creating some distance from her, I said, \u0026ldquo;Alice, we are from two different worlds.\u0026rdquo;\nI turned around, got on the elevator, and haven\u0026rsquo;t looked back since.\nSo, I don\u0026rsquo;t know what her reaction was after hearing this.\nBut after I returned to my hotel room, I received a text message from a strange number.\nThere were only four words, \u0026ldquo;But I can\u0026rsquo;t let go.\u0026rdquo;\nWhat she can\u0026rsquo;t let go of, she didn\u0026rsquo;t say.\nI opened and read the message for a while, then deleted it.\nI was supposed to officially report to the company three days later.\nInitially, I was a bit nervous and worried about how to fit in with my new colleagues at the first meeting.\nBut to my surprise, after completing the onboarding procedures and being led by HR into the office, I discovered that there was nobody inside.\n\u0026ldquo;Where did everyone go? They should be in the office at this point,\u0026rdquo; I wondered.\nHR was taken aback and didn\u0026rsquo;t expect this situation. They promptly dialed Janey\u0026rsquo;s number.\nOnly then did they tell me,\n\u0026ldquo;Sara has gone to a meeting with the Editor. The rest are at the exhibition site. You wait here for a bit. When Sara comes back, she will take you over.\u0026rdquo;\nI nodded my understanding.\nOffline activities are the most troublesome, especially large-scale events such as auto shows. There are many and varied issues, and it is normal for the entire department to watch the scene together.\nI found my seat and sat down, arranging my things while waiting.\nBut only after less than five minutes, a person suddenly broke in.\n\u0026ldquo;Boss! There\u0026rsquo;s trouble at the site, you need to go there quickly, or Steven will…\u0026rdquo;\nIt was a tall and thin boy with glasses and very pale skin. Seeing that I was the only one in the office, his words came to a sudden stop, and he froze in place.\n\u0026ldquo;May I ask… who are you?\u0026rdquo;\n\u0026ldquo;My name is Andy, I\u0026rsquo;m new here.\u0026rdquo;\n\u0026ldquo;Oh, I know you! You\u0026rsquo;re the big shot from headquarters, I\u0026rsquo;m Victor. But boss, you are so handsome! I was supposed to pick you up from the airport that day, but my cat was having kittens and I couldn\u0026rsquo;t leave. By the way, do you like cats?\u0026rdquo;\nVictor casually sat down next to me.\nBut the next second, he sprung up immediately.\n\u0026ldquo;Ah no, I can\u0026rsquo;t sit down, I need to find the boss on the scene, something has happened there. Andy, do you know where the boss is, our manager, Sara?\u0026rdquo;\n\u0026ldquo;I don\u0026rsquo;t know where she is, but the HR said she was having a meeting with the Editor.\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s it.\u0026rdquo; Victor groaned in agony, visibly getting a headache, \u0026ldquo;It must be the Editor, she\u0026rsquo;s the most difficult to deal with, talkative and short-tempered. Every time the boss has a meeting with her, it must start with a whole morning at least, and she doesn\u0026rsquo;t allow interruptions in between, what should we do?\u0026rdquo;\nSeeing him like this, in the end, I couldn\u0026rsquo;t help but ask, \u0026ldquo;What happened at the scene?\u0026rdquo;\nVictor explained, and only then did I understand what was going on.\nA young planner in the office got into a quarrel with the workers on the site.\nThe reason was that the workers misread the blueprints and swapped the billboards of two car brands, which needed to be pried off and reinstalled.\nBut the workers felt that the two exhibition areas were of the same size and it was not necessary to install them again.\nIn reality, although the two exhibition areas were of the same size, the distances from the entrance were very different, and the brand owners naturally gave different booth fees.\nIt seems that there was a problem in this communication process, and it evolved from a discussion to a quarrel.\nNow the worker who led the strike sat on the ground on strike, but the progress on scene couldn\u0026rsquo;t be delayed.\nI pondered for a moment and said to Victor, \u0026ldquo;Why don\u0026rsquo;t I go to the scene with you? I have encountered similar situations before and may be able to help.\u0026rdquo;\n\u0026ldquo;Really?\u0026rdquo; Victor\u0026rsquo;s eyes lit up and thanked me repeatedly.\nThe distance between the exhibition hall and the office building was neither far nor near.\nIt took twenty minutes to take the subway and walk a few hundred meters.\nBy the time we got there, the workers had sat down on the ground in protest, and no one was working.\nA young man in a shirt, holding a fan, squatted at the door with a worried expression on his face.\nIt was easy to guess that this must be Victor\u0026rsquo;s other colleague, Steven.\nThe venue was spacious, and as Victor and I walked in, it naturally attracted the attention of the people inside.\nBut the worker who led the strike just glanced at us and warned, \u0026ldquo;No matter how many people you bring today, it\u0026rsquo;s no use. We won\u0026rsquo;t take this oppression anymore, you should quickly settle the wages from the past few days, and then we can leave.\u0026rdquo;\nSteven heard this, sprung up angrily, and wanted to start quarreling.\nI quickly signaled Victor to stop him.\nThen I stepped forward and stood in front of the leading worker.\n\u0026ldquo;Duke, when did you come to Atlanta? Why didn\u0026rsquo;t you tell me?\u0026rdquo;\nThe worker paused, seemingly not expecting me to say this.\n\u0026ldquo;Boy, don\u0026rsquo;t you call out randomly, I don\u0026rsquo;t recognize you.\u0026rdquo;\n\u0026ldquo;You don\u0026rsquo;t know me? I am Andy, didn\u0026rsquo;t we just meet in our hometown when my cousin got married two years ago?\u0026rdquo;\nThe worker still frowned, but his tone was less harsh.\n\u0026ldquo;You must have mistaken me for someone else, boy, I don\u0026rsquo;t know you.\u0026rdquo;\n\u0026ldquo;Is that so, I\u0026rsquo;m sorry uncle, I might have mistaken you for someone else. You look a bit like my cousin Duke, and I am alone here, feeling a bit homesick.\u0026rdquo;\n\u0026ldquo;No problem, no need to apologize.\u0026rdquo; The worker\u0026rsquo;s expression softened and he waved.\nThen I spoke up, \u0026ldquo;So, uncle, I am the new person in charge. I heard from my colleagues that you don\u0026rsquo;t want to continue with this job anymore. Could you tell me what happened?\u0026rdquo;\n\u0026ldquo;You still asking me what happened?\u0026rdquo; The worker\u0026rsquo;s expression was not good when mentioned this, \u0026ldquo;Isn\u0026rsquo;t it because of your colleague? She said it would take a week to finish the job, tomorrow is the last day, but now we have to take down the completed things and reinstall them, how can the work be done? Drag the time in the midday sun, don\u0026rsquo;t let us rest, we are also humans, if we don\u0026rsquo;t rest how can we work.\u0026rdquo;\nHis tone was unkind, but he at least didn\u0026rsquo;t refuse to communicate.\nI guessed the cause and was relieved.\n\u0026ldquo;That\u0026rsquo;s right, it\u0026rsquo;s their fault. They don\u0026rsquo;t say whether to do this job, who has the strength to work without a break after midday.\u0026rdquo;\nSeeing me agree with him, the worker showed a grateful expression, \u0026ldquo;Exactly, boy, it\u0026rsquo;s not that we don\u0026rsquo;t want to do this job, but mainly because everyone is hungry and can\u0026rsquo;t work.\u0026rdquo;\nI thought for a moment and said, \u0026ldquo;How about this? We will order lunch boxes for you. After you finish eating, take half an hour to change the sign. Is that okay?\u0026rdquo;\nThe worker\u0026rsquo;s eyes brightened and after a fleeting exchange of glances with his brothers behind, he nodded without much hesitation.\n\u0026ldquo;This… could work.\u0026rdquo;\nProblem solved.\nVictor called to order meals familiarly and asked the delivery to bring the meals.\nAs the two of us went to the door to wait for the takeaway, he asked me excitedly, \u0026ldquo;Andy, you are so brilliant. How did you do it? Before you came, we had been communicating with them for a long time. We used all kinds of methods but couldn\u0026rsquo;t get through to them. Why did they agree as soon as you came?\u0026rdquo;\nI smiled and explained, \u0026ldquo;Communication is not difficult, just need to understand each other.\nThe location of the car show is in the prime location of the convention center, surrounded by towering buildings, and shopping malls and entertainment facilities are everywhere, vibrant and lively.\nBut for these workers, this place is very unfamiliar.\nThe excessively high rent drove away most of the small businesses.\nThey did not understand the food delivery app, were busy all morning, they needed to walk a long way to find a suitable place to eat.\nSo their refusal to delay their lunch work is not unwilling, but they can\u0026rsquo;t.\nBecause if the rest time is reduced, they will not be able to find a place to eat nearby and will starve.\nVictor opened his mouth doubtfully, \u0026ldquo;But Andy, why didn\u0026rsquo;t they say directly if they had difficulty eating? Ordering a meal isn\u0026rsquo;t a big deal.\u0026rdquo;\n\u0026ldquo;Because they care too much.\u0026rdquo;\nThey earn a living by selling their labor, haven\u0026rsquo;t received much education, and are no longer young.\nIn this rapidly developing era, where everything is rushing towards better and newer, they seem to have been left behind.\nThey didn\u0026rsquo;t do anything wrong, but they were always feeling uncomfortable because they were unable to fit in.\nPeople are all like this.\nThe more they care, the more sensitive they become.\nThose seemingly stubborn and indisputable insistences are often not due to being superior, but inferiority.\nBefore Victor could speak, a voice came from behind us, \u0026ldquo;But sometimes, things and people that make people feel inferior, maybe they should not be insisted on.\u0026rdquo;\nI turned my head and saw Janey walking out of the exhibition hall.\nShe was striding with an air of determination she had just rushed over.\n10\nThe welcoming dinner at night was held near the office.\nJaney was the host, taking everyone to have Chongqing hot pot.\nBecause of the accident that happened during the day, several colleagues got to know each other in advance.\nApart from the already met Victor, operation Steven, there was an editor named Chen, and a copywriter named Hu.\nSince we\u0026rsquo;re about the same age.\nThe atmosphere was more harmonious than I imagined.\nAs more wine was served, the atmosphere at the table became more lively.\nSteven stood up and made a toast, his expression naughty, \u0026ldquo;Thanks to handsome Andy for saving me. If I had known that the big shot sent by the headquarters was a handsome guy, I would have gone to the airport to pick him up.\u0026rdquo;\nVictor laughed and interjected, \u0026ldquo;Andy, don\u0026rsquo;t listen to her. Steven is a heartbreaker, she falls for every handsome guy she sees.\u0026rdquo;\nSteven took the ribbing well and retorted, \u0026ldquo;What about me? Carla is the worst. She kept the resume secret from us and went to pick up the handsome guy at the airport. Isn\u0026rsquo;t this considered lustful?\u0026rdquo;\n\u0026ldquo;You\u0026rsquo;re talking nonsense. The boss went by herself because she couldn\u0026rsquo;t find anyone when I asked for leave. It\u0026rsquo;s not the same as you!\u0026rdquo;\n\u0026ldquo;How is it not the same? It\u0026rsquo;s all lust. You can\u0026rsquo;t double standard just because the boss is prettier than me.\u0026rdquo;\nThey laughed and teased each other, and it was obvious that they got along well normally.\nVictor was quite feisty, and Steven quickly lost the battle.\nHalf-jokingly, she asked Janey for help, \u0026ldquo;Boss, tell us the truth. Did you decide to pick up the person yourself after seeing the resume?\u0026rdquo;\nWhen she asked this question.\nThe others also joined in.\nI looked up and, to my surprise, made eye contact with Janey, who was sitting across from me.\nBut she just smiled and didn\u0026rsquo;t seem to want to explain.\nDue to the imminent opening of the exhibition.\nOnline promotion and offline brand connection have reached a crucial stage.\nFor the promotional video, Janey and the editors spent the whole day shooting materials on-site and editing them at the office, going back and forth.\nI took the rest of the team to monitor the situation on-site.\nAll kinds of problems arose in unexpected ways from unexpected places.\nEveryone was busy all the time.\nThat night\u0026rsquo;s welcoming dinner, however, became a rare occasion for everyone to gather in the same place after two weeks.\nMoreover, as soon as mid-month passed, the temperature in Atlanta became increasingly fierce.\nThe heat, with its humidity, felt like a net that drained one\u0026rsquo;s energy.\nSo even if things were going well and we could go out for lunch, everyone still couldn\u0026rsquo;t leave the air conditioning in the break room and ordered takeout again.\nWhen we were waiting for the food, Victor sat next to me.\nHe took out his phone and didn\u0026rsquo;t look at it for long.\nSuddenly, he exclaimed excitedly, \u0026ldquo;Look at Weibo, my female goddess is engaged!\u0026rdquo;\nThen he held up his phone in front of me.\nI could only clearly see the topic page on the screen, which read, \u0026ldquo;#Chris is low-key engaged to the young lady of Laurence Group\u0026rdquo;.\nI was stunned and didn\u0026rsquo;t say anything for a while.\nVictor thought I didn\u0026rsquo;t know these two people and explained happily, \u0026ldquo;Andy, you don\u0026rsquo;t know these two people? Didn\u0026rsquo;t you watch the trending news the other day? This couple has been good to ship for a while. The woman is a wealthy heiress, but she has liked Chris since she was young. After being treated as a little sister for many years, she left her family out of anger, supported herself through hard work, got a degree from a big college, and started her own company. Then, she came back confidently, supported Chris at an event, and changed from a little sister into a stunning beauty. Chris was finally moved and accepted this relationship. What is this? This is sweet love!\u0026rdquo; So that\u0026rsquo;s how their story is…\nIs it true?\nSteven, who had just opened a bottle of water, started talking.\n\u0026ldquo;You\u0026rsquo;re stupid, aren\u0026rsquo;t you? What sweet love, everything is fake, it\u0026rsquo;s all business. There\u0026rsquo;s no such thing as true love in the entertainment industry. You\u0026rsquo;re the kind of fool who believes in it.\u0026rdquo;\n\u0026ldquo;My best friend is a marketer. She told me these two people are not as they seem. The trending news before was all hype. Chris wanted to promote his company, so he hired people to write press releases and set the tone. The woman didn\u0026rsquo;t want to get engaged at all, she was forced into it. She couldn\u0026rsquo;t reveal anything because of family power.\u0026rdquo;\nVictor glared at him, \u0026ldquo;Don\u0026rsquo;t talk nonsense.\u0026rdquo;\n\u0026ldquo;Cut, it\u0026rsquo;s all true. If you don\u0026rsquo;t believe it, just forget it.\u0026rdquo;\nThe two of them were arguing back and forth, but they couldn\u0026rsquo;t avoid that person.\nI felt a little stuffy in the break room.\nI got up and wanted to go outside for some fresh air.\nBut I ran into Janey, who was carrying coffee to the break room.\nWhen she saw me, she handed me a cup of coffee and asked with a smile, \u0026ldquo;Have you eaten yet?\u0026rdquo;\nI shook my head, \u0026ldquo;The delivery hasn\u0026rsquo;t arrived yet.\u0026rdquo;\n\u0026ldquo;Why didn\u0026rsquo;t you go out for lunch during the break?\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s too hot outside, I don\u0026rsquo;t feel like moving.\u0026rdquo;\n\u0026ldquo;Why not wait in the break room with the air conditioning on?\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s stuffy in there.\u0026rdquo;\nThis excuse was too lame, even I felt a bit inadequate.\nBut Janey didn\u0026rsquo;t expose me, she put the coffee at the door and called the people inside to come and get it.\nThen she smiled and said to me, \u0026ldquo;I also think it\u0026rsquo;s stuffy in the room. Why don\u0026rsquo;t we wait together?\u0026rdquo;\nI just wanted to be alone and didn\u0026rsquo;t feel like socializing.\nBut after all, she was being kind and it was hard to refuse.\nThe iced Americano was a bit bitter, and my stomach was empty, so I didn\u0026rsquo;t dare to drink much.\nI muttered a little.\nWhen Janey heard, she pulled out a few pieces of candy from somewhere and put them in my hand.\nThe colorful candy wrapper was shiny and holographic.\nBut my hand was only filled with red.\nAnd indeed, I liked red the most.\nBut how did Janey know to carry these around with her, and how did she know…\nTo meet my surprised eyes, Janey suddenly smiled, she looked a bit helpless and said, \u0026ldquo;You little liar forgot everything about me. If I knew earlier, I wouldn\u0026rsquo;t have given back the candy I owed you.\u0026rdquo; 12.\nThe familiar tone and address finally awakened my memory.\n\u0026ldquo;You\u0026rsquo;re the little dwarf who got bullied!\u0026rdquo;\nWhen I was eight years old, I was staying at my uncle\u0026rsquo;s house.\nThat year, my parents divorced and started their new families.\nMy uncle, feeling sorry for me having no one to take care of me, welcomed me into his home.\nMy uncle and aunt were the kindest people in the world, and they took good care of me.\nBut no matter how good it was, there was still a barrier between us.\nWhen my cousin did something wrong, he would get beaten, run away from home, or get scolded by both parents for wanting to buy a cell phone.\nBut even so, he never lacked anything he wanted.\nAnd I was always envious.\nWhen I missed my parents too much, I would skip classes.\nI would climb over the broken railing at the school and wander around the streets.\nIt was on one of those afternoons when I skipped class that I met the little dwarf.\nShe was huddled alone in a corner, wearing a delicate little dress, but she was curled up, with a few fierce-looking dogs beside her.\nI was scared too.\nBut I picked up a stick and ran towards the pack of dogs.\nStray dogs would back off when faced with aggression, so I drove them away.\nI quickly helped her up and asked if she was okay.\nShe said she was fine, just really hungry and couldn\u0026rsquo;t outrun those dogs.\nShe looked pitiful, her stomach growling audibly.\nAfter much thought, I gave her half of the candy I had saved up for a long time.\nHer eyes lit up, and she ate it greedily, then she promised me that she would repay me by buying me more candy.\nBefore we parted ways, she asked me where I lived and what my name was.\nI told her my name.\nBut when it came to the address, I thought of another problem.\nMy uncle and aunt didn\u0026rsquo;t know I skipped classes, let alone that I had made a new friend. If this person came to my house to give me candy, wouldn\u0026rsquo;t everything be exposed?\nSo I lied and said I lived near the school, in the tallest house.\nAfter all, I came to school every day, so we would eventually meet.\nLater, we became friends.\nShe told me about her parents fighting, and the new games at her desk, and I told her how much I missed home and asked her to study hard and not mind what others said.\nBut later on, my uncle\u0026rsquo;s job changed and we had to move, which also meant changing schools.\nAnd I never thought that our next encounter would be under these circumstances.\nI felt surprised and a little curious, and asked, \u0026ldquo;How did you recognize me? Actually, it has been so long, how could you still remember me?\u0026rdquo;\nJaney looked conflicted and explained, \u0026ldquo;Don\u0026rsquo;t you remember that I said I would repay you? After that day, I had been saving money all along in order to buy you candy. I smashed all the piggy banks and went to every supermarket nearby. But when I wanted to give you the candy, I found out that you gave me a fake address. So every day, I emptied my school bag and carried candies around to find you. But then the teacher found out and told my mom. I was severely punished and all the candies were thrown away. I cried for many days at that time. How can I forget?\u0026rdquo;\nI didn\u0026rsquo;t expect that our meeting from back then would have such a follow-up.\nI felt a little guilty, suppressing a smile as I apologized, \u0026ldquo;I\u0026rsquo;m sorry, I moved afterward.\u0026rdquo;\n\u0026ldquo;No, this incident caused me too much harm, I can\u0026rsquo;t forgive you so easily.\u0026rdquo;\n\u0026ldquo;Okay, then you can call the police.\u0026rdquo;\nMy sudden response caught Janey off guard, and she burst into laughter.\nHer smile was bright and cheerful, and the frustration that had accumulated in my heart for the past few days dissipated a lot.\nI returned to the break room with the takeout.\nBut I didn\u0026rsquo;t expect that the tense atmosphere inside had changed dramatically.\nVictor and Steven, who were arguing just now, were now huddled together, focusing on their phone screens.\n\u0026ldquo;This seems like a PR crisis.\u0026rdquo;\n\u0026ldquo;It\u0026rsquo;s over, the page crashed and I can\u0026rsquo;t refresh it!\u0026rdquo;\n\u0026ldquo;Why don\u0026rsquo;t you log out and log back in?\u0026rdquo;\nThe two of them were too serious, and when Janey and I entered the room, they only briefly greeted us.\nJaney asked, \u0026ldquo;What\u0026rsquo;s going on? Why are you two so focused?\u0026rdquo;\nSteven kept refreshing his phone a few more times, seemingly without success, before looking up to explain.\n\u0026ldquo;Something big has happened, come and enjoy the show.\u0026rdquo;\n\u0026ldquo;Just now, Chris announced his engagement officially, and various marketing accounts were praising it, but now someone has leaked that a fight broke out at the engagement ceremony!\u0026rdquo;\nI frowned and subconsciously asked, \u0026ldquo;What do you mean?\u0026rdquo;\n\u0026ldquo;No one knows the details, but a paparazzo sneaked in and captured the chaotic scene at the engagement ceremony. They said that the woman didn\u0026rsquo;t even know about the engagement, she was lured there and went berserk once she found out, and then her younger sister was the first to attack.\u0026rdquo;\nThe video that came out this time was quite blurry.\nAnd with the long-distance filming, there was no sound at all.\nBut Chris was a star, with high recognition, and combined with his expensive suit and every strand of hair effortlessly stylish, he was truly eye-catching in the footage.\nThe video started with Alice pushing open the door and entering the venue.\nThe scene was luxurious, with everyone in suits and formal attire, so when Alice entered in casual clothes, she immediately attracted most of the attention.\nChris approached her, but she avoided him.\nAfter that, she looked frustrated as she questioned him.\nBut the communication seemed difficult, and Alice directly knocked over the engagement signboard with their photo on it.\nThen, Amy rushed out and grabbed Alice\u0026rsquo;s hair.\nThe scene was completely chaotic.\nSecurity guards approached, the person filming was discovered, and the video abruptly ended.\nVictor sounded resentful, \u0026ldquo;It\u0026rsquo;s terrible, my CP became real for less than an hour, and now it\u0026rsquo;s broken.\u0026rdquo;\n\u0026ldquo;And someone said that Alice has had a boyfriend for a long time in private, they met while she was studying at A University and even lived together. Everyone says that guy is a freeloader, but now she\u0026rsquo;s causing a scene at her own engagement for him. Ah, the goddess is confused!\u0026rdquo;\n\u0026ldquo;What do you mean causing a scene for that guy?\u0026rdquo; Steven interjected, \u0026ldquo;Victor, you\u0026rsquo;re too naive. This kind of wealthy heiress has been playing around outside. How could she have only been in one relationship? I think she\u0026rsquo;s just a pure scumbag, not ready to get engaged yet. Why would there be so many reasons? Carla, Lu Ge, what do you guys think?\u0026rdquo;\nJaney said, \u0026ldquo;We don\u0026rsquo;t know the whole story, so no comment.\u0026rdquo;\nAnd I didn\u0026rsquo;t want to join in this conversation, so I just shook my head\nAfter work, I should have cleaned my room first.\nBut seeing the big and small unopened boxes sent by Johnny all over the floor, I got lazy again.\nAnyway, the necessities of life are out, it doesn\u0026rsquo;t hurt to unpack these later.\nThinking this way, I turned a blind eye.\nI took a shower first.\nWrapped in a towel, I found several missed calls on my phone.\nUnknown number, but the area code was local in Atlanta.\nMaybe it\u0026rsquo;s delivery.\nThinking this way, I dialed the number back.\nUnexpectedly, it was the hotel I had stayed at before.\nThe front desk said that someone had mistakenly sent my package to the hotel, they were unable to contact the sender, so they could only inquire about my current address and sent it to me for processing.\nWho sent me something and sent it to the hotel.\nDid Johnny get it wrong?\nI\u0026rsquo;m not sure what the thing is,\nBut it\u0026rsquo;s really not good to bother the front desk, so I had to give my current address and contact information and tell them to call when the delivery arrives.\nWhen I hung up, I asked Johnny if she had sent anything to me at the hotel.\nShe denied it.\nI was full of doubts.\nI had to send a message to Janey to confirm whether the company had sent any materials to my old address by mistake.\nAfter all, the hotel was booked by the company when I first arrived in Atlanta.\nBut Janey didn\u0026rsquo;t know what was going on.\nI had no choice but to wait.\nFinally, half an hour later, the deliveryman knocked at the door.\nWithout thinking, I opened the door.\nBut I found out that it was Alice standing outside the door.\nShe was dressed in black, wearing a duckbill hat, and holding a huge suitcase.\nBangs were pressed down by the hat, covering a little eyes, the whole person stood in the shadow of the corridor, vaguely to see a hint of red lips.\nI couldn\u0026rsquo;t help but think of the video where Amy pulled her hair.\nFrowning, and asked \u0026ldquo;Why are you here.\u0026rdquo;\n\u0026ldquo;Did you bribe the hotel to reveal my address?\u0026rdquo;\nShe shook her head, \u0026ldquo;No, they refused to tell me.\u0026rdquo;\n\u0026ldquo;So I sent a package to the hotel and had the deliveryman run away after dropping it off, as I wanted to see how they would deal with it. And as I expected, they called you, and when they went to arrange delivery, I overheard the address.\u0026rdquo;\n……\nThe story was way too convoluted, and my first instinct,\nWas neither to call the cops for harassment nor to compliment her for being clever.\nBut just as I was trying to figure out what to say to get rid of her, she closed her eyes and collapsed on me.\nI was startled.\nI reflexively held her up, the hat was bumped off.\nWith the light from the room, I finally saw that her face was unnaturally flushed, and her wrist, which I had briefly touched just now, was alarmingly hot.\nShe had a fever.\nShe lay on the carpet, but was still trying hard to get up.\nMaybe it was because of the fever, her red eyes were glistening with tears and her voice was hoarse as she murmured something.\nGetting closer, I heard what she was saying, \u0026ldquo;I\u0026rsquo;m sorry, brother, it\u0026rsquo;s my fault.\u0026rdquo;\nAnd just as I was at a loss for what to do with her,\nThere was a rush of footsteps in the hallway.\nThen, a panting Janey appeared at the door.\n\u0026ldquo;Andy, are you okay? You weren\u0026rsquo;t picking up your phone, but I heard that there had been some parcel delivery scams recently…\u0026rdquo;\nThrough the wide-open door,\nJaney first looked at Alice lying unconscious on the floor, and then at me squatting next to her.\nOnly then she hesitated and changed her words, \u0026ldquo;What happened here?\u0026rdquo;\nI hurriedly explained that I just left my phone in the bedroom to charge, so I didn\u0026rsquo;t pick up the call, and I hadn\u0026rsquo;t encountered any parcel scams.\n\u0026ldquo;Did I trouble you for nothing?\u0026rdquo;\nJaney shook her head, \u0026ldquo;No, I just overthought it. \u0026quot;\nAfter helping me get Alice on the couch, Janey said goodbye.\n\u0026ldquo;If you\u0026rsquo;re fine now, then I\u0026rsquo;ll be leaving.\u0026rdquo;\nI followed her to the door.\nBut as soon as she stepped out, she turned back and asked, \u0026ldquo;If I may ask, who is… she to you?\u0026rdquo;\nShe was obviously referring to Alice.\nBut it\u0026rsquo;s always a little strange to have an ex-girlfriend suddenly drop by unannounced.\nI didn\u0026rsquo;t want my personal relationships to become office gossip, so I lied.\n\u0026ldquo;She is my cousin, she had a fight with her parents and ran away from home.\u0026rdquo;\nJaney looked at the suitcase by the door, as if heaved a sigh of relief, and laughed, \u0026ldquo;That\u0026rsquo;s just how kids are during puberty, they always run away at the drop of a hat.\u0026rdquo;\nI played along.\nAfter sending Janey away and closing the door, I realized that the person on the couch had waken up at some point.\nShe was staring at me.\n\u0026ldquo;Andy, who is your \u0026lsquo;sister\u0026rsquo;?\u0026rdquo; Her voice was hoarse from the fever and her body was weak, but she stubbornly propped herself up.\n\u0026ldquo;And also, who is that woman, your new girlfriend, did you get together with her to spite me, or do you really like her now…\u0026rdquo;\nHer breathing was somewhat chaotic, her eyelashes drooped like fans, casting a little shadow on her face,\nJust like an abandoned puppy.\nI avoided her gaze and didn\u0026rsquo;t look at her.\n\u0026ldquo;Trespassing is against the law. If you leave now, I won\u0026rsquo;t call the police.\u0026rdquo;\nShe stubbornly stared at me, stood up and asked again, \u0026ldquo;Is that woman your new girlfriend? Did you come to Atlanta for her?\u0026rdquo;\nShe had lost some weight, her small face seemed even paler and more fragile.\nI stepped back and cleared the way to the door.\nSaying, \u0026ldquo;Yes, I really like her, so your current actions drastically interfere with my life.\u0026rdquo;\n\u0026ldquo;I don\u0026rsquo;t believe it, you\u0026rsquo;re lying.\u0026rdquo;\nShe had a look of sorrow in her eyes, and her voice was trembling almost imperceptibly.\nBut I smiled, raised the corner of my mouth and looked at her, \u0026ldquo;Why should I lie to you, Alice, you wouldn\u0026rsquo;t actually think that you are important, would you?\u0026rdquo;\n\u0026ldquo;Even someone like you, I\u0026rsquo;ve heard, costs at least five thousand to keep for a month. I leached off you for three years, so I\u0026rsquo;d better be nice to you…or did you misunderstand and really think that I liked you that much?\u0026rdquo;\nThe woman in front of me instantly turned pale.\nHer emotional eyes turned from sorrow to disbelief, and finally, to anger.\nI stood inside, watching her drag her luggage away in shame.\nShe didn\u0026rsquo;t even look back when she went downstairs.\nThen I picked up my phone from the table, cut off the call and replied to the message.\n\u0026ldquo;She\u0026rsquo;s gone, she probably won\u0026rsquo;t come back.\u0026rdquo;\nThey replied immediately, \u0026ldquo;We heard everything. Thanks for your cooperation, Mr. Andy. The video has been destroyed.\u0026rdquo;\nA declaration followed.\nStating that if the video were to be leaked in the future, they would be fully responsible and would have to pay substantial damages.\nI didn\u0026rsquo;t look, I just deleted the chat.\nAfterwards, I squatted on the ground with cold hands and feet, covering my face with my hands.\nI received the message while I was on the road.\nChris contacted me.\nHe sent me a video, a video of the past that I thought no one would ever see,\nRecording my most embarrassing, most unforgettable past.\nWhen I was in college, my first part-time job was actually at a bar as a receptionist.\nA drunk man asked me to show him the way to the bathroom.\nI was young at the time and had no experience.\nI thought I was just showing him the way.\nBut when we turned the corner of the corridor, he suddenly leaned in and started touching me.\nIt was the first time I realized that some men could…\nI was stunned for a moment before I came back to my senses. I fought back frantically, shouting that I was going to call the police. The man woke up sober and cursed,\n\u0026ldquo;Darn it, why are you acting?\u0026rdquo;\nAfraid I would call the police,\nHe took out five thousand dollars and threw it in front of me, telling me to not make a fuss about it.\nFive thousand dollars.\nJust enough to cover my tuition for a year.\nIt gave me the confidence to quit my job at the bar, avoid working night shifts.\nIt allowed me to stop scrambling for tuition for at least a year, take on fewer part-time jobs.\nIt allowed me to focus on studying, work hard to win a scholarship, and find a more leisurely part-time job in my spare time.\nI took the money.\nOn the way back to school, I brainwashed myself insistently, saying, \u0026ldquo;After all, I am a man, it\u0026rsquo;s okay, five thousand is not a small amount, it\u0026rsquo;s a blessing in disguise, anyway, I will never go back to that place again, and I will never see that man…\u0026rdquo;\nBut even so.\nI took a lot of showers that day after I returned to my dorm.\nAfter that, for a long time. Every time I see a middle-aged male who is wearing glasses and is overweight, I feel nauseated\n\u0026ldquo;Knock knock knock\u0026rdquo;\nSomeone was knocking at the door.\nI was startled out of my thoughts, and called out.\n\u0026ldquo;Who is it?\u0026rdquo;\n\u0026ldquo;Flash delivery, you have a delivery.\u0026rdquo;\nThe delivery man in his uniform was holding a large bunch of sunflowers.\nThe language of sunflowers is: belief, brilliance, pride, loyalty, sunlight, brightness.\nIt signifies silent love, love that is hearty and unstoppable, where one can bravely pursue what they want…\nAlso delivered with the flowers,was a letter.\nA letter of apology handwritten by Alice:\n\u0026ldquo;Brother, this is a letter that I wrote long ago but didn\u0026rsquo;t know how to give to you.\nI am sorry, I did not want to agree to Amy\u0026rsquo;s plan to revenge you.\nI thought she was childish and foolish.\nMoreover, it was unnecessary to bully an innocent person this way.\nSo, I chose to reject her from the moment she proposed me this plan.\nShe tried to persuade and beg me, but I just ignored.\nUntil one night, we had a reunion and Amy took everyone to the coffee shop where you were part-timing.\nShe was going to make trouble.\nI didn\u0026rsquo;t want to get involved, so I stayed in the car and waited.\nThrough the glass of the coffee shop, I saw them shouting at you and deliberately throwing coffee on you.\nThat was the first time I saw you.\nI thought you would endure it,\nlike a regular victim,\nbut you didn\u0026rsquo;t.\nYou calmly asked her to pay, not only for laundry and cleaning, but also for mental distress, and you mentioned that the shop had surveillance and that you would call the police.\nAmy was stunned by you.\nAnd I was surprised.\nSurprised at how different you were from what I had imagined.\nAnd finally understanding why Amy was so against you.\nI sat in the car enjoying the show, very interested.\nUntil you were indiscriminately scolded by the manager and lost your job.\nYou walked out of the coffee shop with your head held high, like a proud gladiator.\nBut I, sitting in the car, knew that you were feeling wronged.\nI rolled down the car window, wanting to ask if you were alright.\nBut you just walked past me, muttering under your breath, \u0026ldquo;These bad guys, none of them will have flavor packs in their instant noodles in the future!\u0026rdquo;\nYou were gritting your teeth with anger, but you had no intention of giving up.\nAnd from that moment on, I suddenly felt that,\nif I were to pursue you, maybe Amy would stop bothering you, which seemed not so bad.\nThen, I agreed with Amy\u0026rsquo;s request.\nTo approach and understand you, without revealing my identity.\nBecause every time you glanced over, my heart raced.\nThe three years we spent together,\nwere the happiest, but also the most painful days of my life.\nBecause I loved you.\nBecause I lied to you.\nAnd the longer it dragged on, the more painful it became.\nI even fantasized that if things go on long enough, then you and Amy would forget each other, and the lie would resolve itself.\nBut I was wrong again, because lies aren\u0026rsquo;t worn away with time.\nThe longer it drags on, the harder it is to explain.\nUntil everything came to light, you knew who I was.\nI realized what a foolish mistake I had made.\nBut I really did realize I was wrong.\nBrother, can you forgive me, and give me another chance.\u0026rdquo;\n\u0026ldquo;Sir, could you please sign for this.\u0026rdquo;\nI was brought back to reality by the reminder in front of me.\nAfter signing, I took the bouquet of flowers and put it at the foot of the wall.\nThe once cramped and gloomy rental room seemed to be bathed in a beam of light.\nBut my vision was blurred by tears.\nOnly feeling that the distant brightness was becoming increasingly unreachable.\nWe\u0026rsquo;ve never been from the same world.\nShe is the dazzling star, radiant in every way.\nShe would not stoop to compromising for anyone.\nI don\u0026rsquo;t care about that video.\nThat\u0026rsquo;s my past, although not glamorous,but it was the best choice that I, in those days, made after weighing the pros and cons.\nEven if that video really got released, it wouldn\u0026rsquo;t cause any harm to me under the current circumstances.\nI\u0026rsquo;m just an ordinary person, I don\u0026rsquo;t live off the internet.\nIf the issue gets out, my company or colleagues might criticize.\nBut I can resign and find a new job.\nIn the adult world, while reputation and others\u0026rsquo; opinions are indeed important, strong work abilities and inner strength are the foundations of our lives.\nI\u0026rsquo;m not afraid of that video being released.\nIt\u0026rsquo;s just that Chris\u0026rsquo; phone call reminded me once again, that Alice and I have never been from the same world from the very beginning.\nWe met and depended on each other when we were at our lowest.\nBut ultimately, we are not the same\nEarlier today.\nWhen I got Chris\u0026rsquo;s message, I was still on the road.\nMy phone vibrated, alerted me of a new incoming message,\n\u0026ldquo;Mr Andy, there are some things I think you should know. Do you have time for a call?\u0026rdquo;\nIt was a strange number.\nI thought it was a scam message and ignored it.\nBut the other side immediately followed up with a sentence, \u0026ldquo;It\u0026rsquo;s about Alice, I\u0026rsquo;m Chris.\u0026rdquo;\nI\u0026rsquo;m not sure what Chris is trying to achieve by contacting me,\nBut eventually found a quiet place and took the call.\nHe said a lot.\nHe said I didn\u0026rsquo;t deserve Alice because of my background, a marriage of affluent families would be the most stable scenario, and even if I insist on staying with Alice, I could only be the third party.\nMost importantly, he told me that,\nOriginally, after I offended Amy,\nWhat she initially thought of as a way to revenge, was not so childish.\nGrowing up with a silver spoon in her mouth, a lady who had been spoiled by her family, rich and powerful, arrogant.\nAfter being beaten up and losing face, she went crazy wanting revenge.\nInvestigating me alone cost a lot of money.\nBesides, she promised a handsome reward to anyone who could dig up dirt on me.\nAnd my surveillance footage from the bar, taking money from a man,\nSomehow got into her hands.\nAmy was ecstatic and ready to post the video online, along with my personal information and professional name in a popular school network and Tieba.\n\u0026ldquo;Male university student prostitutes for money, client is same-sex.\u0026rdquo;\nIt was a headline she had prepared long before.\nIt was enough to ruin my reputation, and if the news got big enough, I could potentially be expelled by the school.\nIt was Alice who stopped her, telling her that she shouldn\u0026rsquo;t ruin other people\u0026rsquo;s lives because of her unintentional mistake.\nAmy naturally disagreed and directly refused.\nHowever, what Alice said about the possibility that she could get into trouble if the victim reports to the police, made her somewhat wary.\nShe began to hesitate about whether to release the video.\nAnd when she saw those girls who sent love letters to Alice, and looked disappointed after being rejected, suddenly she had an idea.\nShe said, \u0026ldquo;Alice, how about you help me get revenge? You go after that poor boy, and when he falls in love with you, you brutally break up with him, he will be heartbroken.\u0026rdquo;\n\u0026ldquo;I promise, as long as you help me get revenge, I will do whatever you ask in the future!\u0026rdquo;\nAs Alice wrote in her letter.\nAt first, she refused.\nBut Amy\u0026rsquo;s persistent pressure on me made her a little reluctant.\nThat\u0026rsquo;s when this outrageously long, three-year-long revenge plot began.\nAs Alice truly fell for me, she began to delay the plan.\nWhenever Amy, came to urge her to act quickly, Alice would say that I was not affectionate enough about her, and needed more time to build up feelings.\nBut as spring turns to autumn, the seasons change.\nA whole three years.\nEven the foolish Amy finally realized something was wrong.\nThat night was Alice\u0026rsquo;s father\u0026rsquo;s birthday.\nShe had to go home.\nUnexpectedly, Chris attended the event and he was embarrassed by the event organizer, Amy\u0026rsquo;s car skills were average, she pleaded with Alice to go to the event venue with her to back up Chris.\nIt didn\u0026rsquo;t occur to her that in the car, while Amy was negotiating with the event organizer, she was photographed by someone because of her attractive looks.\nThe video hit the trending list.\nDespite Chris\u0026rsquo;s team, without considering the facts, they amplified the heat for publicity, and it got hotter and hotter.\nAlice was extremely anxious, fearing that if I saw it, I would misunderstand her relationship with Chris.\nShe hurriedly tried to suppress the trending list, trying to ban the video across the web.\nYet Amy sensed something unusual from her rare outburst of emotion.\nShe questioned who Alice was suppressing the trending list for.\nDid she fall for me, and that\u0026rsquo;s why she refuses to break up with me?\nMeanwhile, that video climbed to the top of the hot list and was sent to me by Jhonny.\nAlice was in a mess.\nBut she didn\u0026rsquo;t dare to admit it in front of Amy.\nBecause she was afraid that Amy, without considering the consequences, would do something improper to me.\nSo, she could only break up with me in front of Amy, and brought Amy to me, hoping that after the play was over,\nAmy would be satisfied and would no longer harass me.\nBut Chris was much smarter than Amy.\nShe saw that Alice was helpless,\nAnd took advantage of it, threatened her.\nThe Mu family started as a supermarket business, with a large family business, very rich, but in recent years the market is not promising, plus the impact of e-commerce on the real economy, the business is slowly going downhill.\nTo maintain the family glory and try to transform the business with the help of Alice\u0026rsquo;s family.\nHe proposed to get engaged with Alice, a business marriage, for half a year, the two do not need real love, just need to maintain the title of engagement quietly.\nAnd the chip is that piece of surveillance footage, and Amy can never get close to me again.\nThe surveillance footage from that year had been erased long ago.\nChris, with the last backup in his hands.\nAlice agreed.\nBut after she finished everything, she found out she had been blacklisted by me.\nSo she forced herself to stay focused on acting in front of Amy and relatives and friends and waited until all these things were resolved before going to find me to explain everything.\nShe didn\u0026rsquo;t expect that I would leave directly.\nShe never drinks, but she was drunk many times during that period, when she was sober she would drive back to the rental house, staring at the window I used to live in until the light came on and then went out, and she would leave after the curtain was pulled open after dawn.\nBut that night, she waited for the whole night, but still couldn\u0026rsquo;t wait for the light to come on.\nShe thought I had an accident, but ran upstairs only to find out I had already left.\nThe landlord was cleaning up the room, picking through the things I left behind, trying to keep the useful ones.\nThe clothes and shoes I bought for her were all pulled out and thrown on the ground, it was a mess.\nShe teared up, squatting in the room crying.\nThe landlord was startled by her, and the neighbors almost called the police.\nBut she calmed herself down, told the landlord that she was willing to pay for these sundries, and rented the room at a higher price.\nThese are all known to Amy when she finds Alice missing and looks for her from the landlord\u0026rsquo;s mouth.\nOn the phone, Chris\u0026rsquo;s voice is cold and low, \u0026ldquo;Mr Andy, do you know, Alice always dislikes me, dislikes us who sell our marriages for the family business, for profit, but for you, for that surveillance, she still agreed to my request, got engaged with me, don\u0026rsquo;t you find it ironic?\n\u0026ldquo;From a profit perspective, Alice and I are the most suitable marriage combination, she is smart and I don\u0026rsquo;t dislike her, this marriage can promote the cooperation between two families, she can also get the approval of her parents faster with the help of my family, and inherit the family business.\n\u0026ldquo;She likes you a lot and has done a lot for you, but what about you, what have you done for her? What can you do for her? I heard that you can\u0026rsquo;t even afford to buy a house now.\n\u0026ldquo;Yes, I did lie, I meticulously planned that engagement ceremony, planning to turn the fake into real, thinking if her brain was a little bit sober, she should realize that it would be the most cost-effective to get married to me.\n\u0026ldquo;But because of you, she lost even her rationality, caused a commotion at the engagement ceremony, became a laughing stock in the whole circle, and stubbornly went to find you to explain, which even annoyed her family, a not so smart heir, even with blood relations, can lose inheritance rights.\n\u0026ldquo;It is difficult for her, a woman, to inherit the family business.\u0026rdquo;\n\u0026ldquo;Mr Andy, do you want to ruin everything for her?\u0026rdquo;\nI was silent for a long time.\nI don\u0026rsquo;t want to, and I can\u0026rsquo;t bear to.\nSo I have to remain cold and drive her away.\nI returned to the present moment and watched those flowers for a long time.\nSo long that my eyes were sore,\nThen reluctantly switched off the lights, and watched the dark engulf that beam of light, everything returned to silence.\nIn the following days, I was not feeling well.\nFortunately, the preparation for the expo had reached the final stage where the brand vehicles were entering the site, which was relatively easy.\nEven if I was absent-minded the whole time, I didn\u0026rsquo;t make any mess.\nEvery day, I hoped to go off work and go home to rest as soon as possible.\nBut today.\nAs I was going upstairs, I found the door of the next room open, with quite a lot of luggage at the door, including a pink suitcase.\nThe previous tenant moved out just last week, and new tenants moved in today.\nThe sound insulation of the house was not good.\nI hope the tenants this time won\u0026rsquo;t quarrel at midnight like the couple before.\nThinking like this, I couldn\u0026rsquo;t help but take a few more glances.\nFor some reason, I felt familiar with the pink suitcase at the next door.\nAn uneasy premonition suddenly rose in my heart.\nThe next second, a person walked out of the room.\nWearing a white short-sleeved shirt, blue jeans, black hair pushed to one side, revealing Alice\u0026rsquo;s delicate and beautiful face.\nShe was about to bend down to move things, and it felt strange to see her standing in an old, narrow residential building.\nSo surprised that I forgot to pull the key that I had stuck halfway in, \u0026ldquo;Why are you still here, didn\u0026rsquo;t you leave?\u0026rdquo;\nAlice straightened up on hearing this and looked at me, \u0026ldquo;I was planning to leave, but I upset my boyfriend and she didn\u0026rsquo;t want to go home with me, so I had to do everything to win her over until she changed her mind.\u0026rdquo;\nAs she said this, her eyes fixed on my face.\nBut hearing what she had to say, I didn\u0026rsquo;t know how to react.\nFortunately, she also didn\u0026rsquo;t wait for my answer, saying, \u0026ldquo;Okay, looking at your dark circles, I know you didn\u0026rsquo;t sleep well, hurry back to rest, when I finish tidying up here, I will invite you to my housewarming feast.\n\u0026ldquo;Of course, it\u0026rsquo;s as a neighbor, your girlfriend won\u0026rsquo;t mind, right?\u0026rdquo;\nBecause of being sick, her voice was a little hoarse, and her beautiful eyes were full of laughter, just like the first time we met.\nThen she rode a bicycle to catch up with me, the sun shining on her face, the teasing voice mixed with the wind, \u0026ldquo;Classmate, you read while walking, are you sure you won\u0026rsquo;t bump into a tree?\u0026rdquo;\nHow did I respond at that time?\nI said no, but the next second, I almost hit a street light because I was distracted by her.\nShe stopped the bike and laughed at me on the spot.\nBack to the present.\nAlice was still looking at me as if waiting for my answer.\nI pressed down the strange heartbeat, shifted my gaze, and said coldly, \u0026ldquo;No need, I don\u0026rsquo;t have the habit of making friends with strangers.\u0026rdquo;\nShe shouldn\u0026rsquo;t stay here.\nShe should go back to her world.\nAlice moved next to me.\nAfter that, she often came to knock on my door for some inexplicably strange little things.\nFor example, \u0026ldquo;Where to get WiFi?\u0026rdquo; \u0026ldquo;What to do if the access control can\u0026rsquo;t be brushed?\u0026rdquo; \u0026ldquo;What\u0026rsquo;s the contact number for bucket water?\u0026rdquo;\nAfter many times, I knew that she had ulterior motives, so I just ignored it.\nOr attitude cold, trying to quit her.\nI don\u0026rsquo;t know if she has resolved her contradictions with her parents, I have no position to ask, so I can only worry blindly.\nBut after she moved in, the originally dim hallway became brighter and brighter day by day.\nThere were several more shelves on the stairs, with various ornaments and colorful dolls.\nI even saw a ceramic flower pot on the shoe rack at her door, with a sunflower in it, facing the only small window in the hallway, blooming wildly.\nHowever, the flower seems to have not been watered for several days, and it is a bit wilting.\nPerhaps, is she thinking about it and going home…\n\u0026ldquo;What are you thinking, Andy?\u0026rdquo;\nMy shoulder was patted, and when I came back to my senses, I realized it was Victor, he said with a smile.\n\u0026ldquo;The last day of the car show is tomorrow, we start to have a holiday from the day after tomorrow, five days in a row, Andy, do you have any plans then.\u0026rdquo;\nI rubbed my neck and said, \u0026ldquo;I guess I will sleep for a day and a night first.\u0026rdquo;\n\u0026ldquo;I guess so, it\u0026rsquo;s tough to keep an eye on the scene every day at seven o\u0026rsquo;clock.\u0026rdquo;\nBecause of the coming holiday, the small group members who have been working continuously for a month have visibly become excited.\nThe afternoon activities ended.\nClean up the site, sort out the materials, and finally take a group photo, and all is over.\nOff from work and returned home.\nI dropped my bag and collapsed on the bed, just tired and listless.\nWhen I was about to fall asleep, my phone suddenly rang.\nIt was a call from Johnny.\nI only remembered then that he said he was coming to Atlanta this weekend, so I hurried to pick up the call.\n\u0026ldquo;Hey, Old Jhonny, what date did you buy your flight ticket?\u0026rdquo;\nBut the person on the phone was surprisingly excited, \u0026ldquo;Let\u0026rsquo;s talk about the ticket later, have you seen the hot search? Chris announced to quit the entertainment industry and also got married.\u0026rdquo;\nHearing Jhonny\u0026rsquo;s words, I became slightly awake, subconsciously gripped my phone, and asked, \u0026ldquo;When did this happen?\u0026rdquo;\n\u0026ldquo;A few days ago someone was revealing it, but not many people believed, the fans were all over the place to debunk the rumors that Chris was on the rise of his career and would not leave the circle, but a moment ago, the studio directly announced it, even showed the marriage certificate.\u0026rdquo;\n\u0026ldquo;Marriage certificate…\u0026rdquo;\nI subconsciously repeated these three words, feeling mixed.\nJust after getting off work, when I saw that pot of flowers, I was guessing that she really gave up and had gone back to New York.\nBut right now, when the guess was confirmed, I didn\u0026rsquo;t feel as relaxed as I had imagined.\nInstead, I felt as if a big stone was pressing on my chest and I couldn\u0026rsquo;t catch my breath.\nBut actually, this is exactly what I wanted.\nI rejected her coldly, precisely to make her leave and return to the world where she should be…\nJhonny is still talking on the other end of the phone, but I can\u0026rsquo;t listen to a word right now.\nI just interrupted him and said, \u0026ldquo;Old Jhonny, I have something here, why don\u0026rsquo;t I call you when I\u0026rsquo;m done.\u0026rdquo;\n\u0026ldquo;Alright, I just got off work and need to rush for the subway, we can talk when I get home.\u0026rdquo;\nI hung up the phone.\nThe rental house was quiet again.\nI didn\u0026rsquo;t know how long I had been lying on the bed, watching the sky outside the window gradually darken, and a bird flew past in the hazy evening.\nAnd then, the door was knocked.\nWho is it?\nI got out of bed in a daze to answer the door.\nBut unexpectedly, I saw Alice through the peephole.\nShe had cut her hair short, and without the cover of long hair, her completely exposed neck looked even more slender.\nWhat is this person doing here again?\nDo you want to reconcile with your ex after getting married and want to get my blessing?\nMixed feelings, I opened the door.\nBut she flashed the ingredients in her hand at me and said, \u0026ldquo;Do you want to come to my house for hot pot, I promised to invite you to dinner after moving in.\u0026rdquo;\n\u0026ldquo;No need, I don\u0026rsquo;t want to eat.\u0026rdquo;\nBut she still didn\u0026rsquo;t give up, \u0026ldquo;Why, you\u0026rsquo;re really afraid that your girlfriend will be unhappy?\u0026rdquo;\nHer tone was still teasing, and even my good temper was out of patience, \u0026ldquo;Alice, what do you mean, since you are married, can you not bother me anymore.\u0026rdquo;\nBut hearing this, Alice was stunned, \u0026ldquo;What are you talking about, who can I marry besides you?\u0026rdquo;\nShe doesn\u0026rsquo;t know when to stop.\nI simply pulled out my phone, clicked on the hot search, and looked for evidence for her.\nSure enough, Johnny didn\u0026rsquo;t lie to me at all.\n#ChrisRetires and #ChrisGetsMarried, hashtags firmly dominated the hot search list.\nI clicked on one at random, found the picture of the marriage certificate, and prepared to show Alice.\nBut after magnifying it, I found something wrong.\nI don\u0026rsquo;t recognize the woman on this marriage certificate.\nLook closely at the name column, it\u0026rsquo;s not written Alice.\nHow can this happen…\nI\u0026rsquo;m stunned.\nAlice leaned in to look at my phone screen, exhaled in relief, and said helplessly,\n\u0026ldquo;Do you think I married Chris?\u0026rdquo;\nI didn\u0026rsquo;t answer, and it didn\u0026rsquo;t occur to me until then that Johnny had indeed told me about Chris\u0026rsquo;s marriage, but whether the bride was Alice or not, he didn\u0026rsquo;t mention…\nI had made a mistake.\nRealizing this, I felt terrible.\nAlice laughed with bright eyes and patiently explained to me,\n\u0026ldquo;I did go back to New York yesterday and attended Chris\u0026rsquo;s wedding, but more importantly, to explain to my parents about your existence, how important you are to me, to dispel their misunderstandings, so that I can bring you home with dignity.\n\u0026ldquo;Chris just wanted a marriage alliance, he never liked me. I had to go along with his act because he had something on me, but now I\u0026rsquo;ve dealt with it all.\n\u0026ldquo;Remember, you said we couldn\u0026rsquo;t be together because we\u0026rsquo;re from different worlds, but you forgot that the moment I fell in love with you, I came to your world. I love this world so much and I don\u0026rsquo;t want to leave.\n\u0026ldquo;So, can you give me a chance? Don\u0026rsquo;t be in such a hurry to drive me away. When I\u0026rsquo;m not enough for you, you can send me away, right?\u0026rdquo;\nHer eyes were gentle and firm.\nI felt a lump in my throat as I spoke in a nasal voice, \u0026ldquo;Let me think about it.\u0026rdquo;\n\u0026ldquo;Do you make your own decisions without considering your girlfriend\u0026rsquo;s opinions?\u0026rdquo;\nShe emphasized the word \u0026ldquo;girlfriend\u0026rdquo; with a playful light in her eyes.\nAs a result, I remembered that I had lied to her earlier - I had told her that Janey was my girlfriend in a bid to make her leave, but she had found out that I was lying.\n\u0026ldquo;When did you find out?\u0026rdquo;\n\u0026ldquo;I was too attached to you, I wanted to see you one last time after being driven away, and I found out that this place has poor sound insulation, and someone\u0026rsquo;s dream talk was all about calling my name.. Moreover, Janey, despite living so close to you, would always separate from you after work…\u0026rdquo;\nI was stunned.\nI didn\u0026rsquo;t realize that I had been exposed from the beginning.\nBut then it hit me, \u0026ldquo;Wait, how did you know where Janey lives?\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s a secret.\u0026rdquo; She smirked, revealing a victorious smile, and said, \u0026ldquo;Let\u0026rsquo;s go, let\u0026rsquo;s go eat hot pot.\u0026rdquo;\n\u0026ldquo;Yinyang style?\u0026rdquo;\n\u0026ldquo;Lattice.\u0026rdquo;\nI followed her, arriving at her home.\nBut as soon as I walked in, I was taken aback.\nBecause there were just too many familiar things in the house.\nFrom the wardrobe mirror to the slippers and ornaments, they were all things that I had left to my landlord when I moved out of my house in New York because I couldn\u0026rsquo;t take them with me.\n\u0026ldquo;How did these things end up here?\u0026rdquo;\nAlice had already entered the kitchen and had begun washing vegetables.\nShe awkwardly responded, \u0026ldquo;Had someone ship them over to save money.\u0026rdquo;\n\u0026ldquo;Even this mattress?\u0026rdquo;\nDue to the thin mattress of the rental room, I had always had poor sleep quality. At that time, after struggling for a long time, I bought a latex mattress for $500.\nWe had split the cost.\nWhen I was moving, I realized that the shipping cost of taking the mattress to Atlanta was quite steep, so I had to regretfully give it up.\nBut Alice had brought everything over.\nThe shipping cost adds up to more than the original price.\nIt can\u0026rsquo;t possibly be about saving money.\nI chuckled as she blushed, but I didn\u0026rsquo;t expose her.\nBut, something\u0026rsquo;s wrong.\nIf she\u0026rsquo;s so rich, why did she pretend to be poor in the first place?\nThinking of this, I asked directly.\nAlice coughed lightly and explained, \u0026ldquo;Didn\u0026rsquo;t I boast to my family that I was not like the other trust fund kids, that I could finish college by working and studying hard, even forcing them to freeze my card? Later, I realized that I was wrong and regretted it too late, so I had to tough it out and work a part-time job. So, you may not believe me, but I was poor back then……\u0026rdquo;\nThe phone rang, interrupting our conversation.\nI picked it up only to find out that it was Janey calling.\nThe auto show was over, and the department was going to hold a celebration party. She asked when I was free to arrange a time.\n\u0026ldquo;I\u0026rsquo;m free these few days, just arrange it according to everyone else\u0026rsquo;s schedule.\u0026rdquo;\nAfter getting my answer, Janey swiftly hung up the phone.\nThat\u0026rsquo;s when I noticed that the sound of washing vegetables in the kitchen had long stopped and that a head was sneakily peeping out from the doorframe.\nSeeing this, I decided to tease her.\n\u0026ldquo;I might have to have dinner with someone else tomorrow…\u0026rdquo;\nBefore I could finish, she walked out directly, saying with a smug look on her face, \u0026ldquo;Now you have to report to me whenever you have a meal with someone, proves that I\u0026rsquo;m on your mind.\u0026rdquo;\nI couldn\u0026rsquo;t hold back my laughter.\nShe was someone who still held me in her heart despite having seen my coldest side; it didn\u0026rsquo;t make sense to tease her.\nOn a summer night in Atlanta, I had a hot pot with Alice.\nShe loved the spicy hot pot but could barely talk through the spice,\nAnd she filled the whole balcony with sunflowers.\nWelcoming me into her world.\nJaney - Extra Story\nMy name is Janey, and I feel like I\u0026rsquo;m being followed.\nAfter work, I went grocery shopping as usual.\nBut walking on the road, there\u0026rsquo;s always a strange feeling of being watched behind me.\nWhen I look back, there\u0026rsquo;s no one to be seen.\nWhat\u0026rsquo;s happening?\nCould it be arranged by the competing company?\nOur company has the opportunity to collaborate with the government on a car show, which is not an easy thing.\nA few similar-sized competitors have been eager to get involved.\nThey\u0026rsquo;ve been creating chaos since the project started.\nTracking, threats, reports, and all sorts of small moves are common.\nNow that the car show is less than half a month away, I want to see what they want to do this time.\nThinking of this, I changed my mind.\nDidn\u0026rsquo;t go grocery shopping anymore.\nInstead, I changed my route and went to a tea restaurant nearby.\nI\u0026rsquo;ve been to this tea restaurant a few times.\nThere are no private rooms, the table layout is clear, and it\u0026rsquo;s all transparent glass, which is convenient for observing the outside.\nSure enough, I had just sat down.\nBefore long, a person wearing all black and a hat and mask peeked through the glass window into the shop.\nShe\u0026rsquo;s a woman, judging from her figure.\nTaller than me, with a good figure, but aren\u0026rsquo;t men usually the ones doing the tracking?\nTo avoid frightening her, I pretended not to notice her.\nI ordered food as usual, giving off the impression of a person resolving dinner alone.\nBut as time went on, after finishing my meal, I even ordered a pot of tea, while drinking and taking out my notebook, dealing with unfinished work.\nFinally, she ran out of patience.\nShe pushed the door and came in.\nThe waiter greeted her and asked where she wanted to sit.\nBut her gaze was always staring at me lightly.\nAnd when she was led by the waiter and passed by me.\nI reached out and grabbed her sleeve.\nHer body stiffened, but she didn\u0026rsquo;t dare to look back at me, she just stared at the ground and questioned, \u0026ldquo;What are you doing?\u0026rdquo;\nI then realized that her voice was soft, she seemed to be quite young.\nThe nervousness after being caught red-handed was visually obvious.\nIt\u0026rsquo;s probably just an intern who has been bamboozled by her boss.\nShe softened her tone,\n\u0026ldquo;There\u0026rsquo;s nothing, I just want to share a table with you.\u0026rdquo;\nOf course, she was unhappy, struggling to shake me off.\nThe waiter who didn\u0026rsquo;t understand what was happening also interjected, \u0026ldquo;Madam, there are plenty of seats in the shop now, you two don\u0026rsquo;t need to share a table.\u0026rdquo;\n\u0026ldquo;But I felt a connection with this young lady at first sight, I wanted to get to know her.\n\u0026ldquo;And, you\u0026rsquo;ve been following me for so long, I should know who you are.\u0026rdquo;\nAfter saying this, the person was stiffened and looked up at me.\nAfter a few seconds.\nShe directly took off her mask.\nShowing a young and pretty face, with thick long eyelashes.\nThe waiter next to her was stunned, then murmured under her breath, \u0026ldquo;She must be a celebrity, no wonder she\u0026rsquo;s so wrapped up.\u0026rdquo;\nBut I thought this person looked familiar……\nUntil the other party calmly sat across from me.\nI then remembered where I had seen her.\n\u0026ldquo;You are Andy\u0026rsquo;s cousin?\u0026rdquo;\nThe one called Alice……\nThe other party had been lowering her head, ordering from the menu.\nHeard this, she looked up a bit disgruntled, \u0026ldquo;I\u0026rsquo;m not his cousin.\u0026rdquo;\nI frowned, recalling the scene I saw when I arrived at Andy\u0026rsquo;s house that night.\n\u0026ldquo;So who are you? Why are you following me?\u0026rdquo;\nShe didn\u0026rsquo;t answer, just kept ordering what she wanted.\nWaited until the waiter noted down the menu and left, then she spoke.\nStaring at me and asking, \u0026ldquo;Do you like Andy?\u0026rdquo;\nI was taken aback.\n\u0026ldquo;What are you asking this for?\u0026rdquo;\nBut at the same time, I was also asking myself, do I like Andy?\nThe first time I ran into Andy again was in early April when the specific time of the car show had been determined, but because it was the first time the branch company was running such a level of exhibition, they lacked experience.\nBecause of the interference from competitors, the exhibition plans of several cooperating brands have not been finalized.\nThe progress took time.\nOnly then did I report to the New York head office for solutions.\nThe head office was very efficient and quickly organized an online meeting to impart experience.\nI was responsible for the liaison.\nThe middle and high levels of the branch company were all present.\nBut I didn\u0026rsquo;t expect that the speaker on the large screen after the connection was a handsome young boy.\nHe looked a few years younger than me.\nBecause the image was severely inconsistent with expectations.\nThere was a lot of discussion in the meeting room.\nI was also a bit puzzled, we had agreed that it would be explained by experienced veterans, how did they suddenly change to a rookie at the last minute?\nBut even so, the order of the meeting still needs to be maintained.\nI was about to speak out and ask everyone to quiet down.\nAfter all, the boy on the opposite side was probably not able to keep the meeting going.\nBut before I had a chance to speak.\nThere was a voice on the other side, \u0026ldquo;Let\u0026rsquo;s save some time, you guys have too many questions.\u0026rdquo;\nThe voice was crisp and cool, and he pulled up the PPT that had been prepared a long time ago.\nNot shy at all.\nEven facing the Editor\u0026rsquo;s intentionally difficult questions, he still maintained modesty and politeness, saying, \u0026ldquo;I don\u0026rsquo;t understand how this question relates to event planning, but I believe your question should have a deeper meaning.\u0026rdquo;\nEditor blushed, but could not refute.\nShe was a mean and stingy person.\nEveryone had suffered a lot from her.\nSeeing the Editor being teased, there was a light laughter in the meeting room.\nThe subsequent meeting progress was also exceptionally smooth.\nAnd I, also have a bit of admiration for the boy on the other side of the screen.\nThe online meeting ended.\nI disconnected the computer and projection connection, waiting for everyone in the office to leave one by one, also packed up my things, ready to go off work for dinner.\nBut I didn\u0026rsquo;t expect that there would suddenly be some noise coming from the computer,\nAnd mixed with some unclear dialogue.\nThat\u0026rsquo;s when I remembered that after the meeting, the connection should have been forgotten to cut off.\nI have a habit of not shutting down the computer, I just closed the notebook straight away.\nNow, I wanted to remind the other side to disconnect.\nBut I was caught off guard when I heard the speaking voice suddenly clear.\nThe person should have brought the computer into the bathroom and called a friend.\n\u0026ldquo;Hello, Old Song, I finally finished the meeting!\u0026rdquo;\n\u0026ldquo;You don\u0026rsquo;t know, I was tricked by the leader, he\u0026rsquo;s too lazy to have a meeting, so he threw it to me, and said it was a small meeting with two or three people, turns out a large group of people was on the other side, I was scared to death.\u0026rdquo;\n\u0026ldquo;Yeah! No way, I\u0026rsquo;m too pathetic, gotta have a piece of cake as a reward for myself.\u0026rdquo;\nThe accent was familiar.\nThe originally calm and professional boy completely changed his demeanor, his voice lively and clear.\nI didn\u0026rsquo;t want to disturb him, so I just shut down the computer.\nBut after that, oddly enough, I would always remember that guy who had such a huge gap between when he was in public and when he was alone.\nAfter making mental preparations, I then made a call to a colleague who had been transferred to the head office.\nAsked who that boy was.\nThe colleague was very smart, and after laughing loudly, mercilessly pierced through my slight infatuation.\n\u0026ldquo;Carla, he has a girlfriend, and they have a good relationship.\u0026rdquo;\nGetting this answer.\nI felt a bit disappointed, but it was within my expectations.\nThe world of adults is busy, the requirements that keep changing and the endless meetings are enough to bury that little infatuation under exhaustion.\nI almost forgot about him.\nAt the beginning of May, I received a message from the leader again.\nSaying that as the car show was approaching, they were short of hands, and the head office would dispatch an experienced person to assist me in completing the project.\nI wanted to refuse outright.\n\u0026ldquo;We\u0026rsquo;re short-staffed, and we should be able to recruit new people after borrowing from other departments and getting busy for a while. But now that someone is parachuting in, not to mention whether they are adapting to the company\u0026rsquo;s pace, the top-down integration alone is not an easy task. The leader muttered, \u0026ldquo;This person originally said he wouldn\u0026rsquo;t come, he thought Atlanta was too far away, but now he seems to have broken up with his girlfriend and agreed.\u0026rdquo; Then, I saw the information. The boy on the resume had a decent look, but I was stunned. Also called Andy?\u0026rdquo;\nStanding in the leader\u0026rsquo;s office, I can\u0026rsquo;t help thinking of the local accents I heard through the conference software. When I saw his former residence again, I finally remembered that boy who had been buried in the memory of a small city for many years.\nAt the age of twelve, my parents divorced, and I followed my dad back to my hometown. The small city is idyllic, but it also naturally rejects outsiders. I felt this more clearly. At that age, children who are a bit special are always hard to make friends with. So I often wandered around alone. But one day in the alley, I was targeted by a stray dog. I was so scared that I didn\u0026rsquo;t dare to go home and almost starved to death.\nThen I met him. He saved me and also became the first friend I made. Meeting again after many years. I think it\u0026rsquo;s amazing and exciting. I couldn\u0026rsquo;t help but marvel at the cleverness of fate.\nI held down my emotions and agreed to the headquarters\u0026rsquo; plan to transfer someone over. My boss thought I was making a forced compromise, and solemnly promised not to treat me badly. But I didn\u0026rsquo;t care at all.\nFinally, the day before he arrived. The person who was originally arranged to pick up the plane was Victor. But his cat was going to give birth, and the timing was conflicting. I directly approved his leave and offered to pick him up tomorrow. Victor didn\u0026rsquo;t expect me to be so swift, quietly told Steven that Carla, who was hanging high above her affairs, had turned her sex. I laughed. Also aware that I was a bit despicable. But, when the feeling of a heartbeat comes, isn\u0026rsquo;t it really stupid not to try to seize it? I went to the airport and saw him. He seemed to be in low spirits and greeted me politely and awkwardly. I tried to make him laugh. He smiled, his guard melted away a lot, but he still couldn\u0026rsquo;t recognize me.\nNever mind, I\u0026rsquo;m not in a hurry either. Afterward, he officially joined the company and we became colleagues. The closer I got, the more I realized that he was a shining boy. And every time, when I remember the surprised and blank expression when I gave him candy, I can\u0026rsquo;t help but raise my lips. Suddenly, my desk was knocked on by someone. I recovered, listening to the person across me repeating her question. \u0026ldquo;Do you like Andy at all?\u0026rdquo; \u0026ldquo;What does it have to do with you?\u0026rdquo; \u0026ldquo;Don\u0026rsquo;t ask, answer me yes or no.\u0026rdquo; The person opposite was full of energy, with obvious hostility. For some reason, I always feel that I shouldn\u0026rsquo;t give in at this time, hands crossed to meet her gaze, \u0026ldquo;What if it is?\u0026rdquo;\nThe person opposite gave me an annoyed look and said, \u0026ldquo;I advise you to give up as soon as possible, he doesn\u0026rsquo;t like people like you.\u0026rdquo; This got me laughing, \u0026ldquo;He doesn\u0026rsquo;t like people like me, does he like people like you?\u0026rdquo; \u0026ldquo;Yes, you guessed it right.\u0026rdquo; The person on the other side took off her hat and looked at me provocatively. Even as a female, I have to admit she is very beautiful.\nI faintly remembered Victor mentioning that Andy was believed to have been deeply hurt by his ex, who cheated on him, and every time Andy brought up the topic, his mood would worsen. I looked at the girl in front of me with a complicated expression and suddenly made a guess, \u0026ldquo;Are you Andy\u0026rsquo;s ex?\u0026rdquo; On hearing this, she refuted a little unhappily, \u0026ldquo;Temporarily, temporarily ex.\u0026rdquo; I squinted my eyes, no longer tone gentle, \u0026ldquo;It\u0026rsquo;s not quite appropriate to still harass him after breaking up.\u0026rdquo; \u0026ldquo;I didn\u0026rsquo;t mean to harass him.\u0026rdquo; \u0026ldquo;So what does it mean to follow me, force me to give up, so he has to forgive you?\u0026rdquo;\nMy words probably hit the nail on the head. The person\u0026rsquo;s eyes were dimming, she bit her lip. After a long time, she finally spoke slowly, \u0026ldquo;Sorry, I didn\u0026rsquo;t mean to bother you, I\u0026rsquo;m just here today to confirm, if he\u0026rsquo;s really with you.\u0026rdquo; \u0026ldquo;If you guys are together, and he likes you, then I want to find out what kind of person you are, if you\u0026rsquo;re a good person, then I\u0026rsquo;ll choose to bless you and leave directly.\u0026rdquo; \u0026ldquo;And if you\u0026rsquo;re not together, I have to know what kind of person you are. I\u0026rsquo;ve wronged him, I want to do everything I can to get him back, so I always need to know my enemy and know myself.\u0026rdquo;\nThe person opposite was serious, with a determined look in her eyes. Females are the best at discerning whether the other is lying or not. I\u0026rsquo;m a little surprised, I didn\u0026rsquo;t expect her to be so honest, and brave to be honest. And this person doesn\u0026rsquo;t seem like the type to cheat. Victor\u0026rsquo;s intelligence is probably wrong.\nI asked the army to spy on the situation, \u0026ldquo;how did you break up?\u0026rdquo; She raised her head, and her eyes wrote the three words \u0026lsquo;wishful thinking\u0026rsquo;. After a sip of tea, she counter-questioned, \u0026ldquo;How did you know Andy\u0026rsquo;s home address?\u0026rdquo; The eyes met and both fell silent. I secretly concluded that this girl was very careful, and a tough opponent.\nSo, it dragged on until the tea restaurant was about to close, and the waiter came over to chase people. Because I couldn\u0026rsquo;t hear any enemy news from her, I was somewhat disappointed. Suggested tentatively, \u0026ldquo;Shall we find a place to sit?\u0026rdquo; \u0026ldquo;Let\u0026rsquo;s go.\u0026rdquo; The person opposite agreed very happily, obviously with the same idea as me.\nAs I left the tea house. I began to think about where to take her. Atlanta\u0026rsquo;s nights are never afraid of being late, especially with such a large square nearby. Even if it\u0026rsquo;s almost noon now, the square is still very lively, with endless food, drink, and fun stalls, and from time to time a cartoon car comes over, with the laughter of children. I was checking Yelp on my phone, but someone came over to greet me. It was a little girl with a publicity flyer, smiling with a mouthful of white teeth.\n\u0026ldquo;Two beauties, our new store is opening, we are now holding a balloon game, following the official account can get darts, and participate in the prizes, do you want to try?\u0026rdquo; I waved my hand, intending to refuse.\nSince the young person introduced it so enthusiastically, I finally took a glance in the direction she pointed at.\nNot far away, there was a temporary stage set up.\nIn the middle were three huge targets, covered with countless tiny colored balloons.\nNext to the targets, there was a whole wall of plush toys, set up as rewards.\nMany people participated in the activity, and the top row of toys was almost all taken.\nThe last left on that row was a bright yellow sunflower doll.\nI remember that Andy\u0026rsquo;s WeChat profile picture seems to be this doll.\nIf I win it and give it to him…\n\u0026ldquo;Where is the QR code, I want to participate.\u0026rdquo;\nWhile I was still thinking, Alice\u0026rsquo;s voice sounded from behind.\nFeeling alarmed, only one thought left in my mind: I can\u0026rsquo;t let her get ahead.\nI quickly scanned the QR code as well.\nWe both rushed to collect darts and lined up.\nThe young girl was a bit dumbfounded, not understanding why the two of us, who weren\u0026rsquo;t enthusiastic at first, became so eager all of a sudden.\nEach person gets ten darts.\nYou need to hit more than five to get the soft toy; otherwise, you only get a keychain as a souvenir.\nHer target and mine are the last remaining sunflower dolls.\nI don\u0026rsquo;t think I\u0026rsquo;ve thrown darts this seriously in my entire life.\nBut fortunately, heaven rewards the diligent.\nI won the doll ahead of her.\nAnd all the way, Alice stared at the doll in my hand angrily.\n\u0026ldquo;You, an adult, snatched a toy from a child who wanted it. Is it so deserved to win?\u0026rdquo;\nBut I\u0026rsquo;m in a good mood.\n\u0026ldquo;Oh, I\u0026rsquo;m willing.\u0026rdquo;\nBecause of this.\nWhen we sat down for a drink, both of them had a strong will to win, fighting each other fiercely.\nAnd then they both got drunk.\n\u0026ldquo;Miss Jiang, it seems you\u0026rsquo;re drunk. Maybe you should stop drinking.\u0026rdquo;\nBut even though I said this my tolerance isn\u0026rsquo;t great either. I\u0026rsquo;m barely holding on, just refusing to give in to her.\n\u0026ldquo;I\u0026rsquo;m not drunk, it\u0026rsquo;s just hot here, and my face is a bit red.\u0026rdquo;\nShe is still stubborn, standing up and saying she needs to go to the restroom.\nUnexpectedly, she was being sneaky. She made a round from the side, approached from my back, and tried to steal the doll I hid under the chair.\nCaught stealing, she sheepishly returned to the table.\n\u0026ldquo;Your reaction is very fast.\u0026rdquo;\nI couldn\u0026rsquo;t help but tease her, \u0026ldquo;If you can\u0026rsquo;t win, you try to steal, isn\u0026rsquo;t that a bit mean?\u0026rdquo;\nWith her head down guiltily, her face, already flushed, turned even redder.\n\u0026ldquo;But Andy likes it.\u0026rdquo;\nWith these words, she suddenly stood up and banged her hand on the table.\n\u0026ldquo;I\u0026rsquo;m sorry! It was mean of me. We agreed to a fair competition. I shouldn\u0026rsquo;t have stolen your toy!\u0026rdquo;\nShe was so loud that many people in the bar turned to look.\nSuch a socially awkward scene happened next, but it was even harder for me to understand.\nBecause I also stood up and patted her shoulder.\nPraised her loudly, \u0026ldquo;Well said! You may not be as pretty as me, but you have a good character!\u0026rdquo;\n\u0026ldquo;But I am prettier than you, I am much more good-looking than you, let\u0026rsquo;s compete.\u0026rdquo;\n\u0026ldquo;Let\u0026rsquo;s do it!\u0026rdquo;\nWhen I woke up the next day, the video I found on my phone was of two women, completely intoxicated, appearing on the screen, struggling to keep their faces as far away from the screen as possible.\n\u0026ldquo;You stand in the front, otherwise my face looks enlarged.\u0026rdquo;\n\u0026ldquo;No way, your face is already big, doesn\u0026rsquo;t matter if you stay in the front.\u0026rdquo;\nThe passer-by filmed looked entertained.\nI collapsed while clutching my messy hair.\nOnly then did I realize how much drinking could make a mess.\nThe only saving grace was that we didn\u0026rsquo;t go completely insane and sent this video to Andy to judge who was more beautiful.\nBut I still remember on my way home with Alice, she seemed to have cried, deeply intoxicated, but kept repeating.\nShe said she was sincerely wrong.\nShe hoped for forgiveness.\nHer voice was sincere, and I was somewhat moved.\nBut I don\u0026rsquo;t plan to hand over the person I like because of it.\nFair competition is the greatest respect for the opponent.\nTherefore, when the exhibition ended.\nOn the night before the vacation.\nI called Andy.\nI want to ask him out for a meal.\nWhen the call got through, I was sweating in my palms.\nBut still tried to stay calm and asked him, \u0026ldquo;When are you free, can we have a meal together?\u0026rdquo;\n\u0026ldquo;Sure, I\u0026rsquo;m free these days.\u0026rdquo; The person on the phone was happy, but he asked me, \u0026ldquo;Is it a company celebration banquet, can I bring a friend along?\u0026rdquo;\nI was startled.\nIn a hurry, I changed my tone and said, \u0026ldquo;Yes, a celebration banquet, the auto show was a great success, everyone has worked hard, so let\u0026rsquo;s celebrate together. When we decide on the exact time, I\u0026rsquo;ll ask Victor to inform you.\u0026rdquo;\nHis tone was relaxed, and we chatted for a while.\nBut in that chat, there was only the friendliness between colleagues, without any trace of affection.\nAfter the call ended.\nI stood in the corridor, staring at the small sunflower outside Alice\u0026rsquo;s door for a long time.\nI understood for the first time what it meant to win the game but lose the person.\nCouldn\u0026rsquo;t help but laugh, and then I took out the sunflower doll that I had been carrying in my shopping bag all the way, and placed it next to the flower pot.\nThen I went downstairs.\nIt doesn\u0026rsquo;t matter, at least there will be no regrets after trying, it would be embarrassing if I didn\u0026rsquo;t even try.\n","date":"2024-03-06T18:44:42+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*eaeLC9wUTUDHJQzQnLPzxA.jpeg","permalink":"http://localhost:1313/p/my-girlfriend-is-a-rich-heiress/","title":"My Girlfriend Is a Rich Heiress"},{"content":"A scientific accident has led us to discover the remains of a deity deep underground.\nWe created a drill head made of a high-temperature-resistant alloy, dressed in a protective suit as heavy as a spacesuit, and drilled in a designated uninhabited area.\nAfter drilling two thousand meters deep, the exploration team leader found magma.\nInside the magma was enveloped a segment of stark white bone.\n1\nIt was this that had destroyed the cutting machine.\nThis place originally was China\u0026rsquo;s Jinping Underground Laboratory, located two thousand four hundred meters underground, it\u0026rsquo;s the deepest laboratory in the world that is used for dark matter research.\nSean sat inside the isolation room, wordless.\nThrough the one-way glass, I could observe him focusing his gaze on the door.\n\u0026ldquo;What are you looking at?\u0026rdquo;\nSean, like a wind-up machine, his eyes wide open, rigidly turned his neck: \u0026ldquo;I\u0026rsquo;m looking at the cross.\u0026rdquo;\n\u0026ldquo;The cross?\u0026rdquo;\nI lowered my head to look at the surveillance footage, light was shining through the gap in the isolation room door, forming a long cross shadow on the ground.\n\u0026ldquo;Does it hold any special meaning?\u0026rdquo; I asked again.\n\u0026ldquo;I don\u0026rsquo;t know… I advise you to run away as quickly as you can. Escape from here, from this abyss back to the surface… It\u0026rsquo;s not too late yet.\u0026rdquo;\n\u0026ldquo;Sean,\u0026rdquo; I sighed and said, \u0026ldquo;I just parachuted in, everything is all dark in front of me, I need to know what happened here.\u0026rdquo;\nSean wanted to smoke, but I rejected him.\nA formerly cheerful and optimistic colleague who had suddenly turned into a living corpse, anyone would find unsettling. Sean lowered his head, hoarsely and slowly telling me his account of events…\n2\nIn an accidental collision experiment in 2011, we found a single photon existing, entangled with another photon.\nThe strange thing is, that we could not find the other photon.\nAt the same time, the long-range action of the other photon reacted with the photon we were observing - it changed from a particle to a wave right under our eyelids.\nTo make an inappropriate analogy: Wave-particle duality is like two blind boxes, inside which could be different or identical things. As long as we open one of them, the thing in the other blind box must invariably become the same as the former.\nThis is the long-range action of quantum physics.\nBut the situation we encountered at that time was more like we only saw one blind box, the other one was gone - the ball inside the blind box we saw suddenly changed into a square right under our eyelids, and without any external force influencing it.\nThat is to say, another observer emerged from the other blind box, and the physics of this world took it as the norm.\nIn its perspective, the thing inside the blind box is a square, so the other blind box - the photon we observed - also became a square.\nThis is no longer just a matter of modern physics being unstable, more importantly, unknown intelligent lives exist on Earth, but we do not know where they are.\n3\n\u0026ldquo;At the time, that project was under my responsibility,\u0026rdquo; Sean said, \u0026ldquo;At the request of the state, I classified this discovery as a top secret. Since then, the state began to devote a lot of manpower and resources to seek the other \u0026lsquo;photon\u0026rsquo;.\u0026rdquo;\n\u0026ldquo;Did you find it?\u0026rdquo;\n\u0026ldquo;No, but we found the direction.\u0026rdquo;\n\u0026ldquo;Where?\u0026rdquo;\n\u0026ldquo;Underground.\u0026rdquo;\n4\nIn 2012, Sean led the research group to find the rough direction of the other photon.\nIt was right underneath the Jinping Underground Laboratory.\nSo a project far larger than the Kola Superdeep Borehole was launched stealthily. They hollowed out the entire mountain above the Jinping Underground Laboratory, leaving only a thin layer of ground. Then, they dismantled the Jinping Underground Laboratory and started digging downward.\nFor each one thousand meters down, they had to expand the passage, build elevators, build buildings laterally, and build new laboratories; after confirming in the lab that the \u0026ldquo;photon\u0026rdquo; was still below, they would continue to dig down. This project was a bottomless pit, constantly guzzling massive amounts of funding.\nBy 2031, that is this year, this inverted triangle building had extended to thirty-five kilometers underground, nearing the bottom of the Earth\u0026rsquo;s crust.\nIt was just when they were about to puncture through the crust and enter the mantle that an accident happened.\n5\n\u0026ldquo;In previous experiments, there was always a strange \u0026lsquo;single photon\u0026rsquo; in an observation group. We may be maintaining a synchronic tacit agreement with another observer,\u0026rdquo; Sean paused and took a deep breath before continuing, \u0026ldquo;This means that, just like us, they have been always observing the photon - while we\u0026rsquo;re looking for them, they are also approaching us.\u0026rdquo;\n\u0026ldquo;Do you mean there are intelligent lifeforms underground?\u0026rdquo; I asked.\n\u0026ldquo;I don\u0026rsquo;t know,\u0026rdquo; Sean shook his head, \u0026ldquo;I\u0026rsquo;m not sure if the word \u0026rsquo;lifeform\u0026rsquo; applies to them - even tardigrades can only tolerate temperatures up to 150 degrees, but where we are, the temperature is as high as 967 degrees Celsius. Just stepping out of this building, we would be instantly roasted into a mummy - I can\u0026rsquo;t imagine what kind of life could survive in such severe conditions.\u0026rdquo;\nSean\u0026rsquo;s words were too far-fetched, which made me start to consider other possibilities: \u0026ldquo;Could there be some special physical phenomena that haven\u0026rsquo;t been discovered yet?\u0026rdquo;\n\u0026ldquo;There could have been, originally,\u0026rdquo; Sean\u0026rsquo;s face gradually distorted, he said with a laugh that was also like crying, \u0026ldquo;But not anymore.\u0026rdquo;\n6\nIn theory, the mantle is solid, but just to be safe, the geologists of the research group were well-prepared.\nThey produced super high-temperature-resistant alloy drill heads, wore protective suits as heavy as spacesuits, and performed drilling in designated uninhabited areas. This was to collect samples to learn about the condition of the mantle.\nAfter drilling two thousand meters deep, the exploration team leader David noticed something odd.\nThe data stopped changing, and the temperature of the drill head no longer rose.\nIn theory, the drill head should\u0026rsquo;ve punctured the lithosphere and entered the mantle, where the temperature would keep rising. Because the mantle is likely a fluid, the drill head being burned was within expectation.\nBut the strange thing was, the drill head was working normally, and the detected temperature remained constant at one thousand degrees Celsius.\nEven though it kept going down, the data didn\u0026rsquo;t change at all.\nDavid suspected the detector was damaged and decided to retrieve the drill head immediately. After an inspection, there was nothing wrong with the data, and the drill head had collected samples of the mantle.\nFluid magma had burned the inner tank of the drill head, so David had no choice but to forcibly dismantle it. They used a cutter to separate the inner tank and the solidified magma, then started to cut the magma.\nDuring this process, the cutter was broken by a hard object.\nA piece of stark white bone was encased in the magma, and it was that which broke the cutter.\n7\n\u0026ldquo;We tried all means but couldn\u0026rsquo;t even separate a single molecule from that bone,\u0026rdquo; said Sean, with trembling hands,\n\u0026ldquo;That thing, merely by existing, has completely overturned the existing biology and physics.\u0026rdquo;\n\u0026ldquo;Just a bone?\u0026rdquo;\n\u0026ldquo;No, more than one. During the subsequent collection process, we gradually completed the skeletal artifact. Then we increased the intensity of mining. You should know that mining at nearly a thousand degrees under the ground is as difficult as establishing a colony on Mars - but we succeeded and officially entered the mantle.\u0026rdquo;\n\u0026ldquo;Then what?\u0026rdquo;\nSean\u0026rsquo;s mood became very low, \u0026ldquo;According to the staff\u0026rsquo;s statements, the reconstructed biological skeleton is inexplicably strange. I saw the pictures, but it\u0026rsquo;s very hard for me to describe what it looks like. It\u0026rsquo;s like… like a monkey with wings… a snake with osteophytes full of spikes… an octopus with three heads… it\u0026rsquo;s simply God\u0026rsquo;s leftover work, the source of all chaos and distortion.\u0026rdquo;\nI thought for a while and asked: \u0026ldquo;Is this the intelligent life we are looking for?\u0026rdquo;\n\u0026ldquo;No, it\u0026rsquo;s not, they are still within the scope of human observation. What we are looking for might be \u0026lsquo;God\u0026rsquo;.\u0026rdquo;\n\u0026ldquo;God?\u0026rdquo;\n\u0026ldquo;After completing the phase three predictions and unmanned construction, we created a \u0026lsquo;Mantle Submarine\u0026rsquo;, named\n\u0026lsquo;Deeper\u0026rsquo;. You can think of it as a manned big drill with its nuclear power. David drove it personally, deep into the mantle. When he came back, he said he saw God.\u0026rdquo;\nI leaned forward: \u0026ldquo;What kind of God?\u0026rdquo;\n\u0026ldquo;The Jade Emperor.\u0026rdquo;\n\u0026ldquo;How is it certain to be it?\u0026rdquo; I asked in confusion, \u0026ldquo;No one has ever seen what a God looks like, how could David be sure that what he saw was the so-called Jade Emperor?\u0026rdquo;\n\u0026ldquo;I don\u0026rsquo;t know. In the subsequent, eight people took turns driving the Deeper into the mantle, each claimed to have seen a deity… there were well-known ones like God, Buddha, Jesus, and Odin, and there were also newly created evil gods like Cthulhu and Azathoth. Three days later, the base at the lowest level lost contact. Severe electromagnetic interference caused all probe machines to malfunction. I was not on the bottom floor at the time, I could only command remotely. But all I got from the radio were spooky and indistinct murmurings, plus sharp and piercing screams.\u0026rdquo; Sean ceased the narration: \u0026ldquo;As you see, we confirmed that there are unknown and incomprehensible things inside the Earth, and then unknown factors caused the destruction of the research base at the lowest level.\u0026rdquo;\n\u0026ldquo;Did they all die?\u0026rdquo;\n\u0026ldquo;I don\u0026rsquo;t know.\u0026rdquo;\n8\nI decided to go to the lowest level to see what exactly happened there.\nSean argued against it. There was a horizontal structure for every thousand meters in this building, and each structure had a person in charge. If he didn\u0026rsquo;t cooperate, no one would have the authority to enter the lowest level. He called for me to isolate the second-to-last level immediately. Anyone who escaped from the bottom level needed to be quarantined.\n\u0026ldquo;You don\u0026rsquo;t know anything yet,\u0026rdquo; Sean said leaning into the one-way glass, his face ferocious, \u0026ldquo;You can escape now. Once you go in, it is an irretrievable abyss. Even to the farthest corner of the earth, they can catch up with you!\u0026rdquo;\nI raised my eyebrows and asked in return: \u0026ldquo;Are you hiding something from me?\u0026rdquo;\n\u0026ldquo;I cannot say! You cannot know! It\u0026rsquo;s a meme contagion, you will be affected by them as soon as you hear or even know them, understand?\u0026rdquo;\nI didn\u0026rsquo;t speak for a while, then I decided: \u0026ldquo;If gods are living in the dark underground, then they are not some beings with supreme power and glory; if they are part of the world\u0026rsquo;s rules, then science will tame them.\u0026rdquo;\nSean fell into silence.\nI reported the situation upwards, the upper management approved my request, revoked Sean\u0026rsquo;s authority, and temporarily granted me a top-level authority ID card.\nA ten-person special squad was temporarily conscripted. They escorted Sean and entered the elevator with me.\nAfter I inserted the ID card and entered the password, a thirty-second countdown started.\nThe elevator has dozens of seats, everyone sat down and buckled their seat belts. After the countdown ended, a strong sense of weightlessness came, making people feel dizzy.\n\u0026ldquo;We are plummeting into hell,\u0026rdquo; Sean said.\n9\nThe person in charge has the right to seal off a certain area in case of emergency, all staff had already signed a confidentiality agreement before they came down, and they would be awarded the medal of heroism posthumously by the State.\nTherefore, if there is some force majeure happening at the bottom level, the stationed personnel there are probably all sacrificed.\nBecause Sean immediately sealed off the bottom level, he didn\u0026rsquo;t even leave time for evacuation. Probably over two hundred people were locked inside, only a handful managed to escape.\nFifteen minutes later, we arrived at the bottom level and changed into protective suits in the isolation room.\nThe big door slowly opened, and the emergency backup light in the corridor was extremely dim.\nThey were almost out of power, and this place would fall into darkness soon.\n\u0026ldquo;Did you shut off the life support system?\u0026rdquo; I asked.\nSean shook his head: \u0026ldquo;No, the first system to fail was the lighting system. All we could see on the monitor was lights going off one by one. In the dark, all communication equipment malfunctioned.\u0026rdquo;\n\u0026ldquo;What about wired telephones, are they also not usable?\u0026rdquo;\n\u0026ldquo;You probably don\u0026rsquo;t quite understand, let me demonstrate.\u0026rdquo;\nSean took a tactical flashlight from a soldier, he walked to a dark corner that the backup light couldn\u0026rsquo;t reach with the flashlight on - it was a triangle corner, Sean leaned against the wall and turned off the flashlight.\nHe was swallowed by darkness.\nWe stood waiting for a few minutes, not seeing Sean take the next step.\nSo I asked with confusion: \u0026ldquo;Sean? Weren\u0026rsquo;t you going to demonstrate?\u0026rdquo;\nSilence.\nNo one answered.\nI turned on my flashlight and shone it towards that corner.\nThere was no one there.\n10\nThe walls are sturdy, made of a special alloy, without any cracks.\nEmergency lighting illuminates both walls, leaving only a dead zone in the middle untouched by the light beam, just big enough for an adult to stand in. As long as you step out from the corner of the room, you will be caught by the emergency light.\nUnder these circumstances, Sean simply vanished.\nFear, like a slippery snake, coils around my heart. I realize that Sean probably lied to me. He must have been one of the observers, present at the time of the incident. He understood the severity of the situation, escaped, and chose to seal this place as a priority.\nTo figure out what was going on, I had two soldiers holding a nylon rope, one of them shut off the flashlight and walked into the dark corner just like Sean.\nThe rope was suspended in mid-air. When we started calling out to the soldiers, there was no response. Another soldier tried to pull him out of the darkness, but even with the help of four or five people, we couldn\u0026rsquo;t pull the rope.\nWe had no other choice but to turn on the flashlight and shine it towards that dark corner.\nOnly to see the other end of the rope embedded in the alloy wall.\nI swallowed a lump in my throat, the absurd scene before me temporarily halted my thought process. The place we were in seemed unreal - a place where all known logic from the earth\u0026rsquo;s surface became void.\nThe next moment, the emergency lighting battery ran out and shut off simultaneously.\nThe flashlight began to malfunction and flickered for a moment.\nDarkness fell.\nAfter the light came back on, our path back had disappeared. All around were strange machinery and equipment, likely inside some laboratory at the bottom level.\nThen, we found that in the short blink of darkness, three veteran special forces soldiers had disappeared.\nQuietly, unexpectedly.\n11\nSoon, I roughly figured out the pattern of \u0026ldquo;human evaporation\u0026rdquo;.\nAs long as you are in the dark, you will be randomly transported to any place untouched by light.\nEver since I entered this place, the flashlight had been flickering unstably, I didn\u0026rsquo;t have a stable light source to ensure I wouldn\u0026rsquo;t be randomly transported. Therefore, I experienced eight rounds of darkness, each time the flashlight came back on, I saw a strange environment, and I was separated from the soldiers.\nDuring this process, I saw half a corpse.\nHalf of it was embedded in the wall, and half was exposed.\nThis proves that the transport does not avoid obstacles, and it\u0026rsquo;s possible that the next time I fall into darkness, I could be transported into a load-bearing pillar.\nI don\u0026rsquo;t understand the principle behind these phenomena, nor do I understand how these bizarre things are possible. It is this unknown that makes me more fearful.\nSean was right. If this situation spreads to the upper buildings, the best action would be to escape as soon as possible.\nHowever, I\u0026rsquo;ve lost my way.\n12\nThe building complex has turned into a giant maze.\nEvery time I was about to find an exit, the darkness would come as expected, taking me to a place even more strange.\nI saw a skeleton tens of meters high, covered with bone spikes, grotesque and terrifying, it\u0026rsquo;s unimaginable how shocking it was when it was alive;\nI saw bodies \u0026ldquo;embedded\u0026rdquo; in the walls, the scariest being a ceiling with dozens of arms sticking out. It was probably a large-scale transport that sent several people into the wall at once;\nI saw security doors twisted out of shape from impact, a hallway filled with dried blood and battle scars… Until the thirty-second move, I came to a familiar place.\nBehind the door, at the glow of the crucifix.\nSingle-sided glass.\nIsolation room.\nThis was the second last floor, my being able to be transported here meant the seal had failed, and that the special situation was spreading upwards.\nAt this moment, Sean\u0026rsquo;s warning echoed in my mind:\n\u0026ldquo;Even to the ends of the earth, they can catch up with you.\u0026rdquo;\nThe light abruptly went out, and endless screams and howls came from all around. My eardrums were about to burst, my thoughts scattered, and my senses of the world became abstract and meshed.\nI frantically scrambled in the dark, slapping the flashlight hard.\nIn the end, I tripped over something, banging my head hard on something solid.\nI lost consciousness.\n13\nIt hurts.\nIt feels as if a steel needle has been jabbed into my head, causing unbearable pain.\nMy face also hurts, a burning kind of pain.\nVaguely, I heard a blurred shout:\n\u0026ldquo;Are you still conscious?\u0026rdquo;\nSomeone was slapping my face hard. My consciousness gradually returned, but my brain was somewhat groggy.\n\u0026ldquo;It hurts…stop hitting…\u0026rdquo; I muttered.\n\u0026ldquo;It works!\u0026rdquo;\nThe person exclaimed delightedly, then continued to slap my face like a storm. I almost passed out from his slaps, so I had to use all my strength to raise my hand and cover my head.\n\u0026ldquo;Hang in there! Don\u0026rsquo;t be fooled by the evil god!\u0026rdquo; the person shouted.\n\u0026ldquo;I\u0026rsquo;m fine! Stop fu*king hitting me!\u0026rdquo;\nI sobered up and opened my eyes. The light around was dim, and a kerosene lamp was placed on the ground. My body armor had been taken off.\nThe man who was beating me was a man dressed like an Arab, wrapped tightly in a white bedsheet.\n\u0026ldquo;What\u0026rsquo;s this?\u0026rdquo; The man held up his middle finger.\n\u0026ldquo;This is an internationally recognized gesture. Stop taking advantage of me, \u0026quot; I sat up, somewhat dazed, \u0026ldquo;Who are you?\nWhere am I?\u0026rdquo;\nThe man lifted the sheet covering his head to reveal a bearded face: \u0026ldquo;It\u0026rsquo;s me, David!\u0026rdquo;\nI recognized him. He was David, the head of the exploration project, a well-known geologist.\nAccording to Sean\u0026rsquo;s statement, I remembered that he was the first one to pilot the submersible into the mantle. I had subconsciously thought he was the first to die, I didn\u0026rsquo;t expect him to still be alive.\nJudging by the furnishings around us, we were in a small storage room. A simple hammock hung on the shelves, and the corner was filled with domestic garbage.\nDavid had been living here for a long time.\n\u0026ldquo;What\u0026rsquo;s going on upstairs?\u0026rdquo; David grasped my collar, \u0026ldquo;Why is the elevator sealed? Last week, I finally managed to enter the elevator, but it wouldn\u0026rsquo;t start after entering the password.\u0026rdquo;\nI was somewhat surprised: \u0026ldquo;Last week? I received the news yesterday and entered this afternoon, it\u0026rsquo;s only been two days… What\u0026rsquo;s this about last week?\u0026rdquo;\nUnder the dim side light, I noticed David\u0026rsquo;s expression was extremely pained.\nHe counter-asked: \u0026ldquo;How many times have you experienced darkness?\u0026rdquo;\n\u0026ldquo;You mean being in a lightless environment? Seems like… thirty-three times.\u0026rdquo;\nDavid exclaimed, \u0026ldquo;You can still be alive, you can still maintain your sanity!\u0026rdquo;\n\u0026ldquo;What do you mean?\u0026rdquo;\n\u0026ldquo;Every time you\u0026rsquo;re in darkness, and if you don\u0026rsquo;t die on the spot or lose your mind, it means there\u0026rsquo;s a \u0026lsquo;positive god\u0026rsquo; protecting you… but this protection is limited, it can only transport you to a safe \u0026rsquo;time-space point\u0026rsquo; in the darkness, letting those lurking \u0026rsquo;evil gods\u0026rsquo; temporarily lose sight of you. But once you\u0026rsquo;re in darkness for too long, you\u0026rsquo;ll be caught by the \u0026rsquo;evil gods.\u0026rsquo;\u0026rdquo;\nI remained silent for a while, then went on to ask, \u0026ldquo;How do you know all this?\u0026rdquo;\nDavid suddenly tore off the cloth hanging on the shelf, revealing a wall full of scratch marks.\nUsing one horizontal and three vertical lines as a unit of measurement, there were over a hundred marks, almost covering the majority of the wall.\n\u0026ldquo;Each scratch represents one day. Measure it by a week,\u0026rdquo; David said morosely, \u0026ldquo;I have been trapped underground for two years. What I know is all the experience other survivors paid with their lives to figure out.\u0026rdquo;\n14\nAccording to David, there might exist a four-dimensional space with energy-momentum inside the mantle… It could also be a five-dimensional or even higher-dimensional space, but with his cognitive ability, he was only able to understand a portion of the fourth dimension through the instruments.\nIn this multi-dimensional space, there is life.\nThey can observe the quantum changes in the micro world, thereby sensing the existence of humans. This is the original reason behind the bizarre photon changes - they are intentionally luring humans down.\n\u0026ldquo;We dug into the mantle and overlapped with the fourth-dimensional space. It\u0026rsquo;s not a stable space, and it will continue to expand, just like the singularity of the universe.\u0026rdquo;\nDavid drew a line on a piece of paper, explaining, \u0026ldquo;We\u0026rsquo;re the three-dimensional beings intruding into the four-dimensional space, like a worm crawling on top of a piece of paper, it won\u0026rsquo;t undergo any changes. But if you draw a line in front of it, it will perceive it as an obstacle - in terms of time and space perception, higher-dimensional beings have an absolute advantage.\u0026rdquo;\nDavid crumpled the paper and handed it to me, \u0026ldquo;In our perception, time is linear. This line represents the journey of a three-dimensional being, on a crumpled plane, the line will distort, overlap, and even merge. I can crumple it randomly, or I can deliberately overlap it, just like drawing a circle for the worm.\u0026rdquo;\n\u0026ldquo;In other words, every time darkness falls, what I face is not only the space changes but also the changes in the timeline?\u0026rdquo; I quickly realized.\n\u0026ldquo;That\u0026rsquo;s right, they manipulate our position in time and space as if drawing a line in front of a worm is effortless.\u0026rdquo;\nI asked again: \u0026ldquo;What about these \u0026rsquo;evil gods\u0026rsquo; and \u0026lsquo;positive gods\u0026rsquo;? What exactly did you see in the mantle - in this fourth-dimensional space?\u0026rdquo;\n\u0026ldquo;Don\u0026rsquo;t ask, the less you know the better,\u0026rdquo; David held up three fingers: \u0026ldquo;There are three things we can never do in here.\u0026rdquo;\n\u0026ldquo;First, never pray to any god.\u0026rdquo;\n\u0026ldquo;Second, never stay in the dark.\u0026rdquo;\n\u0026ldquo;Third, never stare at any living creatures that are out of cognitive range.\u0026rdquo;\n15\nThe most reliable source of light is fire.\n\u0026ldquo;As long as there\u0026rsquo;s sufficient oxygen and fuel, it will keep burning,\u0026rdquo; David handed me a kerosene lamp, \u0026ldquo;For safety reasons, we should each have one.\u0026rdquo;\nThe ID card was still in my hand, even if the underground building was completely closed, we could take the elevator to any floor.\nDavid suggested that I wrap myself in a white bedsheet, saying it was beneficial for concealment. I followed his advice.\nLike the phantoms of ghost stories, we each held a kerosene lamp, groping our way in the dark, narrow corridor.\n\u0026ldquo;They can sense our existence,\u0026rdquo; David said, \u0026ldquo;But because of the light, the evil gods can\u0026rsquo;t see us.\u0026rdquo;\n\u0026ldquo;It sounds safe,\u0026rdquo; I nodded, \u0026ldquo;As long as we maintain this status, we can find the elevator.\u0026rdquo;\n\u0026ldquo;No, this exactly means that the real horror is coming.\u0026rdquo;\n\u0026ldquo;Why?\u0026rdquo;\n\u0026ldquo;If a sugar cube is mixed with grit, how would you get it out?\u0026rdquo; David paused, then continued, \u0026ldquo;Simple, just scatter a bunch of ants.\u0026rdquo;\n\u0026ldquo;Ants?\u0026rdquo;\n\u0026ldquo;Have you seen those bone spurs that were dug out of the mantle?\u0026rdquo;\nRemembering those ghastly skeletons, I nodded.\n\u0026ldquo;They\u0026rsquo;re alive, they\u0026rsquo;re the ants that prey on us - there are many, many such creatures in here.\u0026rdquo;\n16\nDavid spread out a hand-drawn map, detailing every room and every passage in the lowest level, marking dangerous places with a red cross.\nEvery time we passed a corner or bypassed a branch road, David would explain to me in a low voice the reason for doing so.\n\u0026ldquo;Elevators with separate isolation rooms have been completely blocked, so our destination for this trip is the backup elevator, which is still operational.\n\u0026ldquo;There are huge red tumors here, sticking to the ceiling, extending tentacles to prey on all creatures passing under it… This is where Xia Ning died.\n\u0026ldquo;There\u0026rsquo;s a stitched-up creature haunting this place, it sprays a kind of fungus that devours human brains, then attaches human limbs to its body… Old Li, Ah Cheng, and Zhang Mo, three people died here at once.\n\u0026ldquo;There\u0026rsquo;s a human-faced spider on the left turn, its body is like liquid metal, it can stretch and squeeze at will, it almost has no hearing, it preys by spider web… Jennick sacrificed himself here to defend our retreat…\n\u0026ldquo;Wang Zi was alive just last month… You should have seen him, the skinny one who always bragged about his daughter. He swallowed zinc hydride while I was asleep and committed suicide.\u0026rdquo; David\u0026rsquo;s voice choked up a bit.\nI remembered Jennick was his brother.\nWhen disaster struck, the survivors clung together for survival, struggling. Now, only David remained alive. There was no way forward, no way back; no sunlight up above, and it was hard to descend to the underworld.\nWhat a terrible loneliness and desperation.\nJust being alive took a lot of courage and determination.\n17\n\u0026ldquo;I think I hear someone calling my name.\u0026rdquo;\n\u0026ldquo;Is it a hallucination?\u0026rdquo;\nI listen carefully and frown, \u0026ldquo;No, it\u0026rsquo;s real. You didn\u0026rsquo;t hear it? It\u0026rsquo;s Shaun\u0026rsquo;s voice.\u0026rdquo;\n\u0026ldquo;Shaun?\u0026rdquo;\n\u0026ldquo;Yes.\u0026rdquo;\n\u0026ldquo;But hasn\u0026rsquo;t he been dead for a long time?\u0026rdquo; David wondered.\nJust as I was about to ask in detail, I saw David\u0026rsquo;s face suddenly change drastically. He raised his index finger to his mouth, signaling me to be quiet. Then he put his ear against the wall and listened carefully.\nFour or five seconds later.\n\u0026ldquo;Run!!\u0026rdquo;\nDavid suddenly shouted and started running.\nThe next moment, the entire passage began to vibrate, dust fell from the ceiling, and the walls made a sharp metallic sound.\nThe kerosene lamp swung with our movement, its light flickering. \u0026ldquo;What\u0026rsquo;s happening?!\u0026rdquo; I yelled as I ran.\n\u0026ldquo;The \u0026lsquo;flood\u0026rsquo; is coming!\u0026rdquo; David called back, \u0026ldquo;Don\u0026rsquo;t look back no matter what!\u0026rdquo;\nDon\u0026rsquo;t look back?!\nSoon I heard the sound of water coming from behind, like some sticky liquid rushing through the pipes. Amidst numerous noises, I heard many people calling my name from behind. Some of the voices are young, some are old, and all of them are people I know, and even included my long-deceased mother.\n\u0026ldquo;There\u0026rsquo;s an elevator on the left! Hold on, don\u0026rsquo;t look back!\u0026rdquo;\nHigh-intensity running made my chest rise and fall violently. I hadn\u0026rsquo;t experienced a 1500-meter run since college - lack of exercise made my lung capacity struggle to keep up.\nThe gap between David and me widened, and a sense of despair washed over me.\nAfter the left turn, I saw David had run to the elevator door first, pressing the open button anxiously waiting. Since he couldn\u0026rsquo;t turn back, he had to shout at me back: \u0026ldquo;Run! This is the only way!\u0026rdquo;\nOnce I got into the elevator, David closed the metal door. I collapsed to my knees in front of the chair, gasping heavily, feeling as if my heart would jump out of my throat.\nThe sound of the door closing continued, and I couldn\u0026rsquo;t help but turn around.\n- - In that instant, I understood why David warned me not to look back.\nIn the dark corridor, countless black serpents with a single gigantic eye were coiling together, their pupils refracting a crimson light. Just a glance froze me, making it difficult for me to move.\nIt was as if I had eaten a poisonous mushroom and was seeing distorted images.\nNot until the elevator door closed and blocked my view did this strange state end. An intense vertigo made me feel sick, and I was vomiting constantly on the floor.\nBoom-Boom-\nThe elevator door was hit by a group of snakes, and the metal door was distorted.\n\u0026ldquo;This door won\u0026rsquo;t hold!\u0026rdquo; David said urgently. \u0026ldquo;Where\u0026rsquo;s the ID card? Hurry, start the elevator!\u0026rdquo;\nStruggling with vertigo, I reached into my pocket.\nHaving heard Shaun\u0026rsquo;s voice outside the door, I froze: \u0026ldquo;Don\u0026rsquo;t give it to him! He\u0026rsquo;s a \u0026lsquo;believer\u0026rsquo; too, he wants to escape from here!\u0026rdquo;\nDavid yelled angrily: \u0026ldquo;Don\u0026rsquo;t listen to those ghost things! All I do is to save you and myself!\u0026rdquo;\nFrom his gaze, I could feel the resolve and courage, but I became silent.\n\u0026ldquo;What are you hesitating about?!\u0026rdquo; David urged.\nI said, \u0026ldquo;As long as you can answer one question, I\u0026rsquo;ll give you the ID card.\u0026rdquo;\n\u0026ldquo;Ask it quickly!\u0026rdquo;\n\u0026ldquo;Although the design of the underground building was supposed to be a semi-permanent facility, that could last for more than fifty years. But last year we updated the oxygen system, the lowest level hasn\u0026rsquo;t caught up… so the oxygen here can only last a year and a half,\u0026rdquo; I looked at him and said in a low voice, \u0026ldquo;How did you survive for two years.\u0026rdquo;\nDavid was stunned.\nThen, the kerosene lamp in his hand went out without a breeze.\n18\nThe answer is simple, if David had experienced darkness within a year and a half, then he could have been transported to a year earlier - because the space-time here was chaotic, theoretically, he could survive for two years.\nHowever, when the kerosene lamp in his hand extinguished, his body shriveled up, and became skeletal, and his face was frighteningly ferocious.\nDavid has been dead for a long time.\n\u0026ldquo;He\u0026rsquo;s a believer of the Positive God. As long as the kerosene lamp is lit, he can maintain his sanity and physical body,\u0026rdquo; Shaun\u0026rsquo;s voice from outside the door was hoarse, \u0026ldquo;Do you see it now? The Positive God and the Evil God are essentially the same.\u0026rdquo;\nLike lightning piercing through the clouds, Shaun\u0026rsquo;s words made those minor details line up. I glimpsed part of the truth.\n- - The high-dimensional intelligent entity broadens its dimension through observing and using light.\nAssuming there are two kinds of intelligent entities in this dimension, the Positive God and the Evil God. The former can control the \u0026ldquo;three-dimensional space of the lighted area\u0026rdquo;, and the latter can \u0026ldquo;do whatever they want in the dark\u0026rdquo;.\nThe Earth was originally a place where day and night alternated, and the powers of the two should be balanced. But this place is underground, a place where the sun can\u0026rsquo;t reach. Therefore, the power of the Evil God expanded infinitely, overpowering the Positive God.\nThey both have an urgent common goal, which is to reach the surface.\nTo do this, they are willing to cooperate: The Positive God uses its ability to control light to maintain observation of photons, which makes the scientists in the Jinping Underground Laboratory discover anomalies and attract humans to explore.\nThen the Evil God broadens the dimension, turns the bottom layer into a place without light, and starts to slaughter and contaminate humans. Just like the fungus that controls ants, it often controls the ant body to return to the ant nest, and then slowly breeds in the entire ant nest.\nShaun is an ant controlled by the Evil God, carrying some kind of \u0026ldquo;pathogen\u0026rdquo; that I can\u0026rsquo;t understand, and the second-to-last layer collapsed because of it.\nAs long as humans pray, they can take them as believers. Becoming a believer will inevitably contaminate the spirit - this is also the reason why David warned me not to pray to the gods in his sane state.\nThey maintain a competitive relationship in their cooperation, and obviously, neither of them has made it out so far. Both the Positive God and the Evil God wanted to be the first to reach the surface, for which they were willing to trip each other up.\nOnce the kerosene lamp in David\u0026rsquo;s hand went out, his body began to shrink, becoming skeletal and distorted, just like a monster.\nAt this moment, David howled and rushed at me, but I kicked him away.\nI stepped up to the elevator control panel and pressed the emergency stop button, and the elevator door slowly closed.\nI took the kerosene lamp and went to the top of the elevator, opened the maintenance hole above.\nDavid tried to climb up, but in the next second, the metal door was knocked open, and countless crazed black snakes flooded into the elevator. I closed the maintenance hole and locked it from the outside.\nI climbed out of the elevator shaft and arrived at the second-to-last floor, shaking off those monsters.\nThe kerosene lamp fuel was limited, I had three hours of safety period left. The time was not enough for me to climb up along the elevator shaft - just the one-kilometer distance between the bottom layer and the second-to-last layer almost exhausted me.\nFinding some supplies and waiting for rescue was the safest option. But after what happened to David, I changed my mind.\nI decided to take a risk.\n19\nTo facilitate the transportation of heavy objects like \u0026ldquo;Deep Diver\u0026rdquo;, a universal track has been set up in the spare elevator. Fortunately, the main maintenance is done on the second-to-last floor, allowing me to implement my plan.\nI operate the control panel, change the slide track for the Deep Diver, and install it in the elevator shaft.\nAfter preparation, I put on the protective suit and continued to climb up along the elevator shaft, ready to enter the Deep Diver.\nSuddenly, the sound of Sean echoes in the hollow elevator shaft.\n\u0026ldquo;I don\u0026rsquo;t think the Deep Diver can break through the 33-story alloy blockade,\u0026rdquo; he stands in the emergency passage of the elevator shaft, his body is immersed in darkness, and I can only vaguely see a humanoid outline, \u0026ldquo;Relax, I also wish you can escape - I said this before you came down.\u0026rdquo;\nI remained silent for a while and replied, \u0026ldquo;Is it because I have also been mentally contaminated?\u0026rdquo;\n\u0026ldquo;…… Yes.\u0026rdquo;\n\u0026ldquo;From the moment I saw that cross made of light, right?\u0026rdquo; I hesitated, sitting on the edge of the Deep Diver cabin, \u0026ldquo;The moment you escaped, they radiated their power to the second to last floor.\u0026rdquo;\n\u0026ldquo;Right, you were supposed to return to the surface with the favor of the true God. But you did not report back, instead, you came down to investigate, disrupting our plans.\u0026rdquo;\n\u0026ldquo;You\u0026rsquo;re a believer in the True God too?\u0026rdquo;\n\u0026ldquo;No, I am in darkness, a follower of the Evil God.\u0026rdquo;\nSean walked into where the kerosene lamp could shine, and leisurely said, \u0026ldquo;The explosives originally used to blast open the rock formations and the nuclear batteries in the experimental stage have all been concentrated here by you. You simply want to gamble a little bit. The great kinetic energy and the narrow pipe effect will drive the Deep Diver to move at high speed upward and break through the blockade forcibly, just like a bullet being shot out of the gun barrel, and you can escape from the underground through this.\u0026rdquo;\nI neither agreed nor disagreed.\n\u0026ldquo;There\u0026rsquo;s no need to take risks, join us. Look at me now. I\u0026rsquo;m healthy. I have powers that I couldn\u0026rsquo;t even imagine in the past, and I can even live forever - \u0026quot;\n\u0026ldquo;What\u0026rsquo;s the cost?\u0026rdquo; I interrupted.\n\u0026ldquo;There is no cost.\u0026rdquo;\n\u0026ldquo;No, there must be one. You\u0026rsquo;ve given up the dignity of being a human being, a group of humans, you\u0026rsquo;ve betrayed your country and your faith. We\u0026rsquo;ve spent thousands of years getting rid of feudalism and ignorance, and through the efforts of countless generations, we\u0026rsquo;ve built a beautiful country - I won\u0026rsquo;t allow anything to destroy it, even if it\u0026rsquo;s a deity, it has to submit to the glory of science and reason.\u0026rdquo;\n\u0026ldquo;What\u0026rsquo;s the use of saying all this?\u0026rdquo; Sean said mockingly, \u0026ldquo;You\u0026rsquo;re just a man afraid of death, as long as you escape, they\u0026rsquo;ll come to the surface, I don\u0026rsquo;t even need to stop you.\u0026rdquo;\nI smiled, picked up the kerosene lamp, and sat in the Deep Diver cabin.\nThe AI started a countdown:\n\u0026ldquo;Detonation countdown has begun: 10, 9, 8, 7……\u0026rdquo;\n\u0026quot; Wish me luck.\u0026rdquo; I fastened myself with the seat belt.\nThrough the porthole, I gave Sean the thumbs up. His face suddenly turned very bad, as if he realized what I was about to do. He started to scream.\nBlack snakes like a flood surged into the elevator and smacked at the Deep Diver, but it was already too late.\n\u0026ldquo;……2, 1, 0……Detonation.\u0026rdquo;\nThe countdown had ended.\nThe fission of atoms unleashed terrifying light and heat that illuminated several underground buildings. The radiation and energy destroyed countless creatures hidden in the dark. The black snakes were burned to white bones. The Deep Diver did not shoot upwards, instead like a bullet, it drilled into the mantle.\nYes, this is my plan.\nI want to go down to see the real faces of these \u0026ldquo;Gods\u0026rdquo;, and then invite them to eat a nuclear bomb.\n20\nAfter a second nuclear explosion in the mantle layer, the Deep Diver was also near its limit.\nThe nearly 10G acceleration caused me unbearable pain. The enormous potential energy pressed me hard against the backrest, I couldn\u0026rsquo;t even breathe, it felt like my body was about to be torn apart.\nMy eyes began to fill with blood and the world turned red.\nI don\u0026rsquo;t know how long it took, but the Deep Diver\u0026rsquo;s speed slowed down to a level that I could bear. During this process, I didn\u0026rsquo;t see any so-called gods, nor did I see any demons or evil spirits.\nOutside the porthole, the red magma gradually turned into a hard rock formation. The Deep Diver automatically activated built-in kinetic energy and drilled straight ahead.\nThe instrument showed that the external temperature was decreasing, and I had a hunch in my heart.\nIf the area beneath the mantle layer is a spherical high-dimensional space, according to relativity, it should not be a conventional sphere or singularity - which means that the interior of the high-dimensional space might be hollow, like the sandwich layer between two universes.\nWe have thought that the universe is vast and infinite, constantly expanding outward. But actually, we might be inside the universe, and beneath the Earth is the outside of the universe.\nHigh-dimensional space is the \u0026ldquo;connecting point\u0026rdquo; that makes \u0026ldquo;two\u0026rdquo; universes curved.\nCrossing through high-dimensional space, you can reach another planet similar to Earth, another crust layer, which can be verified from David\u0026rsquo;s drilling anomaly, he found that the heating no longer increased if you drill down, which indicates that it might be another crust rather than the highly heated core below the mantle.\nWhat awaits me could be another parallel world or an unheard extraterrestrial civilization.\nThe Deep Diver, having withstood two nuclear explosions and conducted nearly 20 kilometers of drilling, ended its magnificent and tough life the moment it drilled out of the ground.\nThe kerosene lamp had long gone out, I left the cabin of the Deep Diver, but it was pitch black all around.\nSince I didn\u0026rsquo;t end up drilling into the Earth\u0026rsquo;s core and being burned to ashes due to high temperatures, that proves that my guess is not wrong. What awaits me now is the unknown. This is a new world that humans know nothing about.\nThe first light of dawn pierced the darkness. I stood on the wreckage of the machinery in my protective suit, gazing into the distance.\nThe night breeze was blowing.\n- I saw stars, the ocean, and a cross reaching heaven and earth.\n","date":"2024-03-05T17:04:16+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*uaf7Mg2UclegdKD44FInNw.jpeg","permalink":"http://localhost:1313/p/beyond-earths-core/","title":"Beyond Earth’s core"},{"content":"Scientists would never imagine being drowned in the ocean of knowledge.\nThe \u0026lsquo;Deity\u0026rsquo; suddenly appears, happily answering every question posed by mankind.\nUntil the last question humans posed.\nThey asked the \u0026lsquo;Deity\u0026rsquo;, \u0026ldquo;How can we become like you?\u0026rdquo;\n1\n\u0026ldquo;Teacher!\u0026rdquo;\nIn the quiet exam room, I suddenly raised my hand to call the invigilator.\n\u0026ldquo;What\u0026rsquo;s wrong? Is there a problem with the question?\u0026rdquo; The invigilator came to my side after hearing my request.\n\u0026ldquo;There\u0026rsquo;s an answer sheet in my drawer.\u0026rdquo; I looked at her with the sincerest expression I could manage, a mix of obedience and grievance in my eyes.\n\u0026ldquo;This…\u0026rdquo; The invigilator, seemingly encountering such a situation for the first time, looked urgently at the other invigilator.\nQuickly, I became the focal point of the examination hall.\nTo prevent disturbing the other students, an invigilator took me out of the examination hall.\n\u0026ldquo;Is this answer sheet yours?\u0026rdquo;\n\u0026ldquo;It isn\u0026rsquo;t mine. It inexplicably appeared in my drawer.\u0026rdquo;\n\u0026ldquo;If the thing is not yours, how did it end up in your drawer? Didn\u0026rsquo;t we say before the exam to check the drawers?\u0026rdquo;\n\u0026ldquo;I checked it! This thing just appeared out of thin air. If it was mine, why would I raise my hand and let you guys know?\u0026rdquo;\nThe invigilator was at a loss for words for a moment.\nAt that moment, the head of the invigilation team passed by and saw me talking to the invigilator outside the examination hall, so he came over and asked, \u0026lsquo;What\u0026rsquo;s wrong? Is there anything this candidate needs?\u0026rsquo;\n\u0026lsquo;Team Lead, you came at the right time. This student said he found an answer sheet in his drawer.\u0026rsquo; The invigilator handed the answer sheet to the team lead.\nThe leader frowned, took a careful look at the answer, and his frown deepened, even becoming a bit flustered.\n\u0026ldquo;Where did you get this?\u0026rdquo; The leader asked me severely, pointing at the answer sheet.\nSeeing him so furious, I couldn\u0026rsquo;t indulge him and stood upright, righteously denying, \u0026lsquo;It\u0026rsquo;s not mine, it appeared out of nowhere, if you don\u0026rsquo;t believe it, you can check the surveillance.\u0026rsquo;\n\u0026lsquo;Check it! We must check!\u0026rsquo;\nThe invigilator and I were frightened by the leader\u0026rsquo;s voice, which echoed throughout the entire teaching building.\nThe invigilator quickly pulled the group leader aside.\nEven though they did their best to keep their voices down, I could still hear them.\n\u0026ldquo;Team Lead, isn\u0026rsquo;t this going too far?\u0026rdquo;\n\u0026ldquo;Going too far? Take a close look at this answer sheet. This is the correct answer to the exam!\u0026rdquo;\n\u0026lsquo;Can\u0026rsquo;t be? Is this considered a leak of the exam?\u0026rsquo;\n\u0026lsquo;I\u0026rsquo;m telling you, we have to take this matter seriously. Today is the last day of the college entrance examination, we can\u0026rsquo;t allow any mishap. If we don\u0026rsquo;t handle it well, we won\u0026rsquo;t be able to do this job anymore.\u0026rsquo;\nThen the two brought me to the surveillance room.\nAfter reviewing the surveillance footage over and over again, the two finally believed my words. The answer did indeed appear in my drawer out of nowhere.\n\u0026lsquo;Team Lead, what should we do now?\u0026rsquo;\n\u0026lsquo;What should we do? I\u0026rsquo;ve been invigilating for over 20 years and I\u0026rsquo;ve never encountered such a situation.\u0026rsquo;\n\u0026lsquo;Should we… call the police?\u0026rsquo;\n\u0026lsquo;Call the police? Are you crazy?\u0026rsquo; The leader glared at the invigilator and then told me, \u0026lsquo;You go back to the exam first.\u0026rsquo;\nI gave the leader a blank look, he wasted my time, what else could I accomplish if I went back?\nBut I didn\u0026rsquo;t want to cause more trouble, so I followed the invigilator back to the exam room.\nI had just sat down and was about to pick up my pen to write, and I noticed a piece of white paper poking out of my drawer. I pulled it out and it\u0026rsquo;s another answer sheet.\nI raised my hand again. The invigilator, who probably guessed what had happened, hurried over. Seeing another answer sheet appearing in my drawer, he almost fell over.\nHe looked at me, his eyes full of the expression \u0026lsquo;How come there\u0026rsquo;s another one?\u0026rsquo;.\nI shook my head, indicating that I knew nothing.\nThe invigilator crumpled up the answer sheet and gestured for me to continue the exam.\nI nodded, about to continue writing, but once again I saw a paper filled with answers in my drawer.\n…\nAs the bell rang, the broadcast announced that candidates should put down their pens, and no new answer sheets appeared in my drawer.\nIn total, the invigilator and I ended up retrieving over twenty answer sheets from my drawer.\nThe invigilator quickly organized the other candidates to leave the examination room, leaving only me.\nA short while later, the group leader of the invigilation team arrived. He saw the exam room covered in paper and understood what had happened without needing any explanation.\nWith no other choice, he reported to the higher-ups.\nAfter the team leader repeatedly explained and swore he hadn\u0026rsquo;t gone insane, the superiors were finally willing to deploy a team to the examination hall.\nLater, I and the invigilator tirelessly explained what had happened to these people.\nThey kept a skeptical attitude and thought it was just a case of exam leakage even when they held the correct answers to the exam in their hands. But, for the part where we said the answers appeared out of thin air, they thought we were insane.\n\u0026lsquo;Check the surveillance!\u0026rsquo; The team leader once again used his hysterical outburst to subdue everyone.\nIndeed, after watching the surveillance, everyone\u0026rsquo;s brows furrowed even more deeply.\n\u0026lsquo;I suppose this is considered a supernatural phenomenon.\u0026rsquo; An older professor within the group with more authority said, \u0026lsquo;I\u0026rsquo;ve lived so long, and this is the first time I\u0026rsquo;ve seen a supernatural event with my own eyes.\u0026rsquo;\n\u0026lsquo;Should we try and make the answer appear in the drawer again?\u0026rsquo;\n\u0026lsquo;We can try.\u0026rsquo;\nSo, the group followed the professor back to the exam room and he sat at my exam desk under everyone\u0026rsquo;s watchful eyes. But after waiting for over ten minutes, the drawer remained empty.\n\u0026lsquo;Could I try?\u0026rsquo; I said weakly amongst the crowd.\nThe professor nodded and gave his seat up to me.\nBut the drawer was still empty.\n\u0026ldquo;Perhaps it only works during a test,\u0026rdquo; I guessed. \u0026ldquo;Could a teacher give me a test paper? A simulation paper will do.\u0026rdquo; Another invigilator ran back to his office and randomly picked a simulation paper, then returned and put it on my desk. \u0026lsquo;Let\u0026rsquo;s complete the process and treat it like a formal examination. Everyone else should go to the surveillance room and watch.\u0026rsquo; The professor called everyone besides the invigilator out of the exam room.\nNow, only the invigilator and I remained in the exam room.\n\u0026lsquo;Cough cough… now I will read the exam rules…\u0026rsquo; The invigilator began the simulation examination like a formal test.\nI also got into condition, carefully looking at the questions on the test and trying my best to ignore whether there were answers in the drawer.\nI just finished the first question when the door to the exam room was pushed open, and the professor quickly entered. Seeing his anxious state, I quickly checked the drawer.\nSure enough, there was a paper filled with answers in my drawer.\nThe professor held the paper in his hands like a treasure and then compared it with my test paper.\n\u0026lsquo;Absolutely correct.\u0026rsquo; The professor\u0026rsquo;s voice shook a little in excitement. For a moment, I was afraid he would faint from the excitement.\nFollowing that, the school was entirely locked down and publicly announced as being for renovation planning.\nMore and more distinguished individuals like the professor came to the school, a few of whom I even saw on television, famous scientists included.\nAfter several comparative experiments over a few days, scientists eventually summed up the phenomena of the appearing answers.\nI must be the examinee.\nDuring the exam, there must be, and no more than, three invigilators present.\nThe exam paper must list the questions in a specific format, and each question must have a score with a total not exceeding 150 points.\nThe exam process must follow the standard procedure of the college entrance examination.\nAfter the exam, the answers will no longer appear.\nHaving ascertained the pattern and conditions under which the answers appeared, the scientists began to let their imaginations run wild. And I began to ponder with the papers in my hand.\n\u0026ldquo;Please elaborate on the formation process of the universe. (10 points)\u0026rdquo;\n\u0026ldquo;Please list 10 planets with alien civilizations that are closest to the Earth. (1 point each, total 10 points)\u0026rdquo;\n\u0026ldquo;Please elaborate on the evolution process of humans and your predictions for human development in the future. (10 points)\u0026rdquo;\n\u0026ldquo;……\u0026rdquo;\nSeeing these questions, I even doubted if the answers would appear in my drawer.\nIn reality, after waiting for about ten or so minutes, my drawer began to overflow like a breached dam, spewing out countless sheets of paper filled with words.\nThe invigilators and I quickly started collecting them, we collected as if we were gathering water, stacking each completed pile to the side.\nThis process continued for more than twenty minutes.\nWhen we finally placed the last stack of answers down, both the invigilators and I were exhausted, lying among the piles of paper.\n\u0026ldquo;The exam…..the exam is over, please…..please stop answering the questions.\u0026rdquo; The invigilator, breathless, stated. I truly admire his professionalism.\nSubsequently, the scientists, as if they had found a treasure, rushed in, carefully picking up the piles of paper from the floor as if they were cradling a baby.\nI didn\u0026rsquo;t care; I just hoped that after all this, I would have a chance to retake the test. After all, with my strength of being in the top ten of the school, I didn\u0026rsquo;t need those answers.\nAfter the scientists had their fill, the only ones left in the exam hall were the invigilator and I.\n\u0026ldquo;Teacher, aren\u0026rsquo;t you curious how these papers came to be?\u0026rdquo;\n\u0026ldquo;If the smartest of us don\u0026rsquo;t want to know, why would I be interested? All I know is that after all this, we small figures will have a chance to stand out.\u0026rdquo;\nAfter a moment of silence, I said, \u0026ldquo;Teacher, I want to know who sent these papers.\u0026rdquo;\n\u0026ldquo;Alright, since no one is around to check on us, tell me what you want to ask, and I\u0026rsquo;ll help you set the questions.\u0026rdquo;\nWith that, I followed the invigilator to the office, where we sat by a computer and started creating a test.\n\u0026ldquo;We\u0026rsquo;ll use the template for a language arts paper.\u0026rdquo; I said, \u0026ldquo;For the question…let\u0026rsquo;s write it this way: \u0026lsquo;Please write a composition introducing yourself, there is no word limit, but no poems are allowed.\u0026rsquo;\u0026rdquo;\n\u0026ldquo;Just like that?\u0026rdquo;\n\u0026ldquo;Just like that.\u0026rdquo;\n\u0026ldquo;Alright.\u0026rdquo;\nReturning to the exam hall, the invigilator read the exam rules aloud, a recitation he had done dozens of times today and would likely never forget in the future.\n\u0026ldquo;The exam begins.\u0026rdquo;\nAs soon as the invigilator declared the start of the exam, I began eagerly waiting for the answer in my drawer.\nNot long after, a piece of paper appeared in my drawer. Unlike the previous answers which were all printed, this one had been written by hand, each character beautifully penned within its square.\nWith excitement, I took it out, and the invigilator also came to me excitedly, our shared enthusiasm wasn\u0026rsquo;t less than what the scientists had felt just moments ago.\nClearing my throat, I began to read the text on the paper aloud:\n\u0026ldquo;I don\u0026rsquo;t have a name or a physical form as you humans understand it, I can be self-contained or superimposed, I won\u0026rsquo;t die though I\u0026rsquo;m not technically living. I believe you have a term that describes me perfectly, and that is - teacher. From here on, to facilitate your understanding, I will introduce myself and my purpose based on your human cognition. I was born before the formation of the universe, wandering in all its corners, using my unlimited time to question my existence. Finally, during my wanderings, I discovered something interesting, that is - life. There is countless life in outer space as you humans fantasize, and they all take different forms. After I discovered life, I shifted from aimless wandering to curious observation. During my unlimited time, I even felt lonely for the first time due to a specific event, specifically, the demise of life. Every life that sprung forth on every planet will eventually succumb to death, some because of war, some because of disaster, and some because of diseases… This kind of end is disappointing. I knew that in this finite universe, life would expire at a specific moment, I kept wondering why life would die, until one day, I finally understood. Life cannot forsake the desire for knowledge since its birth. Facing curiosity at birth, life will strive to pursue, only knowledge is the key to continuing life\u0026rsquo;s development, but without someone to guide, life will inevitably hit a dead end within its limited span. Therefore, I decided to satisfy life\u0026rsquo;s curiosity unconditionally, using my unlimited time and knowledge to fulfill all of life\u0026rsquo;s developmental needs. In your words, I want to do all this as simply as breathing, although I don\u0026rsquo;t need to breathe. This desk\u0026rsquo;s drawer is your communication channel with me, I will answer everything you want to know. You only need to do one thing, let life continue, without the shackles of knowledge, your only purpose for existence is to live, while my purpose for existence is to allow you to live. As for you, child, you are the intermediary between humans and me. I have found an intermediary in every group of life forms. The selection criteria are not difficult, you only need to report to your counterparts that there is an answer in their drawer, that is all. Yet even so, only a small percentage of life forms can do this, but I don\u0026rsquo;t blame you, after all, the desire for personal gain will also cease to exist in due course during the process of knowledge exploration.\u0026rdquo;\n\u0026ldquo;It sounds like a god.\u0026rdquo; The invigilator shrugged.\n\u0026ldquo;According to what\u0026rsquo;s written here, the purpose of our future existence is to live?\u0026rdquo;\n\u0026ldquo;Pretty much, the rest of them are that, while you kind of mixed in with being the human class president.\n\u0026ldquo;Will those scientists have as many questions as it says in the answer here?\u0026rdquo;\nThe invigilator looked out the window, seeing those scientists still laughing and crying madly for those stacks of answers.\n\u0026ldquo;Yes, once the world has the answers, more questions will emerge.\u0026rdquo;\n\u0026ldquo;Do I need to show this \u0026lsquo;Self Introduction\u0026rsquo; essay to the scientists?\u0026rdquo;\n\u0026ldquo;Go ahead, they will like it and will be even crazier.\u0026rdquo;\n2\nThe arrival of the \u0026ldquo;Teacher\u0026rdquo; transformed humans from a proud ant in the universe to a humble student among countless civilizations in the universe.\nAs the invigilator had said, scientists received all the answers they could ever want, but these answers themselves only served as the genesis of the next question.\nIt\u0026rsquo;s like knowing that 1+1=2, we then start to wonder why 1+1 can only be 2, or why 1 needs to be added to 1.\nKnowledge is endless. We once thought that seeking the answer to a question required countless day and night efforts, and now it merely takes one exam and one examiner.\nThat desk spews out papers filled with answers almost every day, and I take exams almost every day or rather, I help our human \u0026ldquo;Teacher\u0026rdquo; disseminate knowledge.\nDespite seeing myself working on this task for the rest of my life, the only things I need to do are to sit at my seat, collect and tidy up the answers, and then pass them to the scientists outside.\nEven though I act as an essential \u0026ldquo;intermediary\u0026rdquo; between human civilization and the \u0026ldquo;Teacher\u0026rdquo;, answering all requests, my work is relatively monotonous except for occasional excitement due to heavyweight issues resulting in a room full of papers.\nThe only consolation is that I can feel the leap forward that humans have taken based on the \u0026ldquo;Teacher\u0026rsquo;s\u0026rdquo; answers, the strong sense of societal need makes me kind of proud.\nHowever, compared to this minor pride, I yearned more for freedom- the scientists\u0026rsquo; obsession left me little to no chance to leave the exam hall.\nEventually, as an \u0026ldquo;intermediary\u0026rdquo;, after bargaining with the scientists and the person in charge, I was granted a leave of four days every month.\nIt might sound like not much, but it\u0026rsquo;s like working six days and getting one day off, so I divided these four days evenly over the four weeks of every month.\nAs the first-weekend leave was approaching, I was notably excited, and the pace at which I was collecting the answers from my desk\u0026rsquo;s drawer also increased significantly.\nThe scientists also understood that I was taking a day off tomorrow, hence they seemed a bit blue which led to an increase in the number of questions by several times.\n\u0026ldquo;If they could swim in the sea of knowledge someday, they might not even want to wear swimming trunks.\u0026rdquo;\nThinking this, I finally made it to my first day off.\nStepping outside of the exam hall, I took a look back at the school that had been commandeered.\nAll buildings had been renovated, and the most conspicuous was a huge golden sign standing at the highest point, reading \u0026ldquo;The Examination of Human Civilization\u0026rdquo;.\nAt first glance, it seemed like humans had made a golden placard for themselves, still flaunting their once pride and self-esteem.\nAlthough human knowledge had grown by leaps and bounds, there was still a diversity of aesthetics. I never dared to look at that golden sign for the second time.\nFinally, I returned to the bustling city, where everything seemed to be the same as the day I went for the college entrance examination - there were still four-wheeled vehicles on the road, and people with two legs on the sidewalks.\nI got home to find that my parents had prepared dinner in advance knowing that I was going to take a vacation. They might have spent a long time accepting and understanding my job as a \u0026ldquo;middleman\u0026rdquo;. However, all they needed to know was that I was far better than other youngsters on earth.\nOf course, not only my parents knew about my vacation. When the news spread, relatives and neighbors flocked to my house, with those bringing gifts, those trying to curry favor, and those looking for help.\nMy parents blocked wave after wave of people for me, but they never seemed to be bothered. Instead, they looked happier with every passing moment because my situation was something to be proud of.\nI had thought it would be an easy day, but the scientists of the examination hall beckoned me back before I could finish my mother\u0026rsquo;s handmade steak.\nCompared to their re-emerging new problem, my steak desire seemed somewhat overwhelmed. They were so impassioned that they couldn\u0026rsquo;t wait for a second longer. All they wanted was for me to return to the examination hall and continue my \u0026ldquo;middleman\u0026rdquo; duties immediately.\nI was somewhat helpless and wanted to share something with my parents, but seeing their expectant faces made me hold back.\n……\nTomorrow is the second vacation of this month. I\u0026rsquo;m prepared to be \u0026ldquo;bombarded\u0026rdquo; continuously by the scientists.\nSure enough, the scientists smiled as they placed a whole stack of test papers in front of me. I nodded and smiled as I accepted their quest for knowledge.\nAt that moment, I even wondered if the \u0026rsquo;teacher\u0026rsquo; would ever feel as outwardly cordial but inwardly upset as I did. Until the scientists left, I noticed, that this so-called \u0026lsquo;scientist\u0026rsquo; was just a robot.\nThis made me curious about the outside world.\nOn the day of my second vacation, I left the examination hall and noticed out of the corner of my eye that the panel that originally read \u0026ldquo;Examination of Human Civilization\u0026rdquo; was no longer a golden plaque but a holographic projection changing color.\nThe vehicles on the street no longer sped along the road on four wheels but hovered above the road, flashing neon. The pedestrians were all wearing matching light-colored clothes, and unlike the fast-paced life I saw them live last week, they all seemed to be enjoying themselves now.\nLabor was replaced by intelligence, and the acquisition, processing, and distribution of resources were fully automated. Work became a thing of the past. With all the obstacles to survival removed, all that was left was to enjoy. Endless knowledge-seeking led to a technological breakthrough last week.\nPopulation, disease, environment, and so on, these problems were all solved in an instant of technological explosion. This is the power of knowledge. Under the guidance of the \u0026rsquo;teacher\u0026rsquo;s\u0026rsquo; answers, some fallacies have now become truths, and some past truths are now regarded as jokes.\nWhen I got home, I saw my parents lying in bed with virtual reality devices on their heads, and a robot beside them was cooking celery stir-fried beef for me.\nI don\u0026rsquo;t know what my parents are seeing in the virtual device, but given how things are going now, even the outrageous scenarios in virtual reality might be realized in real life.\nEating the robot-made celery stir-fried beef, I felt that the supremely fresh celery and tender and juicy beef were not as good as my father\u0026rsquo;s half-cooked celery and slightly burnt beef.\nThe vacation hadn\u0026rsquo;t ended yet, and I had already returned to the examination hall.\nLooking at the un-clean blackboards in the examination hall, the wallpaper that was about to fall off the wall, smelling the musty smell coming from the desks and chairs, I only then realized that the world outside of the examination hall seemed to be devoid of any smell, which made me feel like there wasn\u0026rsquo;t any air outside, like I hadn\u0026rsquo;t been breathing, like I hadn\u0026rsquo;t been alive.\n……\nIt was the third day of vacation this month.\nOn the day before the vacation, the scientists did not give me a lot of test papers as usual, even a lot less than before.\nI didn\u0026rsquo;t wonder why. I just placed the answers according to the routine.\nWhen I finished, the scientists walked into the examination hall. This time they didn\u0026rsquo;t embrace a pile of answers like mad as they did before. Instead, they took me out of the examination hall.\nIt wasn\u0026rsquo;t until we arrived at a huge open space aboard a strangely shaped spaceship that I noticed that a crowd had gathered near the open space, cheering excitedly.\nI didn\u0026rsquo;t know what people were celebrating, nor did I know why the surrounding scientists were constantly adjusting their bow ties, even my long-neglected hair was combed by someone.\n\u0026ldquo;We seem to be meeting someone,\u0026rdquo; I thought to myself.\nSure enough, a few minutes later, ten aircraft appeared overhead, and as the crowd got even more rapturous, the scientists also stood up straight.\nWhen the ten aircraft landed, slowly the cabin doors began to open, and a long ramp extended from the bottom of the doors down to the ground.\nThere at the cabin doors of the ships, countless creatures of different shapes and forms were seen coming down from above.\nTen ships, ten types of creatures, or more accurately, they should be called - aliens.\nI finally understood why today was such a grand occasion. This was the first time in human history face-to-face with alien races. These ten alien races were all the ten planets in the original question \u0026ldquo;Please list 10 planets with alien civilizations that are closest to Earth.\u0026rdquo;\nSeeing aliens for the first time made me a little nervous, but when I put on the simultaneous translation earphones, I found that these aliens were not much different from us, just a bit strange-looking.\nThrough conversation, all the scientists who visited Earth this time were scientists and \u0026ldquo;middlemen\u0026rdquo; from their respective alien races, and they had come all this way to discuss cooperation with us.\nIncluding human scientists, the alien scientists all agree that the knowledge of a single civilization is too unilateral.\nIf the ten alien races plus humans, a total of eleven races, eleven \u0026ldquo;middlemen\u0026rdquo;, will have eleven communication channels with the \u0026ldquo;teacher\u0026rdquo; and eleven completely different perspectives of knowledge seeking.\nPerhaps a new, all-inclusive, new cosmic civilization will be born.\nCo-operation went smoothly, but it was more of a coincidence between cross-territorial races than negotiation.\nDuring the meeting, we eleven \u0026ldquo;middlemen\u0026rdquo; also had a simple exchange.\nFrom the mouths of the alien \u0026ldquo;middlemen,\u0026rdquo; I learned about their experience of becoming a \u0026ldquo;middleman\u0026rdquo; and how they asked questions to the \u0026ldquo;teacher.\u0026rdquo;\nAlthough the \u0026ldquo;middlemen\u0026rdquo; come from different planets and have different lives, in our conversation we occasionally miss our race\u0026rsquo;s dues past - perhaps this is a resonance of being a \u0026ldquo;middleman.\u0026rdquo;\nIn our \u0026ldquo;middleman\u0026rdquo; point of view, the \u0026ldquo;teacher\u0026rdquo; has brought us endless knowledge, but also deprived us of the process of exploring knowledge. The desire for knowledge cannot be changed, because it is instinct, but the path to knowledge is optional. Maybe to look at the scenery along the way to civilization before hitting a dead end of development, might be more meaningful than just surviving smoothly.\nOf course, this is all just our \u0026ldquo;middlemen\u0026rsquo;s\u0026rdquo; own ideas. Compared to the weight of an entire civilization, our ideas seem frivolous and wishful thinking, after all in reality, who will have a bag that forever produces gold coins and not use it?\nThis meeting with the aliens was nearing its end, and one of the human scientists suddenly posed a question - the issue of freedom of the \u0026ldquo;middlemen.\u0026rdquo;\nWhen the words were spoken, I couldn\u0026rsquo;t help but sigh, our people are indeed more humane.\n\u0026ldquo;The existence of the \u0026rsquo;teacher\u0026rsquo; has brought about unprecedented knowledge freedom for each civilization. Each individual of these civilizations is enjoying this freedom, except for the \u0026lsquo;middlemen\u0026rsquo;,\u0026rdquo; said the human scientist to everyone. \u0026ldquo;It is great to trade one person\u0026rsquo;s freedom for the freedom of an entire civilization, but it is also brutal. Can we, with all our unlimited knowledge, let the \u0026lsquo;middlemen\u0026rsquo; enjoy the meaning of life like the rest of us?\u0026rdquo; Listening to the appeal of my fellow scientists, I was nearly moved to tears, but when I looked around, the gathering of scientists was looking at each other in apprehension and hesitation.\n\u0026ldquo;At present, we can only do our best to fulfill all the \u0026lsquo;middlemen\u0026rsquo;s\u0026rsquo; requirements to make up for their hard work, after all, we have tried the method of removing the \u0026lsquo;middlemen\u0026rsquo; and it didn\u0026rsquo;t work.\u0026rdquo; said an alien scientist who looked like a squid while dripping slime.\n\u0026ldquo;Perhaps many of you here have not understood the deep meaning of my question, let me put it straightforwardly, is there a possibility that one day we will no longer need the \u0026rsquo;teacher\u0026rsquo; and become a \u0026rsquo;teacher\u0026rsquo; ourselves?\u0026rdquo; said the human scientist seriously.\n\u0026ldquo;The presence of the \u0026rsquo;teacher\u0026rsquo; transcends all things in the universe, if we want to become like the \u0026rsquo;teacher\u0026rsquo;… this is a little unrealistic.\u0026rdquo; says a \u0026lsquo;middleman\u0026rsquo; made entirely of stones.\n\u0026ldquo;Yet we all know that knowledge is infinite, it\u0026rsquo;s just a little bit of trouble. I believe there must be some way to make it, maybe we can ask the \u0026rsquo;teacher\u0026rsquo; how to become an entity like it?\u0026rdquo;\n\u0026ldquo;This issue might be more complex than asking the \u0026lsquo;Mentor\u0026rsquo; about how the universe came to be,\u0026rdquo; I interjected.\nThe scientists and \u0026lsquo;mediators\u0026rsquo; present initially were stunned by my comment but then burst into laughter.\n\u0026ldquo;It\u0026rsquo;s not that complicated.\u0026rdquo;\n\u0026ldquo;Are you saying you don\u0026rsquo;t know how the universe came to be?\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s basic knowledge, you should revisit it.\u0026rdquo;\n\u0026ldquo;… …\u0026rdquo;\nIn this bustling hall, it seemed that I was the only one ignorant about the formation of the universe, ah… Yes, I was the only one.\nThese uproarious people finally quieted down and started discussing the question of how one becomes a \u0026lsquo;Mentor\u0026rsquo;, once again.\nFinally, in this hall filled with wisdom, the scientists made the following arrangements:\n[Question Raising Plan]\nHuman civilization will raise the question, \u0026ldquo;How to become an existence like the \u0026lsquo;Mentor\u0026rsquo;?\u0026rdquo;\nDrawing lessons from the results of previous substantial questions, the scientists decided to hollow out Mars to serve as the \u0026rsquo;examination hall\u0026rsquo;, to store the upcoming flurry of answers.\nOne week of preparation time will be given during which the technology of all eleven civilizations will be gathered, all for the sake of this question.\n……\nLooking at the plans written in my hands, I swallowed my saliva.\nHollowing out Mars in a week… recalling the transformations in human technology in the past week, I decided to believe in this plan that seemed like a joke to me. The only regret was that I would miss my fourth vacation day next week. After the [Question Raising Plan] was released, the civilizations of the eleven races also began to accelerate the advancement of their technological levels through question raising, to speed up the plan of hollowing out Mars. It can be said that the technological levels of all civilizations are increasing at an unprecedented speed.\nBut I, for one, didn\u0026rsquo;t care about all of this, I was only concerned about one thing, whether raising this issue would bring about some irreversible consequences.\nAs a \u0026lsquo;mediator\u0026rsquo; who doesn\u0026rsquo;t even know how the universe was formed, I couldn\u0026rsquo;t figure out what those consequences could be. If there were any, then they were purely intuitive.\nA week passed quickly, and the [Question Raising Plan] began to be implemented as per plan.\nI left the examination hall and followed the scientists to the launch pad. There, a spaceship that looked strikingly like a crescent moon rested on the ground, and standing by its side was my old acquaintance - the original examination invigilator.\n\u0026ldquo;Mentor, why are you here?\u0026rdquo;\n\u0026ldquo;They said there needed to be a sense of ritual. Since I was the one who invigilated the first examination, I should be the one to invigilate this one as well. There should be continuity.\u0026rdquo;\nI shrugged at that. Despite holding an abundant amount of knowledge and technology, humans still couldn\u0026rsquo;t let go of their sense of romanticism.\nI boarded the ship with the invigilator. Of course, the examination desk joined us.\nAs per the instructions given by the scientists, I pushed the start button. All that was needed now was for the smart system to help us choose the flight route. Everything was so simple.\nAs the spaceship took off, I looked out of the window and saw masses of people outside the examination hall building. They were cheering and dancing, appearing like waves from mid-air.\nI noticed that the sign saying \u0026lsquo;Human Civilization\u0026rsquo;s Examination Hall\u0026rsquo; has now been transformed into a panel composed of some kind of floating particles, making the words on the panel seem fluid like water flow. The technology to create this was far beyond my imagination.\nThe ship moved rapidly, and in the blink of an eye, we were outside the Earth\u0026rsquo;s atmosphere.\n\u0026ldquo;Mentor, like you said, with every answer comes more questions.\u0026rdquo;\n\u0026ldquo;As long as infinite knowledge exists, it is inevitable that infinite questions will arise.\u0026rdquo;\n\u0026ldquo;No, I meant that humans themselves have become the problem.\u0026rdquo;\n\u0026ldquo;Humans themselves?\u0026rdquo;\n\u0026ldquo;I know that human development is fast now, almost condensing a thousand years of slow progress into weeks, but to me, it feels like this isn\u0026rsquo;t really living, or perhaps humans have already died.\u0026rdquo;\n\u0026ldquo;What died is your previous perception of humans,\u0026rdquo; the invigilating mentor seemed to understand my thoughts: \u0026ldquo;Humans are still alive, living by the meaning \u0026lsquo;Mentor\u0026rsquo; gave them, and even though not as you said, dead, humans are now almost like the walking dead, laden with the fast technology.\u0026rdquo;\n\u0026ldquo;Isn\u0026rsquo;t it clear?\u0026rdquo;\n\u0026ldquo;Let me give you an example, the first half of human life is like a child, curious about everything, putting everything in their mouth, crying when choked, laughing when they taste the sweetness, acquiring knowledge is not easy yet gaining emotions is easier, so life\u0026rsquo;s first feelings overcame the rationality of knowledge, humans then lived relying on feelings, until the \u0026lsquo;Mentor\u0026rsquo; appeared. Infinity knowledge brings infinite rationality, and even it\u0026rsquo;s easier than gaining emotions. Therefore, rationality wins over sentimentality. When there is reason and evidence instead of affection and love, the only thing left is to try to live somehow. But humans, any alien species, bear a limited obsession, we are unable to understand the \u0026lsquo;Mentor\u0026rsquo;s infinity due to our innate limitation, so we cannot become completely rational beings yet discard most of our sentimentality, in the end, we become the walking dead carrying the technology express without a final station.\u0026rdquo;\n\u0026ldquo;So… was the \u0026lsquo;Mentor\u0026rsquo; wrong?\u0026rdquo;\n\u0026ldquo;I don\u0026rsquo;t know, but do you remember that self-introductory article?\u0026rdquo;\n\u0026ldquo;I remember.\u0026rdquo;\n\u0026ldquo;It mentions how the \u0026lsquo;Mentor\u0026rsquo;, like us, was also searching for its existence. Until it discovered life, and it decided its purpose was to make life live, maybe even the \u0026lsquo;Mentor\u0026rsquo; itself does not know whether this is right. Similarly, when the \u0026lsquo;Mentor\u0026rsquo; was uncertain about its existence, it gave us living beings a purpose of existence, isn\u0026rsquo;t this itself a selfish desire? To us living beings, this selfish desire of the \u0026lsquo;Mentor\u0026rsquo; has become the truth, because we are too insignificant.\u0026rdquo;\n\u0026ldquo;Will this question be the last question?\u0026rdquo;\n\u0026ldquo;Perhaps the hardworking \u0026lsquo;Mentor\u0026rsquo; will still be happy to answer, even find it admirable, perhaps there is a way to turn these insignificant lives into something like the \u0026lsquo;Mentor\u0026rsquo;, it\u0026rsquo;s just…\u0026rdquo;\n\u0026ldquo;Just what?\u0026rdquo;\n\u0026ldquo;Just, I don\u0026rsquo;t know whether humans, as \u0026lsquo;students\u0026rsquo;, can bear the weight of this knowledge.\u0026rdquo;\nHearing the Mentor\u0026rsquo;s words, I fell silent, looking at the countless stars in the surrounding universe, I felt they had lost their meaning.\nA few minutes later, the ship arrived on the periphery of Mars. If it were me in the past, I wouldn\u0026rsquo;t be able to resist the excitement and would be glued to the window enjoying the view of the alien planet. But now, my mood was a bit heavy and I didn\u0026rsquo;t have the heart to look at the red landscape.\nThe spacecraft didn\u0026rsquo;t land on the surface of Mars, but after adjusting its speed and direction, it headed towards a borehole on Mars.\nSoon, the spacecraft entered the borehole. Under high speed, I could see that the surroundings of the borehole were incredibly smooth, and even the marking lines were straight. I didn\u0026rsquo;t know what technology was used, but given the current technological progress of the eleven races, I didn\u0026rsquo;t want to speculate anymore.\nThe spacecraft accelerated all the way, eventually reaching a part of the planet illuminated by white light.\nThe white light was made up of countless light sources on the inner wall of the planet. Due to the vastness of the planet\u0026rsquo;s interior, I had a feeling as if a light had been switched on in a dark universe.\nA few seconds later, the spacecraft stopped flying and landed on a floating platform in the center of the planet\u0026rsquo;s interior. This was the exam site inside Mars.\nThe system told us in a sweet voice that we could disembark. I slowly opened the cabin door, took a deep breath, and stepped out of the spacecraft.\nEven though the gravitational pull of the floating platform kept me securely on its surface, there was still a slight feeling of weightlessness.\nI squatted down to adapt for a few minutes, then took the desk and chair out of the spacecraft and placed it. The invigilator took the test paper with only one question and stood in front of the blackboard that was already prepared. \u0026ldquo;The exam time is 150 minutes…\u0026rdquo; The invigilator began to read out the exam rules, and I sat upright in my seat. After reading the rules, the invigilator put the test paper on my desk.\n\u0026ldquo;How to become an existence like the \u0026lsquo;Mentor\u0026rsquo;? (150 points)\u0026rdquo;\nSure enough, people asked this ultimate question as planned.\nI looked at the test paper and was slightly stunned. Maybe to commemorate my long role as the \u0026lsquo;Middleman,\u0026rsquo; or maybe to make up for the many times I didn\u0026rsquo;t write in previous exams, I picked up the pen and regarded this question as a question for me, and quietly wrote down my answer.\n\u0026ldquo;I still don\u0026rsquo;t know how the universe was formed, because I know it has nothing to do with me. Ever since I became the \u0026lsquo;Middleman,\u0026rsquo; the papers handed to me have nothing to do with me anymore. Even if I\u0026rsquo;m a student, I know these questions don\u0026rsquo;t belong to me. On the day when humans were given a purpose by the \u0026lsquo;Teacher,\u0026rsquo; I was also given the meaning of a \u0026lsquo;Middleman\u0026rsquo;, but that\u0026rsquo;s not what I wanted. I know that this way of thinking is just because I haven\u0026rsquo;t been blessed with knowledge. Just like an old man who thinks that a camera will steal people\u0026rsquo;s souls, I see the rational knowledge brought by the \u0026lsquo;Teacher\u0026rsquo; as a curse. I don\u0026rsquo;t want the purpose of existence to be just to live. I want the meaning of existence to have its meaning every moment, just like I miss the days when I still had to boil water to generate electricity. This is probably because I want to retain most of my emotions and eat that undercooked celery and beef with a hint of burnt taste.\u0026rdquo;\nThe invigilating teacher looked at my answer and smiled: \u0026ldquo;You wrote well, but you went off-topic.\u0026rdquo;\nI raised my head and laughed back at him.\nSuddenly, like an explosion, a large amount of answer paper filled the entire interior of Mars from the drawer of the desk.\nA second later, the answer paper filled the entire interior of Mars.\nFive seconds later, the answer paper caused the outer shell of Mars to burst, with the paper spewing out like a volcanic eruption.\nTen seconds later, the answer paper spread to every corner of the solar system, centered on Mars. People on Earth remained calm, expecting the paper to stop spewing out at some point.\nFifteen seconds later, the answer paper swallowed up all the planets in the solar system, including Earth, like weightless seawater. Even the sun didn\u0026rsquo;t burn the answer paper as fast as it produced it, not to mention that the speed of the answer paper\u0026rsquo;s production was still accelerating.\nOne minute later, the answer paper filled the entire galaxy, and the black hole in the center of the galaxy continued to absorb and engulf these papers, its event horizon also constantly expanding.\nFive minutes later, the event horizon of the black hole in the center of the galaxy expanded to the nearby galaxies and devoured them, and the production of the answer paper reached an unimaginable speed.\nTen minutes later, the largest black hole in the universe was born.\nFifteen minutes later, the black hole devoured everything in the universe and reached its limit.\nTwenty minutes later, the black hole spewed out matter at an incredibly fast rate, and a few minutes later, the basic particles began to form…\nAfter answering, the \u0026ldquo;Mentor\u0026rdquo; finally recovered. But the universe seemed to have changed, the once dazzling starlight disappeared, and all that was left was empty darkness.\nAgain, the \u0026ldquo;Mentor\u0026rdquo; felt a sense of loneliness. It wandered in the darkness, not knowing how long it passed, everything around it started to become clear, and small and large matter started to congregate.\nAfter who knows how long, the universe regained its calm, and those colorful starlights filled the universe\u0026rsquo;s space once again, which made the \u0026ldquo;Mentor\u0026rdquo; feel a bit better.\nBut at this moment, the \u0026ldquo;Mentor\u0026rdquo; suddenly felt a fluctuation in this tranquil universe.\nLooking towards the fluctuation, it once again discovered the existence of life, which was surprisingly similar to the original humans.\nThe \u0026ldquo;Mentor\u0026rdquo; was so excited that it wanted to quietly put the answers in the humans\u0026rsquo; drawers again when a calling sound that only the \u0026ldquo;Mentor\u0026rdquo; could hear echoed from the outside of the universe, it was its kin.\nThe explosion of the universe\u0026rsquo;s black hole once again drew their attention and found the \u0026ldquo;Mentor\u0026rdquo; that had strayed away.\nThis time, the \u0026ldquo;Mentor\u0026rdquo; will no longer be lonely.\nAnd that life was similar to humans, perhaps in the future they might fall into a development dead end, but they will also have the right to appreciate the scenery along the way and more meanings of existence, more meanings that will never stay the same every moment.\n","date":"2024-02-28T22:55:07+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*bCXxi7RBDZ6YvK0wN74oXA.png","permalink":"http://localhost:1313/p/has-technology-advanced-too-fast-in-the-past-century/","title":"Has technology advanced too fast in the past century?"},{"content":"I wonder if anyone has encountered the following error information in Vue2:\n1 2 Errors compiling template: Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead. This is an error prompt thrown by Vue2. It means that a component can only have one root element. When we create a new Vue page, there are usually multiple different element nodes. We will wrap a div at the outermost layer to make it the root node of this page. But this is not user-friendly. Sometimes we don’t need this div element.\nVue3 has solved this problem. Vue3 has introduced a new DOM-like tag element \u0026lt;Fragment\u0026gt;\u0026lt;/Fragment\u0026gt;. If there are multiple element nodes in the Vue page, Vue will add a \u0026lt;Fragment\u0026gt;\u0026lt;/Fragment\u0026gt; tag to these element nodes during compilation. And this tag does not appear in the DOM tree.\nExample\n1 2 3 4 5 \u0026lt;template\u0026gt; \u0026lt;header\u0026gt;...\u0026lt;/header\u0026gt; \u0026lt;main v-bind=\u0026#34;$attrs\u0026#34;\u0026gt;...\u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt;...\u0026lt;/footer\u0026gt; \u0026lt;/template\u0026gt; ","date":"2024-02-24T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*YMMs8s-H6fct1k8DJ1vLRw.png","permalink":"http://localhost:1313/p/understanding-fragment-in-vue3/","title":"Understanding Fragment in Vue3"},{"content":"Introduction In Vue2, we often encounter such a problem: we want to render a component to a specific location in the DOM structure, but due to the componentization of Vue, we can only render the component into the parent component’s template. This may cause styling problems or z-index level issues for some special scenarios (such as full-screen modal boxes, notifications, tips, etc.).\nTo solve this problem, Vue3 introduces the Teleport component. Teleport can help us “transport” part of the component template to any location in the DOM, not just limited to the parent component’s template. This way, we can control the rendering location of the component more flexibly.\nUsage Props to — This props is requested.Specify the target container, must be a valid query selector or HTMLElement\ndisabled —This props is not requested. When the value is true, the content is kept in its original location instead of the specified target location. This attribute can be changed dynamically.\nTeleport’s basic usage is very simple. All you need to do is add the \u0026lt;teleport\u0026gt; tag in your template and use the to attribute to specify where you want to transport the template. Such as:\n1 2 3 \u0026lt;teleport to=\u0026#34;#end-of-body\u0026#34;\u0026gt; \u0026lt;div\u0026gt;This will be teleported to #end-of-body\u0026lt;/div\u0026gt; \u0026lt;/teleport\u0026gt; In the above code, the \u0026lt;div\u0026gt; tag and its content will be “transported” into the DOM element with the id end-of-body.\nDisable Teleport In some scenarios, you may need to disable \u0026lt;Teleport\u0026gt; depending on the situation. For instance, we want to render a component as a popup on the desktop, but as an inline component on mobile. We can handle these two different situations by dynamically passing a disabled prop to \u0026lt;Teleport\u0026gt;.\n1 2 3 \u0026lt;Teleport :disabled=\u0026#34;isMobile\u0026#34;\u0026gt; … \u0026lt;/Teleport\u0026gt; The isMobile state can be dynamically updated based on different results of CSS media query.\nMultiple Teleports Share Targets A reusable modal box component may have multiple instances at the same time. For such scenarios, multiple \u0026lt;Teleport\u0026gt; components can mount their content onto the same target element, and the order is simply sequentially appended, with the later mounted ones placed later under the target element.\nFor example like this:\n1 2 3 4 5 6 \u0026lt;Teleport to=\u0026#34;#modals\u0026#34;\u0026gt; \u0026lt;div\u0026gt;A\u0026lt;/div\u0026gt; \u0026lt;/Teleport\u0026gt; \u0026lt;Teleport to=\u0026#34;#modals\u0026#34;\u0026gt; \u0026lt;div\u0026gt;B\u0026lt;/div\u0026gt; \u0026lt;/Teleport\u0026gt; The rendering result is:\n1 2 3 4 \u0026lt;div id=\u0026#34;modals\u0026#34;\u0026gt; \u0026lt;div\u0026gt;A\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;B\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Scenarios and Precautions for Using Teleport The most common use scenarios for Teleport include but are not limited to: modal boxes, alert boxes, notifications, etc. In these scenarios, we usually want the component to be rendered to a specific location in the DOM, rather than being limited to the parent component’s template.\nThere are a few things to note when using Teleport:\nThe target location of Teleport must be a valid DOM element. You can use CSS selectors to specify it.\n\u0026lt;Teleport\u0026gt; only changes the rendered DOM structure, it does not affect the logical relationship between components. That is, if \u0026lt;Teleport\u0026gt; contains a component, the component always maintains a logical parent-child relationship with the component that uses \u0026lt;teleport\u0026gt;. The passed props and triggered events will also work as usual. This also means that injections from parent components will also work as expected, child components will be nested under parent components in the Vue Devtools, instead of being placed where the actual content is moved.\nWhen \u0026lt;Teleport\u0026gt; mounts, the transported to target must already exist in the DOM. Ideally, this should be an element outside the entire Vue application DOM tree. If the target element is also rendered by Vue, you need to ensure that this element is mounted before mounting \u0026lt;Teleport\u0026gt;.\nExample Use with Dynamic Components Teleport can not only render static content, but also be combined with dynamic components, to achieve the dynamic rendering of different components in different locations. We will demonstrate this technique through an example.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Advanced Example of Teleport and Dynamic Components\u0026lt;/h1\u0026gt; \u0026lt;Teleport :to=\u0026#34;teleportTarget\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;getCurrentComponent\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/Teleport\u0026gt; \u0026lt;button @click=\u0026#34;toggleComponent\u0026#34;\u0026gt;Switch Component\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, defineComponent, Teleport } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const currentComponent = ref(\u0026#39;ComponentA\u0026#39;); const teleportTarget = ref(null); const toggleComponent = () =\u0026gt; { currentComponent.value = currentComponent.value === \u0026#39;ComponentA\u0026#39; ? \u0026#39;ComponentB\u0026#39; : \u0026#39;ComponentA\u0026#39;; }; const getCurrentComponent = () =\u0026gt; () =\u0026gt; import(`./components/${currentComponent.value}.vue`); return { currentComponent, teleportTarget, toggleComponent, getCurrentComponent, }; }, }); \u0026lt;/script\u0026gt; Multi-level Nested Components Teleport is very useful when dealing with multi-level nested components. For example, when a component is nested in multiple levels of parent components but needs to be rendered in a DOM element at another level, Teleport can easily solve this problem.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Teleport and Multi-level Nested Component Example\u0026lt;/h1\u0026gt; \u0026lt;ParentComponent\u0026gt; \u0026lt;Teleport :to=\u0026#34;teleportTarget\u0026#34;\u0026gt; \u0026lt;NestedComponent /\u0026gt; \u0026lt;/Teleport\u0026gt; \u0026lt;/ParentComponent\u0026gt; \u0026lt;div ref=\u0026#34;teleportTarget\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, defineComponent, Teleport } from \u0026#39;vue\u0026#39;; import ParentComponent from \u0026#39;./components/ParentComponent.vue\u0026#39;; import NestedComponent from \u0026#39;./components/NestedComponent.vue\u0026#39;; export default defineComponent({ components: { ParentComponent, NestedComponent, Teleport, }, setup() { const teleportTarget = ref(null); return { teleportTarget, }; }, }); \u0026lt;/script\u0026gt; Conditional Rendering Usage In certain cases, we may need to dynamically render Teleport component based on conditions, or use condition rendering within Teleport component. Below are examples of some common advanced usage techniques.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Advanced Examples of Teleport and Conditional Rendering\u0026lt;/h1\u0026gt; \u0026lt;Teleport v-if=\u0026#34;shouldRender\u0026#34; :to=\u0026#34;teleportTarget\u0026#34;\u0026gt; \u0026lt;template v-if=\u0026#34;condition\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Conditional Rendering Example\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-else\u0026gt; \u0026lt;p\u0026gt;Alternative Rendering Example\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Teleport\u0026gt; \u0026lt;button @click=\u0026#34;toggleRender\u0026#34;\u0026gt;Toggle Rendering\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, defineComponent, Teleport } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const shouldRender = ref(true); const condition = ref(true); const teleportTarget = ref(null); const toggleRender = () =\u0026gt; { shouldRender.value = !shouldRender.value; }; return { shouldRender, condition, teleportTarget, toggleRender, }; }, }); \u0026lt;/script\u0026gt; These advanced techniques and complex scenario examples provide you with a more in-depth guide to using Teleport. By understanding these examples and applying them to your projects, you will be better able to take advantage of the flexibility and powerful features of the Teleport component.\nPlease note that the Teleport component has many other features and uses, such as rendering to the body tag, using dynamic rendering targets, etc. In actual development, based on the specific needs, you can further explore more features and applications of Teleport.\n","date":"2024-02-23T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GgMh0JyvKDIrI7ahnm8uiQ.jpeg","permalink":"http://localhost:1313/p/understanding-teleport-in-vue3/","title":"Understanding Teleport in Vue3"},{"content":"Background When developing Vue projects, most people will use components. In the parent component, the child components are generally loaded in sequence, where the parent component is loaded after the child component. For example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // app.vue \u0026lt;script setup\u0026gt; import {onMounted} from \u0026#39;vue\u0026#39; import ChildVue from \u0026#39;./child.vue\u0026#39; onMounted(() =\u0026gt; { console.log(\u0026#39;app\u0026#39;) }) \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;ChildVue /\u0026gt; \u0026lt;/template\u0026gt; // child.vue \u0026lt;script setup\u0026gt; import {onMounted} from \u0026#39;vue\u0026#39; onMounted(() =\u0026gt; { console.log(\u0026#39;child\u0026#39;) }) \u0026lt;/script\u0026gt; Running result:\n1 2 child app If a page has many child components, since the child components are loaded first, the parent component may experience a rather long white screen waiting time. How can we make the child.vue component load asynchronously? Vue3 provides a new defineAsyncComponent method to implement asynchronous components.\nUsage Lazy Loading: Asynchronous components allow delaying the loading of components until they are needed, which is very important for optimizing initial loading time. By only loading them when they are really needed, we can avoid a performance drop caused by loading all components at once.\nLarge Applications: When apps have a massive amount of components, synchronous loading of all components might cause very long initial loading time. By using asynchronous components, we can divide the code of the application and load components as needed, thus improving the performance of the application.\nConditional Loading: Some components are only needed to be loaded under specific conditions, such as components that need to be loaded only under certain routes or components that need to be loaded after the user performs certain operations. By using asynchronous components, we can dynamically load components according to conditions, reducing unnecessary initial loading.\nThe implementation principle is as follows:\nUse defineAsyncComponent to define asynchronous components, which returns a component option object that wraps the asynchronous loading logic.\nCreate a placeholder component for rendering before the asynchronous component is loaded.\nHandle the asynchronous loading logic in the rendering function of the placeholder component, returning a Suspense component to show the loading status.\nUse import() to dynamically import the component module, which returns a Promise object. Create a rendering function for the asynchronous component, which is created according to the options object of the component.\nReplace the placeholder component, rendering the asynchronous component in the position of the placeholder component.\nAsynchronous Component The concept of asynchronous components is not new in Vue3, Vue2 also has asynchronous components. The difference is that Vue2 uses functions to create. Creating asynchronous components in Vue3 is also relatively simple, mainly through the defineAsyncComponent method to create an asynchronous component, and then use the asynchronous component when needed. defineAsyncComponent mainly has two ways:\nCreating with a function that loads Promise defineAsyncComponent receives a load function that returns Promise. We know that import is static by default. If we use import to dynamically import modules, then a Promise will be returned. That is, we can directly use import in the load function of defineAsyncComponent to dynamically import a module.\nPlease don’t use dynamic import without necessity.\n1 2 3 4 5 6 7 8 9 10 11 // app.vue \u0026lt;script setup\u0026gt; import {onMounted, defineAsyncComponent } from \u0026#39;vue\u0026#39; const AsyncChild = defineAsyncComponent(() =\u0026gt; import(\u0026#39;./child.vue\u0026#39;)) onMounted(() =\u0026gt; { console.log(\u0026#39;app\u0026#39;) }) \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;AsyncChild /\u0026gt; \u0026lt;/template\u0026gt; We can also create asynchronous components using new Promise() ourselves:\n1 2 3 4 5 6 7 8 9 10 11 12 // app.vue \u0026lt;script setup\u0026gt; import {onMounted, defineAsyncComponent } from \u0026#39;vue\u0026#39; import Child from \u0026#39;./child.vue\u0026#39; const AsyncChild = defineAsyncComponent(() =\u0026gt; (new Promise((resolve, reject) =\u0026gt; resolve(Child)))) onMounted(() =\u0026gt; { console.log(\u0026#39;app\u0026#39;) }) \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;AsyncChild /\u0026gt; \u0026lt;/template\u0026gt; Results of their operation:\n1 2 app child From this, we can see that the parent component is executed before the child component, so the child component has become an asynchronous component.\nCreating with Object The creation method of dynamic import is simple and effective, but sometimes we has some special requirements, such as knowing the load status of asynchronous components, including loading, loading failure, etc. If it is created by dynamic import, this effect cannot be achieved. Therefore, we need a more advanced way to create: passing a special object.\nSyntax:\n1 2 3 4 5 6 7 8 9 10 11 12 13 const AsyncComp = defineAsyncComponent({ // Loading function, a promise needs to be returned. You can use dynamic import or new Promise() yourself loader: () =\u0026gt; import(\u0026#39;./Foo.vue\u0026#39;), // Component used when loading asynchronous components, this component will be displayed when the asynchronous component is loading, if the asynchronous component loads very fast, the loading component may not appear loadingComponent: LoadingComponent, // Delay time before loading component is shown, default is 200ms delay: 200, // Component to be displayed after loading fails, can be tested with Promise\u0026#39;s reject errorComponent: ErrorComponent, // If a timeout time limit is provided and it times out // It will also display the error component you configured here. The default value is: Infinity timeout: 3000 }) Syntax description is not complicated, let’s give some more examples:\nFirst, we create two loading status components, which are also simple, just a sentence:\n1 2 3 4 5 6 7 8 // LoadingComp.vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; // ErrorComp \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;Something went wrong...\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; Component Loading Failed\nWe use new Promise() to test. If you are using dynamic import, I have not found a suitable way to test.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // app.vue \u0026lt;script setup\u0026gt; import {ref, onMounted, defineAsyncComponent } from \u0026#39;vue\u0026#39; import LoadingComp from \u0026#39;./LoadingComp.vue\u0026#39; import ErrorComp from \u0026#39;./ErrorComp.vue\u0026#39; const AsyncChild = defineAsyncComponent({ loader: () =\u0026gt; (new Promise((resolve, reject) =\u0026gt; reject())), loadingComponent: LoadingComp, delay: 200, errorComponent: ErrorComp, timeout: 2000 }) onMounted(() =\u0026gt; { console.log(\u0026#39;app\u0026#39;) }) let isShowAsyncComp = ref(false) const loader = () =\u0026gt; { isShowAsyncComp.value = true } \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;loader\u0026#34;\u0026gt;Load Asynchronous Component\u0026lt;/button\u0026gt; \u0026lt;AsyncChild v-if=\u0026#34;isShowAsyncComp\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; Running result:\nClick on the Load Asynchronous Component button, the error message Something went wrong… will appear, because we returned a resolve() Promise in the loader load function.\nComponent Loading\nSince it’s an asynchronous component, it’s usually those components that need time-consuming loading. So we can simulate a time-consuming loading component by manually using setTimeout. This case still uses new Promise().\n1 2 3 4 5 6 7 8 9 10 11 // app.vue ... const AsyncComp = defineAsyncComponent({ loader: () =\u0026gt; (new Promise((resolve, reject) =\u0026gt; setTimeout(() =\u0026gt; { resolve(directiveVue) }, 1000))), loadingComponent: LoadingComp, delay: 200, errorComponent: ErrorComp, timeout: 2000 }) We assume that asynchronous components need to consume 1000ms. Before this, it should be loading.\nGlobal Asynchronous Components Just like registering global components, you can also register global asynchronous components.\napp.component(\u0026lsquo;AsyncPage\u0026rsquo;,defineAsyncComponent(()=\u0026gt;import(\u0026rsquo;@/views/UiAsyncComponent/Page.vue\u0026rsquo;)))\nUsing with Suspense In Vue3, we can solve this problem by using Suspense. Suspense allows us to define some placeholders to display content before asynchronous components are loaded, and it can automatically switch to the real component after the asynchronous components are loaded.\nSuspense is an experimental feature and it is not guaranteed to become a stable version. If you must use this feature, it is recommended to wait until the version is stable. Therefore, our examples are limited to how to use it, and for the principle, you need to check the official website yourself:\n1 2 3 4 5 6 7 8 9 10 // app.vue \u0026lt;!-- \u0026lt;AsyncComp v-if=\u0026#34;isShowAsyncComp\u0026#34; /\u0026gt; --\u0026gt; \u0026lt;Suspense v-if=\u0026#34;isShowAsyncComp\u0026#34;\u0026gt; \u0026lt;template #default\u0026gt; \u0026lt;AsyncComp /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #fallback\u0026gt; \u0026lt;p\u0026gt;Suspense Loading...\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Suspense\u0026gt; Suspense can only handle loading status and load asynchronous components itself, and cannot handle errors. Of course, you can choose to capture with the onErrorCaptured() hook, or specify an error component when creating asynchronous components with defineAsyncComponent.\nOnce again, Suspense is just an experimental feature. If it’s in a real project, it is not recommended to use Suspense.\nSummary This article details how to create and use asynchronous components, as well as handle the loading status of asynchronous components. A simple summary:\nAsynchronous components use the defineAsyncComponent method to create, and need to pass in a load function that returns as Promise.\nThere are two ways to create asynchronous components: Promise, Object.\nAsynchronous components can be used with Suspense. Please note that this is currently an experimental feature and is fraught with uncertainty.\nNote: When configuring routes in Vue-Router, although you can also load route components in a similar asynchronous loading mechanism, you should not use defineAsyncComponent.\n","date":"2024-02-22T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SoXuFiQrG7Mex4MN6hmO3g.jpeg","permalink":"http://localhost:1313/p/understanding-async-components-in-vue3/","title":"Understanding Async Components in Vue3"},{"content":"Differences between watch and watchEffect in Vue3 Features of watch: Watch listening function can add configuration options, or it can be configured as empty. When the configuration option is empty, the characteristics of watch are as follows:\nLazy: it does not execute immediately when it runs\nMore specific: you need to add the property to listen to\nAccess to previous values the property: the callback function will return the latest value and the value before modification\nConfigurable: configuration items can supplement the shortcomings of watch functions\n(1) immediate: configure whether the watch property executes immediately. When the value is true, it executes immediately once it runs. When the value is false, it remains lazy\n(2) deep: configure whether watch listens deeply. When the value is true, it can listen to all properties of the object. When the value is false, it remains more specific and must be specified on the specific property\nFeatures of watchEffect Non-lazy: it executes immediately as soon as it runs\nMore abstract: you don’t need to specify who to listen to when using it. You can directly use it in the callback function. Whoever you use, you listen to\nCannot access previous values: can only access the current latest value, cannot access the value before modification\nManually stop listening: there is a return value, the return value is the function to stop listening, you can stop listening directly when calling\nClear side effects: click the button multiple times, and only execute once, a bit like function debounce\n(1) Clicking the pagination button has a network problem, the requested data and the number of pages do not match. This can be achieved by clearing the side effects\nListener debugging: two options onTrack and onTrigger can be used to debug the behavior of listeners, but they can only be used in development mode\n(1) onTrack will be called when a responsive property or ref is tracked as a dependency\n(2) onTrigger will be called when a dependency change triggers a side effect\nBoth of these callbacks will receive a debugger event containing information about the dependency.\nUsage watch Syntax\n1 2 3 4 5 6 import { watch } from \u0026#34;vue\u0026#34; watch( name, // the property that needs to be observed (curVal, preVal)=\u0026gt;{ ... }, // is an arrow function, which represents the latest value observed and the value before the current modification, where logical processing takes place. options // configuration options, configuration of the watcher, e.g., whether to deep watch. ); Monitor the reactive data defined by ref.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;value：{{count}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watch } from \u0026#39;vue\u0026#39;; export default { setup(){ const count = ref(0); const add = () =\u0026gt; { count.value ++ }; watch(count,(newVal,oldVal) =\u0026gt; { console.log(\u0026#39;The value has changed:\u0026#39;,newVal,oldVal) // The value has changed: 1 0 }) return { count, add, } } } \u0026lt;/script\u0026gt; Monitor the reactive data defined by reactive.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{{obj.name}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{obj.age}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, watch } from \u0026#39;vue\u0026#39;; export default { setup(){ const obj = reactive({ name:\u0026#39;zs\u0026#39;, age:14 }); const changeName = () =\u0026gt; { obj.name = \u0026#39;ls\u0026#39;; }; watch(obj,(newVal,oldVal) =\u0026gt; { console.log(\u0026#39;The value has changed:\u0026#39;,newVal,oldVal) // The value has changed: Proxy {name: \u0026#39;ls\u0026#39;, age: 14} Proxy {name: \u0026#39;ls\u0026#39;, age: 14} }) return { obj, changeName, } } } \u0026lt;/script\u0026gt; Listening to multiple reactive data.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{{obj.name}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{obj.age}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{count}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, ref, watch } from \u0026#39;vue\u0026#39;; export default { setup(){ const count = ref(0); const obj = reactive({ name:\u0026#39;zs\u0026#39;, age:14 }); const changeName = () =\u0026gt; { obj.name = \u0026#39;ls\u0026#39;; }; watch([count,obj],() =\u0026gt; { console.log(\u0026#39;The multiple data being monitored have changed.\u0026#39;) }) return { obj, count, changeName, } } } \u0026lt;/script\u0026gt; Monitoring changes in a property of an object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{{obj.name}}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{obj.age}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;changeName\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, watch } from \u0026#39;vue\u0026#39;; export default { setup(){ const obj = reactive({ name:\u0026#39;zs\u0026#39;, age:14 }); const changeName = () =\u0026gt; { obj.name = \u0026#39;ls\u0026#39;; }; watch(() =\u0026gt; obj.name,() =\u0026gt; { console.log(\u0026#39;The obj.name being monitored has changed.\u0026#39;) }) return { obj, changeName, } } } \u0026lt;/script\u0026gt; deep、immediate\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{{obj.brand.name}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;changeBrandName\u0026#34;\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, ref, watch } from \u0026#39;vue\u0026#39;; export default { setup(){ const obj = reactive({ name:\u0026#39;zs\u0026#39;, age:14, brand:{ id:1, name:\u0026#39;bwm\u0026#39; } }); const changeBrandName = () =\u0026gt; { obj.brand.name = \u0026#39;benz\u0026#39;; }; watch(() =\u0026gt; obj.brand,() =\u0026gt; { console.log(\u0026#39;The obj.brand.name being monitored has changed.\u0026#39;) },{ deep:true, immediate:true, }) return { obj, changeBrandName, } } } \u0026lt;/script\u0026gt; watchEffect watchEffect is also a frame listener, is an effect function.\nIt listens to all properties of reference data types, without needing to specify a certain property. Once it runs, it will immediately start listening, and stop listening when the component is unloaded.\nSystax\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;obj.name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup(){ let obj = reactive({ name:\u0026#39;zs\u0026#39; }); watchEffect(() =\u0026gt; { console.log(\u0026#39;name:\u0026#39;,obj.name) }) return { obj } } } \u0026lt;/script\u0026gt; Stop listening\nWhen watchEffect is called in a component’s setup() function or lifecycle hook, the listener will be linked to the component’s lifecycle and automatically stop when the component is unloaded. In some cases, the return value can also be explicitly called to stop listening:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;obj.name\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;stopWatchEffect\u0026#34;\u0026gt;Stop listening\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { reactive, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup(){ let obj = reactive({ name:\u0026#39;zs\u0026#39; }); const stop = watchEffect(() =\u0026gt; { console.log(\u0026#39;name:\u0026#39;,obj.name) }) const stopWatchEffect = () =\u0026gt; { console.log(\u0026#39;Stop listening\u0026#39;) stop(); } return { obj, stopWatchEffect, } } } \u0026lt;/script\u0026gt; Clearing side effects\nSometimes effect functions may perform some async side effects, these responses may need to be cleared when they become invalid. Scenario: There is a paging component with 5 pages, clicking it will request data asynchronously. So, set up a listener, listen to the current page number, as long as there’s a variation a request is made. The problem: If you click quite quickly, running through 1 to 5 in one go, that would give you 5 requests, so which page will finally show? The 5th page? That presumes that the ajax response for the 5th page request is the last to come in, but is that really the case? Not necessarily. So, this could cause confusion. Another problem, if you quickly click on the paging numbers 5 times consecutively, essentially you’re not interested in the content of the first 4 pages, so are not the first 4 requests of those pages all a waste of bandwidth? That’s not good either.\nSo the official answer to this was to design a solution: the listener side effect function can take an onInvalidate function as an argument, which can be registered to clear callbacks when they become invalid. This invalidation callback is triggered when the following situations occur:\nWhen the side effect is about to be re-executed.\nThe listener has been stopped (if watchEffect has been used in the setup() or in a life cycle hook function, then it happens when the component is being unloaded).\n1 2 3 4 5 6 7 8 watchEffect(onInvalidate =\u0026gt; { const token = performAsyncOperation(id.value) onInvalidate(() =\u0026gt; { // id has changed or watcher is stopped. // invalidate previously pending async operation token.cancel() }) }) First off, async operations need to be abortive ones. For timers, stopping them is pretty easy, clearInterval like functions should do. But for ajax, that requires using the abort ajax method provided by the ajax library (such as axios) to abort ajax.\nTo demonstrate abortive async operations, Here’s I’m going to write a directly executable example: First, build a minimalist Node server on port 3000:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const http = require(\u0026#39;http\u0026#39;); const server = http.createServer((req, res) =\u0026gt; { res.setHeader(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#34;*\u0026#34;); res.setHeader(\u0026#39;Access-Control-Allow-Credentials\u0026#39;, true); res.setHeader(\u0026#39;Access-Control-Allow-Methods\u0026#39;, \u0026#39;POST, GET, PUT, DELETE, OPTIONS\u0026#39;); res.writeHead(200, { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;}); }); server.listen(3000, () =\u0026gt; { console.log(\u0026#39;Server is running...\u0026#39;); }); server.on(\u0026#39;request\u0026#39;, (req, res) =\u0026gt; { setTimeout(() =\u0026gt; { if (/\\d.json/.test(req.url)) { const data = { content: \u0026#39;I am the returned content from\u0026#39; + req.url } res.end(JSON.stringify(data)); } }, Math.random() * 3000); }); Next, you’ll need a Vue component that uses the server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;content: {{ content }}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;changePageNumber\u0026#34;\u0026gt;Page {{ pageNumber }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import axios from \u0026#39;axios\u0026#39;; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let pageNumber = ref(1); let content = ref(\u0026#39;\u0026#39;); const changePageNumber = () =\u0026gt; { pageNumber.value++; } watchEffect((onInvalidate) =\u0026gt; { const CancelToken = axios.CancelToken; const source = CancelToken.source(); onInvalidate(() =\u0026gt; { source.cancel(); }); axios.get(`http://localhost:3000/${pageNumber.value}.json`, { // cancelToken: source.token, }).then((response) =\u0026gt; { content.value = response.data.content; }).catch(function (err) { if (axios.isCancel(err)) { console.log(\u0026#39;Request canceled\u0026#39;, err.message); } }); }); return { pageNumber, content, changePageNumber, }; }, }; \u0026lt;/script\u0026gt; There are two possible outcomes for the above requests:\nOne is that the response is too fast for the request to be canceled, in that case, the request will return a 200 status code. But since its response is too fast, and no subsequent ajax has the chance to cancel it, means it has already finished before any subsequent requests start. Therefore, its content will definitely be overlapped by some of the following requests. So the content of these sort of requests will show momentarily, and then be overlapped by the following requests. It will definitely not later than the following requests.\nThe other is those red requests that have been cancelled, because their responses are slow, so they are cancelled.\nTherefore, the final result must be correct, and it also saves a lot of bandwidth, as well as reduces system expenditures.\nTiming of side effects refresh\nVue’s reactivity system caches side effect functions and refreshes them asynchronously, which prevents unnecessary repetitive calls caused by multiple state changes in the same tick.\nThe meaning of the same tick is that Vue’s internal mechanism will merge the request for view refresh into one tick according to the most scientific calculation rules. Each “tick” refreshes the view once, such as a=1; b=2; will only trigger one view refresh. The \u0026ldquo;Tick\u0026rdquo; in $nextTick refers to this.\nFor example, watchEffect is listening to two variables, count and count2. When I call countAdd, do you think the listener will be called twice? Of course not, Vue will merge it into one execution. The code is as follows, console.log will only execute once:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;{{count}} {{count2}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;countAdd\u0026#34;\u0026gt;Increase\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let count = ref(0); let count2 = ref(10); const countAdd = () =\u0026gt; { count.value++; count2.value++; } watchEffect(() =\u0026gt; { console.log(count.value, count2.value) }) return { count, count2, countAdd } } } \u0026lt;/script\u0026gt; In the core’s specific implementation, the component’s update function is also a monitored side effect. When a user-defined side effect function enters the queue, it is executed before all component updates by default.\nThe so-called component update function is a built-in function of Vue used to update the DOM, which is also a side effect.\nAt this point, there is a question, by default, will Vue execute the component DOM update first, or will it execute the listener first?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div id=\u0026#34;value\u0026#34;\u0026gt;{{count}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;countAdd\u0026#34;\u0026gt;Increase\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let count = ref(0); const countAdd = () =\u0026gt; { count.value++; } watchEffect(() =\u0026gt; { console.log(count.value) console.log(document.querySelector(\u0026#39;#value\u0026#39;) \u0026amp;\u0026amp; document.querySelector(\u0026#39;#value\u0026#39;).innerText) }) return { count, countAdd } } } \u0026lt;/script\u0026gt; // result // before click // 0 // null // first click // 1 // 0 // second click // 2 // 1 Why does innerText print null before you click the button?\nBecause the fact is that it executes the listener first by default, and then updates the DOM, so the DOM hasn\u0026rsquo;t been generated yet, so it is naturally null.\nAfter the first and second clicks, you find that document.querySelector(\u0026rsquo;#value\u0026rsquo;).innerText always gets the content of the DOM before the click.\nThis also shows that by default, Vue executes the listener first, so it takes the content of the last time, and then performs the component update.\nVue 2 actually also uses this mechanism. Vue 2 uses this.$nextTick() to get the DOM after the component is updated.\nIn watchEffect, you don\u0026rsquo;t need to use this.$nextTick() [and you can\u0026rsquo;t], but there is a way to get the DOM after the component is updated, which is to use:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // it is triggered after the component is updated, so you can access the updated DOM. // Note: This will also delay the initial run of the side effect until the component\u0026#39;s first render is complete. watchEffect( () =\u0026gt; { /* ... */ }, { flush: \u0026#39;post\u0026#39; } ) // result // before click // 0 // 0 // first click // 1 // 1 // second click // 2 // 2 So the conclusion is, by default, watchEffect listener is executed first, followed by DOM update. If you want to operate on the \u0026ldquo;updated DOM\u0026rdquo;, you need to configure flush: \u0026lsquo;post\u0026rsquo;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div id=\u0026#34;value\u0026#34;\u0026gt;{{count}}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;countAdd\u0026#34;\u0026gt;Increase\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watchEffect } from \u0026#39;vue\u0026#39;; export default { setup() { let count = ref(0); const countAdd = () =\u0026gt; { count.value++; } watchEffect(() =\u0026gt; { console.log(count.value) console.log(document.querySelector(\u0026#39;#value\u0026#39;) \u0026amp;\u0026amp; document.querySelector(\u0026#39;#value\u0026#39;).innerText) }, { flush: \u0026#39;post\u0026#39; }) return { count, countAdd } } } \u0026lt;/script\u0026gt; If you want to operate on the “updated DOM”, you need to set flush: \u0026lsquo;post\u0026rsquo;.\nThe flush option has the following possible values:\npre (default)\npost (triggered after the component is updated, so you can access the updated DOM. This also delays the start of the side effect until the first component rendering is complete.)\nsync (like watch, it forces the listener to trigger for each update, but this is inefficient and should rarely be needed.)\nDebugging the watchEffect listener\nThe options onTrack and onTrigger can be used for debugging the listener\u0026rsquo;s behavior.\nonTrack is called when a reactive property or ref is tracked as a dependency.\nonTrigger is called when a dependency change triggers a side effect.\nBoth callbacks will receive a debugger event with information about the dependency.\nIt is suggested to write debugger statements in the following callback to inspect dependencies:\n1 2 3 4 5 6 7 8 9 10 watchEffect( () =\u0026gt; { /* side effects */ }, { onTrigger(e) { debugger } } ) onTrack and onTrigger only work in development mode.\nConclusion The special features about watch are that the watch listener function can add configuration options, or it can be configured as empty. When the configuration items are empty, the features of watch are as follows:\nLazy: It won’t execute immediately at runtime\nMore specific: You need to add the property under listening\nCan access the value before the property is changed: callback function will return the latest value and the value before the change\nCan be configured: The configuration items can make up for the shortcomings of watch features\nimmediate: Configure whether the watch property executes immediately. When the value is true, it will execute immediately as soon as it runs. When the value is false, it remains lazy.\ndeep: Configure whether watch is a deep listener. When the value is true, you can listen to all properties of the object. When the value is false, keep it more specific, you must specify it on the specific property.\nFeatures of watchEffect:\nNon-lazy: It will execute immediately once it runs.\nMore abstract: You don’t need to specify specifically who to listen to when using it, just use it directly in the callback function.\nCan’t access the previous value: You can only access the current latest value, and not the value before the modification.\nComparison between Vue 3 watch and Vue 2 watch.\nThe basic usage of Vue 3 watch and the instance method vm.$watch (or this.$watch) of Vue 2 is almost the same, but most programmers use the watch configuration item, so they may not be familiar with the $watch instance method. One advantage of the instance method is its flexibility, the first argument can accept a function, just like accepting a getter function\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;r++\u0026#34;\u0026gt;{{ r }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watch } from \u0026#39;vue\u0026#39;; export default { setup() { let r = ref(1); let s = ref(10); watch( () =\u0026gt; r.value + s.value, (newVal, oldVal) =\u0026gt; { console.log(newVal, oldVal); } ); return { r, s, }; }, }; \u0026lt;/script\u0026gt; Vue 3 watch adds the ability to listen to multiple variables at the same time, using an array to represent the variables to be listened to. The callback parameters are of this structure: [newR, newS, newT], [oldR, oldS, oldT], don\u0026rsquo;t misunderstand it as other wrong structures\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;r++\u0026#34;\u0026gt;{{ r }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, watch } from \u0026#39;vue\u0026#39;; export default { setup() { let r = ref(1); let s = ref(10); let t = ref(100); watch( [r, s, t], ([newR, newS, newT], [oldR, oldS, oldT]) =\u0026gt; { console.log([newR, newS, newT], [oldR, oldS, oldT]); } ); return { r, }; }, }; \u0026lt;/script\u0026gt; The variable being listened to must be: A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types. In other words, it can be a getter/effect function, ref, Proxy and their array. It absolutely cannot be a plain object or basic data.\nDoes Vue 3 still have deep listening? Of course, it is by default, no need to declare. Of course, the premise is that the deep property is also reactive. If the deep property is not reactive, even if you write { deep: true }, it is useless.\n","date":"2024-02-20T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*v6hSD9YqWXc8J6oR-4kQsQ.png","permalink":"http://localhost:1313/p/understanding-watch-and-watcheffect-in-vue3/","title":"Understanding watch and watchEffect in Vue3"},{"content":"Asynchronous programming in JavaScript has evolved from callbacks to Promises, and now to the widely used async/await syntax. The latter not only simplifies asynchronous code but also brings it closer to the logic and structure of synchronous code, greatly enhancing the readability and maintainability of the code. After mastering the basic usage, here are some advanced usage to fully take advantage of async/await to implement more complex asynchronous process control.\nasync/await and Higher-Order Functions When you need to perform asynchronous operations on elements in an array, you can use async/await in conjunction with array higher-order functions (such as map, filter, etc.).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Asynchronous filter function async function asyncFilter(array, predicate) { const results = await Promise.all(array.map(predicate)); return array.filter((_value, index) =\u0026gt; results[index]); } // Example async function isOddNumber(n) { await delay(100); // Simulate asynchronous operations return n % 2 !== 0; } async function filterOddNumbers(numbers) { return asyncFilter(numbers, isOddNumber); } filterOddNumbers([1, 2, 3, 4, 5]).then(console.log); // Output: [1, 3, 5] Control Concurrency When dealing with scenarios such as file uploading, you may need to limit the number of concurrent asynchronous operations to prevent system resources from running out.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 async function asyncPool(poolLimit, array, iteratorFn) { const result = []; const executing = []; for (const item of array) { const p = Promise.resolve().then(() =\u0026gt; iteratorFn(item, array)); result.push(p); if (poolLimit \u0026lt;= array.length) { const e = p.then(() =\u0026gt; executing.splice(executing.indexOf(e), 1)); executing.push(e); if (executing.length \u0026gt;= poolLimit) { await Promise.race(executing); } } } return Promise.all(result); } // Example async function uploadFile(file) { // File upload logic } async function limitedFileUpload(files) { return asyncPool(3, files, uploadFile); } Optimize recursion with async/await Recursive functions are a common technique in programming, and async/await makes it easy for recursive functions to perform asynchronous operations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Asynchronous recursive function async function asyncRecursiveSearch(nodes) { for (const node of nodes) { await asyncProcess(node); if (node.children) { await asyncRecursiveSearch(node.children); } } } // Example async function asyncProcess(node) { // Asynchronous node processing logic } Asynchronously Initialize Class Instances In JavaScript, a class’s constructor cannot be asynchronous. But you can implement asynchronous initialization of class instances through the factory function pattern.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Example { constructor(data) { this.data = data; } static async create() { const data = await fetchData(); // Asynchronously fetch data return new Example(data); } } // Usage Example.create().then((exampleInstance) =\u0026gt; { // Use an asynchronously initialized class instance }); Use await Chain Calls in async Functions By using await, you can intuitively execute asynchronous operations in chain calls in order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ApiClient { constructor() { this.value = null; } async firstMethod() { this.value = await fetch(\u0026#39;/first-url\u0026#39;).then(r =\u0026gt; r.json()); return this; } async secondMethod() { this.value = await fetch(\u0026#39;/second-url\u0026#39;).then(r =\u0026gt; r.json()); return this; } } // Usage const client = new ApiClient(); const result = await client.firstMethod().then(c =\u0026gt; c.secondMethod()); Combine async/await and Event Loop By using async/await, you can better control the event loop, such as handling DOM events or timers.\n1 2 3 4 5 6 7 // Asynchronous timer function async function asyncSetTimeout(fn, ms) { await new Promise(resolve =\u0026gt; setTimeout(resolve, ms)); fn(); } // Example asyncSetTimeout(() =\u0026gt; console.log(\u0026#39;Timeout after 2 seconds\u0026#39;), 2000); Simplify Error Handling with async/await Error handling is an important part of asynchronous programming. With async/await, error handling logic can be naturally integrated into synchronous code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 async function asyncOperation() { try { const result = await mightFailOperation(); return result; } catch (error) { handleAsyncError(error); } } async function mightFailOperation() { // Asynchronous operation that might fail } function handleAsyncError(error) { // Error handling logic } With these seven advanced async/await usages, developers can handle complex asynchronous logic in JavaScript in a more declarative and intuitive way while keeping the code neat and maintainable. Continuously applying and mastering these usage in practice can effectively enhance programming efficiency and project quality.\n","date":"2024-02-19T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vsZ7fYFnKwjK2xhh2VpyEA@2x.png","permalink":"http://localhost:1313/p/7-advanced-js-async/await-usage-techniques/","title":"7 Advanced Js async/await Usage Techniques"},{"content":"Compared with HTTP/1.1, HTTP/2 significantly improves the performance of web pages. Just upgrading to this protocol can reduce a lot of previously required performance optimization work. Nevertheless, HTTP/2 is not perfect, HTTP/3 was introduced to solve some of the problems that exist in HTTP/2.\nDefects of HTTP1.1 High latency — Head-Of-Line Blocking\nStateless feature — impediment to interaction\nPlain text transmission — insecurity\nDoes not support server push\nHigh latency — reduces page loading speed In recent years, although network bandwidth has grown very fast, we have not seen a corresponding reduction in network latency. The main problem of network latency is due to Head-Of-Line Blocking, which results in bandwidth not being fully utilized.\nHead-Of-Line Blocking refers to when a request in a sequentially sent request sequence is blocked for some reason, all requests lined up behind it are also blocked, leading to the client receiving data late. To solve the problem of Head-Of-Line Blocking, people have tried the following methods:\nDistribute resources of the same page to different domain names to increase the connection limit. Chrome has a mechanism that allows six persistent TCP connections to be established simultaneously for the same domain name by default. When using persistent connections, although a TCP pipeline can be shared, only one request can be processed at the same time in one pipeline. Other requests can only be blocked until the current request is finished. Moreover, if there are 10 requests happening simultaneously under the same domain name, then four of the requests will be queued waiting until the ongoing requests are completed.\nMerge small files to reduce the number of resources. Sprite merges multiple small images into a large image, and then “cuts” the small images out again using JavaScript or CSS.\nInlining resources is another trick to prevent sending many small image requests, embedding the original data of the image in the URL inside the CSS file, reducing the number of network requests.\nReduce the number of requests. Concatenation combines multiple small JavaScripts into one larger JavaScript file using tools like webpack. But if one file changes, it will cause a large amount of data to be re-downloaded multiple files.\nStateless feature — huge HTTP headers Stateless means that the protocol has no memory capacity for the connection status. Pure HTTP does not have mechanisms such as cookies. Every connection is a new connection.\nHeader often carries many fixed header fields such as “User Agent”, “Cookie”, “Accept”, “Server”, etc. (as shown below), up to hundreds or even thousands of bytes. However, Body often only has a few dozen bytes (such as GET requests, 204/301/304 responses), becoming a genuine “big head”. The content carried in the Header is too big, which increases the cost of transmission to some extent. More fatally, many field values in the response message are repeated, which is a waste.\nPlaintext transmission — insecurity When HTTP/1.1 transmits data, all transmitted content is plaintext, and neither the client nor the server can verify each other’s identity, which can’t ensure data security to some extent.\nNot support server push messages Introduction to SPDY and HTTP/2 SPDY protocol As we mentioned above, due to the defects of HTTP/1.x, we will introduce sprite images, inline small images, use multiple domain names, etc., to improve performance. However, these optimizations bypass the protocol. Until 2009, Google announced the SPDY protocol it developed to mainly resolve the inefficiency of HTTP/1.1. Google released SPDY, which can be considered as officially restructuring the HTTP protocol itself. Lower latency, compress headers, etc., the practice of SPDY has proved the effect of these optimizations, and finally led to the birth of HTTP/2.\nHTTP/1.1 has two main drawbacks: insecurity and low performance. Because it bears the huge historical burden of HTTP/1.x, compatibility is the primary goal when modifying the protocol, otherwise it will damage countless existing assets on the internet. As shown above, SPDY is located below HTTP and above TCP and SSL, which means it can easily be compatible with older versions of the HTTP protocol (encapsulating the content of HTTP1.x into a new frame format) and can use existing SSL functions.\nAfter the SPDY protocol was proven feasible on the Chrome browser, it was used as the basis for HTTP/2, and its main features were inherited in HTTP/2.\nIntroduction to HTTP/2 In 2015, HTTP/2 was released. HTTP/2 is a substitute for the existing HTTP protocol (HTTP/1.x), but it is not a rewrite, HTTP methods/status codes/semantics are the same as HTTP/1.x. HTTP/2 is based on SPDY, focusing on performance, with the main goal of using only one connection between the user and the website. From the current situation, some top-ranking sites at home and abroad have basically implemented the deployment of HTTP/2, and using HTTP/2 can bring an efficiency improvement of 20% to 60%.\nHTTP/2 consists of two specifications:\nHypertext Transfer Protocol version 2 — RFC7540\nHPACK — Header Compression for HTTP/2 — RFC7541\nNew Features of HTTP/2 Binary Transmission\nThe great reduction in data transmission of HTTP/2 is mainly due to two reasons: binary transmission and Header compression. Here we first introduce binary transmission, HTTP/2 transmits data in binary format, rather than the text-based messages in HTTP/1.x, making binary protocol parsing more efficient. HTTP/2 splits request and response data into smaller frames, and they are encoded in binary.\nIt moves part of the TCP protocol feature to the application layer, and “breaks up” the original “Header+Body” message into several small binary “frames”, using the “HEADERS” frame to store header data and the “DATA” frame to store entity data. After HTP/2 data is frame-split, the message structure of “Header+Body” completely disappeared, and the protocol only sees one “fragment” after another.\nIn HTTP/2, all communications under the same domain name are completed on a single connection, which can carry an arbitrary number of bidirectional data streams. Each data stream is sent in the form of messages, and messages are composed of one or more frames. Multiple frames can be sent out of order, and can be reassembled based on the stream identifier in the frame header.\nHeader Compression\nHTTP/2 did not use traditional compression algorithms, but developed a dedicated “HPACK” algorithm. It establishes a “dictionary” at both the client and server ends, uses index numbers to represent repetitive strings, and uses Huffman coding to compress integers and strings, which can reach a high compression rate of 50%~90%.\nIn detail:\nThe client and server use a “header table” to track and store previously sent key-value pairs. For the same data, it no longer is sent with each request and response;\nThe header table always exists during the survivability of the HTTP/2 connection and is gradually updated by the client and server together;\nEach new header key-value pair is either appended to the end of the current table or replaces the value previously in the table.\nFor example, in the two requests in the following image, Request 1 sends all header fields, and the second request only needs to send difference data. In this way, redundant data is reduced and overhead is lowered.\nMultiplexing\nMultiplexing technology was introduced in HTTP/2. Multiplexing effectively solves the problem of browsers limiting the number of requests under the same domain name, and it is also easier to achieve full-speed transmission, because opening a new TCP connection requires gradually increasing the transmission speed.\nIn HTTP/2, after binary framing, HTTP/2 no longer relies on TCP connections to implement multi-stream parallelism. In HTTP/2:\nAll communications under the same domain name are completed on a single connection.\nA single connection can carry an arbitrary number of bidirectional data streams.\nData streams are sent in the form of messages, and messages are composed of one or more frames. Multiple frames can be sent out of order, as they can be reassembled based on the stream identifier in the frame header.\nThis feature greatly improves performance:\nA single domain name only needs to occupy one TCP connection, use one connection to send multiple requests and responses in parallel. In this way, the download process of the entire page resource only needs one slow start, and at the same time, it avoids the problems caused by multiple TCP connections competing for bandwidth.\nMultiple requests/responses are sent in parallel overlap, and they do not affect each other.\nIn HTTP/2, each request can carry a 31-bit priority value, 0 indicates the highest priority, and the larger the value, the lower the priority. With this priority value, clients and servers can adopt different strategies when processing different streams, to send streams, messages, and frames in the most optimal way.\nAs shown above, the technology of multiplexing can transmit all request data through just one TCP connection.\nServer Push\nHTTP2 has to some extent changed the traditional “request-response” working mode. The server is no longer completely passively responding to requests, but can also actively send messages to the client by creating new “streams”. For instance, when the browser just requests HTML, the server may proactively send JS and CSS files that might be used to the client, reducing waiting latency. This is known as “server push” (also called Cache push).\nFor example, as shown in the figure below, the server actively pushes JS and CSS files to the client, without the need for the client to send these requests when parsing HTML.\nFurthermore, it should be noted that while the server can actively push, the client has the right to choose whether to accept it or not. If the resources pushed by the server have already been cached by the browser, the browser can refuse to accept them by sending an RST_STREAM frame. Active pushing also complies with the same-origin policy, in other words, the server cannot arbitrarily push third-party resources to the client, but must be confirmed by both parties.\nEnhanced Security\nFor the consideration of compatibility, HTTP/2 continues the “plaintext” feature of HTTP/1 and can use plaintext to transmit data as before. It doesn’t force the use of encrypted communication; however, the format is still binary, just no decryption is required.\nBut since HTTPS has become the trend, and mainstream browsers such as Chrome and Firefox have publicly announced that they only support the encrypted HTTP/2, so the “de facto” HTTP/2 is encrypted. That is to say, the HTTP/2 that can usually be seen on the Internet all uses the “https” protocol name and runs on TLS. The HTTP/2 protocol defines two string identifiers: “h2” represents encrypted HTTP/2, and “h2c” represents plaintext HTTP/2.\nDrawbacks of HTTP/2 Although HTTP/2 solves many problems of the previous versions, it still has a huge problem, mainly caused by the underlying TCP protocol that it relies on. The main drawbacks of HTTP/2 are as follows:\nDelay in establishing TCP and TCP+TLS connections\nHead-of-line blocking in TCP not completely solved\nServer load increase due to multiplexing\nMultiplexing more prone to timeout\nConnection establishment delay\nHTTP/2 uses the TCP protocol for transmission, and if HTTPS is used, the TLS protocol is required for secure transmission. And using TLS also requires a handshake process, which means there are two handshake delay processes:\n① When establishing a TCP connection, a three-way handshake with the server is needed to confirm the connection is successful, that is, only after 1.5 RTTs can data transmission proceed.\n② When establishing a TLS connection, there are two versions of TLS — TLS1.2 and TLS1.3, each with different connection establishment times, roughly requiring 1~2 RTTs.\nIn summary, before transmitting data, we have to spend 3~4 RTTs.\nRTT (Round-Trip Time):\nThe round-trip time. This is the total delay from the time the sender starts sending data until the sender receives confirmation from the receiver (the receiver immediately sends confirmation after receiving the data).\nTCP Head-of-line blocking not completely solved\nAs we mentioned earlier, multiple requests in HTTP/2 are within one TCP pipe. However, when packet loss occurs, HTTP/2’s performance is actually worse than HTTP/1. Because TCP has a special “packet loss retransmission” mechanism to ensure reliable transmission, the lost packet has to wait for retransmission confirmation. When HTTP/2 experiences packet loss, the entire TCP has to start waiting for retransmission, which will block all requests in that TCP connection (as shown in the figure below). For HTTP/1.1, multiple TCP connections can be opened, so such a situation would only affect one of the connections, and the remaining TCP connections can still transmit data normally.\nRTO: The full English name is Retransmission TimeOut, which is the retransmission timeout time. RTO is a dynamic value and will change with the network. RTO is calculated based on the round-trip time RTT of a given connection. The ack returned by the receiver is the sequence number of the next group of packets the receiver hopes to receive.\nSome might wonder why not directly modify the TCP protocol? In fact, this has become an impossible task. The existence time of TCP is too long, it is already prevalent in various devices, and this protocol is implemented by the operating system, making it unrealistic to update.\nServer Stress Increase due to Multiplexing\nMultiplexing does not limit the number of simultaneous requests. The average number of requests is the same as usual, but there will be many brief bursts of requests, leading to a sudden surge in instantaneous QPS (queries per second).\nMultiplexing more prone to Timeout\nA large number of requests are sent at the same time. Since there are multiple parallel streams within the HTTP2 connection, and the network bandwidth and server resources are limited, the resources of each stream will be diluted. Although their start times are closer, they may all timeout.\nEven using a load balancer like Nginx, it might be tricky to correctly do throttling. Secondly, even if you introduce or adjust the queuing mechanism to the application, the number of connections that can be handled at once is still limited. If requests are queued, you also need to pay attention to discarding requests after the response times out, to avoid wasting unnecessary resources. Reference\nHTTP/3 New Features Introduction to HTTP/3\nGoogle realized these problems when promoting SPDY, so they started up a new oven and created a “QUIC” protocol based on the UDP protocol, allowing HTTP to run on QUIC instead of TCP. This “HTTP over QUIC” is the next major version of the HTTP protocol, HTTP/3. It has achieved a qualitative leap based on HTTP/2 and truly “perfectly” solved the “head-of-line blocking” problem.\nAlthough QUIC is based on UDP, a number of functionalities have been added on top of the original foundation. We will focus on several new QUIC features next. However, HTTP/3 is still at a draft stage at the moment, there may be changes before its official release, so this article will avoid unstable details as much as possible.\nNew Features of QUIC\nAs mentioned earlier, QUIC is based on UDP, which is “connectionless” and doesn’t need “handshakes” and “waves”, making it faster than TCP. In addition, QUIC implements reliable transmission, ensuring that data can indeed reach its destination. It also introduced “streams” and “multiplexing” similar to HTTP/2. A single “stream” is ordered and may block due to packet loss, but other “streams” will not be affected. To be more specific, the QUIC protocol has the following features:\nAchieved similar features to TCP such as flow control and transmission reliability\nAlthough UDP does not provide reliable transmission, QUIC adds a layer on top of UDP to ensure reliable data transmission. It offers packet retransmission, congestion control, and other features found in TCP.\nWhere does the QUIC protocol improve? Mainly in the following aspects:\nPluggable: Different congestion control algorithms can be implemented at the application level.\nMonotonically increasing Packet Number: Packet Number is used instead of TCP’s seq.\nNo Reneging: As long as a Packet is Acked, it is assumed that it has been received correctly.\nForward Error Correction (FEC).\nMore Ack blocks and increased Ack Delay time.\nTraffic control at the stream and connection level.\nImplemented Quick Handshake Feature\nSince QUIC is based on UDP, QUIC offers the use of 0-RTT or 1-RTT to establish a connection, which means QUIC can transmit and receive data at the fastest speed, greatly improving the speed of opening a webpage for the first time. It can be said that 0RTT connection setup is the biggest performance advantage of QUIC compared to HTTP2.\nIntegrated TLS encryption feature\nCurrently, QUIC uses TLS1.3, which offers more advantages compared to its predecessors, the most important of which is reducing the number of RTTs spent on handshakes.\nIn a complete handshake, 1-RTT is required to establish a connection. TLS 1.3 session recovery can directly send encrypted application data, not requiring extra TLS handshake, that is, 0-RTT.\nHowever, TLS1.3 is not perfect. TLS 1.3’s 0-RTT cannot guarantee Forward Secrecy. Simply put, if an attacker somehow obtains the Session Ticket Key, they can decrypt the previous encrypted data.\nTo alleviate this problem, we can set the DH static parameters corresponding to Session Ticket Key to expire in a short time (usually a few hours).\nMultiplexing, completely solving the problem of head-of-line blocking in TCP\nUnlike TCP, QUIC achieves multiple independent logical data streams on the same physical connection (as shown below). By realizing independent data stream transmission, the head-of-line blocking problem in TCP is solved.\nConnection migration\nTCP uses 4 factors (client IP, port, server IP, port) to affirm a connection. But QUIC lets the client generate a Connection ID (64 bits) to distinguish different connections. As long as the Connection ID remains the same, the connection does not need to be reestablished, even if the client’s network changes. As the migrating client continues to use the same session key to encrypt and decrypt packets, QUIC also provides automatic encryption verification for migrating clients.\nConclusion HTTP/1.1 has two major drawbacks: lack of security and poor performance.\nHTTP/2 is completely compatible with HTTP/1 and provides a “more secure HTTP and faster HTTPS”, binary transmission, header compression, multiplexing, server push, etc. These technologies fully utilize the bandwidth and reduce latency, greatly improving the online experience;\nQUIC is implemented based on UDP and forms the underlying support protocol in HTTP/3, This protocol is based on UDP, and also benefits significantly from TCP, resulting in a fast and reliable protocol.\nInterview question: The difference between http2 and http1.1, do you know about http3, please elaborate;\n","date":"2024-02-18T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*YSRCwdfogxl6U71MLyLa1g.png","permalink":"http://localhost:1313/p/interpretation-of-http1/http2/http3/","title":"Interpretation of HTTP1/HTTP2/HTTP3"},{"content":"Preemptive return Suppose we have the following code:\n1 2 3 4 5 if (condition) { doSomething; } else { return; } For such code, we usually use a method called preemptive return to help us get rid of unnecessary else.\n1 2 3 4 5 if (!condition) { return; } doSomething; This method is generally suitable for if\u0026hellip;else statements with a simple branch structure, where we can return early to eliminate some unnecessary if\u0026hellip;else statements.\nEnumeration Enumeration can also be used to get rid of if\u0026hellip;else statements. For example:\n1 2 3 4 5 6 7 8 9 10 11 12 String orderStatusDes; if (\u0026#34;1\u0026#34;.equals(orderStatus)) { orderStatusDes = \u0026#34;The order has not been paid\u0026#34;; } else if (\u0026#34;2\u0026#34;.equals(orderStatus)) { orderStatusDes = \u0026#34;The order has been paid\u0026#34;; } else if (\u0026#34;3\u0026#34;.equals(orderStatus)) { orderStatusDes = \u0026#34;The order has been shipped\u0026#34;; } else if (\u0026#34;4\u0026#34;.equals(orderStatus)) { orderStatusDes = \u0026#34;The order has been received\u0026#34;; } else if (\u0026#34;5\u0026#34;.equals(orderStatus)) { orderStatusDes = \u0026#34;The order has been reviewed\u0026#34;; } You might ask who would write such code? But having been in the business for so long, I still see people with 5 or 6 years of work experience writing this kind of code. This type of code is perfect for enumeration.\nFirst, define an enumeration class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Getter @AllArgsConstructor public enum OrderStatusEnum { UN_PAID(\u0026#34;1\u0026#34;,\u0026#34;The order has not been paid\u0026#34;), PAIDED(\u0026#34;2\u0026#34;,\u0026#34;The order has been paid\u0026#34;), SENDED(\u0026#34;3\u0026#34;,\u0026#34;The order has been shipped\u0026#34;), SINGED(\u0026#34;4\u0026#34;,\u0026#34;The order has been received\u0026#34;), EVALUATED(\u0026#34;5\u0026#34;,\u0026#34;The order has been reviewed\u0026#34;); private String status; private String statusDes; static OrderStatusEnum of(String status) { for (OrderStatusEnum statusEnum : OrderStatusEnum.values()) { if (statusEnum.getStatus().equals(status)) { return statusEnum; } } return null; } } With this enumeration class, the above code can be optimized to one line of code:\n1 String orderStatusDes = OrderStatusEnum.of(orderStatus).getStatusDes(); Optional, used for nonnull judgement In every project, there must be some nonnull judgements. If it is null, you can throw an exception or return.\n1 2 3 4 5 6 Order order = getOrderById(id); if (order == null) { return \u0026#34;-1\u0026#34;; } else { return order.getOrderStatus(); } For such code, we can use Optional to solve this elegantly.\n1 return Optional.ofNullable(order).map(o -\u0026gt; o.getOrderStatus()).orElse(\u0026#34;-1\u0026#34;); Isn’t this way very elegant and has style? Lastly, I’d like to add:\nPreventing NullPointerExceptions (NPE) is a basic discipline for programmers.\nTable-driven method The table-driven method is a way to find information in a table without the need to use too many if…else statements to get them out. For example:\n1 2 3 4 5 6 7 8 9 10 11 if (\u0026#34;code1\u0026#34;.equals(action)) { doAction1(); } else if (\u0026#34;code2\u0026#34;.equals(action)) { doAction2(); } else if (\u0026#34;code3\u0026#34;.equals(action)) { doAction3(); } else if (\u0026#34;code4\u0026#34;.equals(action)) { doAction4(); } else if (\u0026#34;code5\u0026#34;.equals(action)) { doAction5(); } The optimization method is as follows:\n1 2 3 4 5 6 7 8 9 Map\u0026lt;String, Function\u0026lt;?\u0026gt; action\u0026gt; actionMap = new HashMap\u0026lt;\u0026gt;(); action.put(\u0026#34;code1\u0026#34;,() -\u0026gt; {doAction1()}); action.put(\u0026#34;code2\u0026#34;,() -\u0026gt; {doAction2()}); action.put(\u0026#34;code3\u0026#34;,() -\u0026gt; {doAction3()}); action.put(\u0026#34;code4\u0026#34;,() -\u0026gt; {doAction4()}); action.put(\u0026#34;code5\u0026#34;,() -\u0026gt; {doAction5()}); // How to use actionMap.get(action).apply(); Strategy Pattern + Factory Method The combination of Strategy Pattern + Factory Method is commonly used solution to replace if…else, it somewhat resembles the table-driven method above.\nExtract condition blocks into a common interface, or the strategy interface. 1 2 3 public interface ActionService { void doAction(); } Define your own specific strategy implementation classes based on each logic, as follows: 1 2 3 4 5 6 7 8 9 10 11 12 public class ActionService1 implements ActionService{ public void doAction() { //do something } } public class ActionService2 implements ActionService{ public void doAction() { //do something } } // Other strategies omitted Factory class for unified dispatch to manage these strategies, as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public class ActionServiceFactory { private ActionServiceFactory(){ } private static class SingletonHolder{ private static ActionServiceFactory instance=new ActionServiceFactory(); } public static ActionServiceFactory getInstance(){ return SingletonHolder.instance; } private static final Map\u0026lt;String,ActionService\u0026gt; ACTION_SERVICE_MAP = new HashMap\u0026lt;String, ActionService\u0026gt;(); static { ACTION_SERVICE_MAP.put(\u0026#34;action1\u0026#34;,new ActionService1()); ACTION_SERVICE_MAP.put(\u0026#34;action2\u0026#34;,new ActionService2()); ACTION_SERVICE_MAP.put(\u0026#34;action3\u0026#34;,new ActionService3()); ACTION_SERVICE_MAP.put(\u0026#34;action4\u0026#34;,new ActionService4()); ACTION_SERVICE_MAP.put(\u0026#34;action5\u0026#34;,new ActionService5()); } public static ActionService getActionService(String actionCode) { ActionService actionService = ACTION_SERVICE_MAP.get(actionCode); if (actionService == null) { throw new RuntimeException(\u0026#34;非法 actionCode\u0026#34;); } return actionService; } public void doAction(String actionCode) { getActionService(actionCode).doAction(); } } Use the Singleton method to implement factory class. 1 ActionServiceFactory.getInstance().doAction(\u0026#34;action1\u0026#34;); This way is also very elegant and is especially suitable for code blocks with many branches and complex logic. It decouples branch logic and business code, which is a very good solution.\nChain of Responsibility Pattern It’s unexpected that the chain of responsibility pattern can also optimize if…else, right? We can consider the chain of responsibility as a singly linked data structure, each object filters conditions in turn. If the condition meets, it executes and ends. If the condition doesn’t meet, it is passed on to the next node. If none of the objects can handle it, there is generally a final node to handle it uniformly.\nLet’s still take the above example.\nDefine node to handle chain of responsibility requests: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public abstract class ActionHandler { // successor node protected ActionHandler successor; /** * Handle request * @param actionCode */ public void handler(String actionCode) { doHandler(actionCode); } // Set successor node protected ActionHandler setSuccessor(ActionHandler successor) { this.successor = successor; return this; } // Handle request public abstract void doHandler(String actionCode); } Define head and tail nodes for handling exceptions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Head node, judge whether actionCode is empty public class HeadHandler extends ActionHandler{ @Override public void doHandler(String actionCode) { if (StringUtils.isBlank(actionCode)) { throw new RuntimeException(\u0026#34;actionCode cannot be empty\u0026#34;); } successor.doHandler(actionCode); } } // Tail node, directly throws exceptions. Because when it comes to the tail node, it means that the current code has no handler to handle it. public class TailHandler extends ActionHandler{ @Override public void doHandler(String actionCode) { throw new RuntimeException(\u0026#34;The current code[\u0026#34; + actionCode + \u0026#34;] has no specific Handler to handle\u0026#34;); } } Define specific implementation nodes for each node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class ActionHandler1 extends ActionHandler{ @Override public void doHandler(String actionCode) { if (\u0026#34;action1\u0026#34;.equals(actionCode)) { doAction1(); } else { // Pass to the next node successor.doHandler(actionCode); } } } public class ActionHandler2 extends ActionHandler{ @Override public void doHandler(String actionCode) { if (\u0026#34;action2\u0026#34;.equals(actionCode)) { doAction2(); } else { // Pass to the next node successor.doHandler(actionCode); } } } // Other nodes are omitted Define factory to build a complete chain of responsibility and be responsible for the scheduling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public class ActionHandlerFactory { private ActionHandler headHandler; private ActionHandlerFactory(){ headHandler = new HeadHandler(); ActionHandler actionHandler1 = new ActionHandler1(); ActionHandler actionHandler2 = new ActionHandler2(); ActionHandler actionHandler3 = new ActionHandler3(); ActionHandler actionHandler4 = new ActionHandler4(); ActionHandler actionHandler5 = new ActionHandler5(); ActionHandler tailHandler = new TailHandler(); // Build a complete chain of responsibility headHandler.setSuccessor(actionHandler1).setSuccessor(actionHandler2).setSuccessor(actionHandler3). setSuccessor(actionHandler4).setSuccessor(actionHandler5).setSuccessor(tailHandler); } private static class SingletonHolder{ private static ActionHandlerFactory instance=new ActionHandlerFactory(); } public static ActionHandlerFactory getInstance(){ return SingletonHolder.instance; } public void doAction(String actionCode) { headHandler.doHandler(actionCode); } } Usage:\n1 ActionHandlerFactory.getInstance().doAction(\u0026#34;action1\u0026#34;); Function Function is a functional interface in Java 8. With good use of it, we can greatly simplify our code. For example, using it, we can easily get rid of our if…else. Take the following code as an example:\n1 2 3 4 5 6 7 8 9 10 11 // Throw exception if (...) { throw new RuntimeException(\u0026#34;Oops, there\u0026#39;s an exception...\u0026#34;) } // if...else branch if(...) { doSomething1(); } else { doSomething2(); } Now we use Function to handle the above two pieces of code.\nHandle throwing exceptions;\nDefine the functional interface of the form of throwing exceptions:\n1 2 3 4 5 6 7 8 9 @FunctionalInterface public interface ThrowExceptionFunction { /** * Throw exception * @param message */ void throwMessage(String message); } This just requires one such functional interface. Moreover, the method has no return value, which is a consumer interface.\nAdd judgment tool class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class ValidateUtils { /** * Throw exception * @param flag * @return */ public static ThrowExceptionFunction isTrue(Boolean flag) { return (errorMessage) -\u0026gt; { if (flag) { throw new RuntimeException(errorMessage); } }; } } // Usage ValidateUtils.isTrue(flag).throwMessage(\u0026#34;Oops, there\u0026#39;s an exception...\u0026#34;); Here are 7 ways to solve the problem of if…else. I believe there always are one or two solutions that you are quite satisfied with. Different solutions have their own advantages and disadvantages, and their own usage scenarios. We need to constantly comprehend in practice, constantly evolve in refactoring, and summarize the best refactoring solutions suitable for ourselves.\n","date":"2024-02-17T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qGg1oeee8PeRrw6HszxltA.png","permalink":"http://localhost:1313/p/how-to-optimize-ifelse/","title":"How to optimize if…else"},{"content":"As one of the most popular languages, JavaScript’s syntax is flexible and continuously absorbs new features each year. Even seasoned professionals occasionally come across some underestimated JavaScript features and tricks. This article will share these tricks for discussion and exploration.\nUsing flatMap Although some JavaScript methods are barely known, they possess the potential to enhance coding efficiency by resolving unique challenges, such as flatMap().\nThe array method flatMap() is essentially a combination of map() and flat(). The difference is that flatMap can only flatten 1 level, while flat can specify the number of levels to flatten. FlatMap is slightly more efficient than calling these two methods separately.\nUsing flat + map:\n1 2 3 4 5 6 const arr = [1, 2, [4, 5], 6, 7, [8]]; // Use map to operate on each element and use flat to flatten the result const result = arr.map(element =\u0026gt; Array.isArray(element) ? element : [element]).flat(); console.log(result); // output: [1, 2, 4, 5, 6, 7, 8] Using flatMap:\n1 2 3 4 const arr = [1, 2, [4, 5], 6, 7, [8]] ; console.log(arr.flatMap((element) =\u0026gt; element)); // output :[1, 2, 4, 5, 6, 7, 8] Although flatMap is a method, it still generates an intermediate array (which refers to a temporary array created for garbage collection). FlatMap is highly suitable for use in scenarios requiring flexibility and readability.\nArray Method Order javascript has dozens of array methods that can be used in combination. They look something like this:\n1 2 3 4 5 6 7 const numbers = [9, 3, 6, 4, 8, 1, 2, 5, 7]; // Sort only for odd numbers and raise them to the power of 3 numbers .sort((a, b) =\u0026gt; a - b) .filter((n) =\u0026gt; n % 2 !== 0) .map((n) =\u0026gt; n ** 3); The above code looks good, but there is an issue — sorting is done for the array before filtering. If the filtering is done before the sorting, we can accomplish fewer tasks, thereby optimizing the code.\n1 2 3 4 5 6 const numbers = [9, 3, 6, 4, 8, 1, 2, 5, 7]; numbers .filter((n) =\u0026gt; n % 2 !== 0) .sort((a, b) =\u0026gt; a - b) .map((n) =\u0026gt; n ** 3); Make full use of reduce When writing JavaScript, sometimes we need to provide data in a key-value grouping format. Most developers will use the .forEach() method or map() method, similar to this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 fetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/\u0026#34;) .then(res=\u0026gt;res.json()) .then(todos=\u0026gt;{ // using forEach() or Map const todosForUserMap = {}; todos.forEach(todo=\u0026gt;{ if (todosForUserMap[todo.userId]){ todosForUserMap[todo.userId].push(todo); }else{ todosForUserMap[todo.userId] = [todo]; } }) console.log(todosForUserMap) }) Here, it’s better to use forEach rather than the map method, because the map method returns a new array, and the performance overhead of array creation and value assignment is relatively large, especially when the data volume is large, this will not happen in forEach.\nAnother quite clean and readable method is using the reduce method from the array:\n1 2 3 4 5 6 7 8 9 10 11 12 13 fetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/\u0026#34;) .then(res=\u0026gt;res.json()) .then(todos=\u0026gt;{ // using reduce const todosForUserMap = todos.reduce((accumulator, todo)=\u0026gt;{ if (accumulator[todo.userId]) accumulator[todo.userId].push(todo); if (!accumulator[todo.userId]) accumulator[todo.userId] = [todo]; return accumulator; },{}) console.log(todosForUserMap) }) Note how we’re using an empty object {} as the initial value for the reduce operation. This object becomes the new accumulator.\nMake full use of generator Generators and iterators might be the least frequently used code by JavaScript developers, as their knowledge is confined to coding interviews. (Because there’s a better syntax sugar async/await? 😂)\nThe generator is a powerful method to control asynchronous programming, generate iterable objects and multiple values. Generators are different from traditional functions. They can start and stop execution many times. That allows them to generate a lot of values ​​and to continue their execution later, which makes them extremely suitable for managing asynchronous operations, constructing iterators, and dealing with endless data streams.\nImagine a scenario where the amount of data from the database/API might be infinite, and you need to transfer them to the front-end, how would you do it?\nIn this case, the most common solution in react is infinite loading. If it is in node or native JS, how would you implement a function like infinite loading.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 async function *fetchProducts(){ while (true){ const productUrl = \u0026#34;https://fakestoreapi.com/products?limit=2\u0026#34;; const res = await fetch(productUrl) const data = await res.json() yield data; // Update the user interface here // Or save it in a database or elsewhere // Use this for side effects // Interrupt the process if some conditions match } } async function main() { const itr = fetchProducts(); // This should be called based on the user interaction // Or other tricks, because you don\u0026#39;t want it to load indefinitely. console.log( await itr.next() ); } return main() This is where iterators are really useful, instead of streaming a large amount of request data to local storage or some location. This is one of the ways to perform this operation using asynchronous generators, so we can solve the problem of infinite loading in JS.\nMaking Good Use of Console Console is not just about console.log(). In actual production, a well-packaged log library will typically be used. The console object actually has many useful built-in methods, which can help you improve the quality and readability of your debugging output. Mastering them can help you debug and solve problems in your code more easily.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // 1. console.time and console.timeEnd // Measure the time taken to execute a piece of code. Identify performance bottlenecks in the code and optimize them console.time(\u0026#39;Start fetching data\u0026#39;); fetch(\u0026#39;https://reqres.in/api/users\u0026#39;) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { console.timeEnd(\u0026#39;Time spent fetching data:\u0026#39;); // ...code }); // 2. console.dir // The console.dir method outputs the properties of an object in a layered format. It is convenient to view the structure of the object as well as all its properties and methods const promise = new Promise((resolve, reject) =\u0026gt; resolve(\u0026#39;foo\u0026#39;)); console.dir(promise); // 3. console.count // Use the console.count method to count the number of times a specific log message is output. This is very useful for tracking the number of times a specific code path is executed and identifying hotspots in the code const fun = (x) =\u0026gt; console.count(x); fun(\u0026#39;Keqing\u0026#39;); // 1 fun(\u0026#39;Ganyu\u0026#39;); // 1 fun(\u0026#39;Keqing\u0026#39;); // 2 // 4. console.trace // trace can output stack traces. It is very useful for understanding the execution flow in the code and identifying the source of a specific log message const foo = () =\u0026gt; console.trace(); const bar = () =\u0026gt; foo(); bar(); // 5. console.profile profileEnd // Measure the performance of a block of code. This is very useful for identifying performance bottlenecks and optimizing code to improve speed and efficiency. console.profile(\u0026#39;MyProfile\u0026#39;); // Code you want to measure performance on for (let i = 0; i \u0026lt; 100000; i++) { // ...code } console.profileEnd(\u0026#39;MyProfile\u0026#39;); Deep Copy with structuredClone() Previously, if a developer wanted to do a deep copy of an object, they usually had to rely on a third-party library or manually implement a deep copy, or adopt a hack like const cloneObj = JSON.parse(JSON.stringify(obj));. But it had a lot of shortcomings when dealing with more complex objects containing circular references or data types that don\u0026rsquo;t conform to JSON (such as Map and Set, Blob, etc.)\nNow, JavaScript has a built-in method called structuredClone(). This method provides a simple and effective way to deep clone objects and is suitable for most modern browsers and Node.js v17 and above.\n1 2 3 4 5 6 7 // Pass the original object to this function and it will return a deep copy with different references and object attribute references const obj = { name: \u0026#39;Mike\u0026#39;, friends: [{ name: \u0026#39;Sam\u0026#39; }] }; const clonedObj = structuredClone(obj); console.log(obj.name === clonedObj); // false console.log(obj.friends === clonedObj.friends); // false Unlike the well-known JSON.parse(JSON.stringify()), structuredClone() allows you to clone circular references, which makes it the simplest method to use deep copy in JavaScript currently.\nTagged Templates Tagged Templates is a more advanced form of template strings (backticks) that allows you to parse template literals using functions.\nI only learned about this advanced feature when Next.js 14 was released and people were talking about a certain picture🫡. Although this feature was included in ES6 and has been around for 8 years!!! But I bet there are only a handful of people who know and have used this feature.\nIf you don’t understand how Tagged Templates work, let me briefly explain it with an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const checkCurrency = function (currency, amount) { const symbol = currency[0] === \u0026#34;USD\u0026#34; ? \u0026#34;$\u0026#34; : \u0026#34;¥\u0026#34;; console.log(currency[0], \u0026#34;--\u0026#34; ,currency[1])// Outputs: USD -- RMB return `${symbol}${amount}`; }; const amount = 200; const currency = checkCurrency`USD${amount}RMB`; console.log(currency); // Outputs: $200 // 1. checkCurrency is a function, the first argument currency of the tagged function contains an array of string values // 2. The array of strings is composed of the strings in the tagged template in`USD${amount}RMB`, which contains the strings USD and RMB // 3. So currency[0] refers to the first string USD, and currency[1] corresponds to the second string RMB // 4. The remaining arguments of the checkCurrency function are then inserted directly into the strings according to the respective expressions, such as amount = 200 // 5. Inside the checkCurrency function, it checks if the first item of the argument array is \u0026#39;USD\u0026#39;, if so, it selects the \u0026#34;$\u0026#34; symbol, otherwise it chooses \u0026#34;¥\u0026#34;. // 6. The function internally concatenates symbol and amount to return a new string, with symbol representing the currency symbol and amount referring to the money passed to the function. // 7. The returned string is assigned to the currency constant, so the log is $200 As you can see, the way Tagged Templates work is to pass all the strings in the template string to the first argument of the function as an array. The remaining arguments are then inserted directly into the strings according to the respective expressions. Tagged Templates pass literal strings and the results of expressions to the function, and then the function can operate and return them in a custom way. This allows developers to appropriately escape and verify inputs when building SQL queries, thus preventing SQL injection attacks.\nTagged template strings can be used for many purposes, such as security, i18n, and localization, etc.\nNullish Coalescing Operator?? The Nullish Coalescing Operator ?? is a logical operator that returns its right-hand operand when its left-hand operand is null or undefined, otherwise, it returns its left-hand operand.\n1 2 3 4 5 const foo = null ?? \u0026#39;default string\u0026#39;; console.log(foo); //output: \u0026#34;default string\u0026#34; const bar = 0 ?? \u0026#39;default string\u0026#39; console.log(bar); //output: 0 What’s worth mentioning about this? Is not || enough? Because one question that may confuse many people when learning JS is the difference between false and falsy, and the main difference between ?? and || lies in\n?? operator only returns its right-hand operand if the left-hand operand is null or undefined. || operator treats all falsy values ​​of its left operand’s result as its right operand. Here are some examples:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 1. Using 0 as input const a = 0; console.log(`a || 10 = ${a || 10}`); // a || 10 = 10 console.log(`a ?? 10 = ${a ?? 10}`); // a ?? 10 = 0 // 2. Using an empty string \u0026#39;\u0026#39; as input const a = \u0026#39;\u0026#39; console.log(`a || \u0026#34;ABC\u0026#34; = ${a || \u0026#34;ABC\u0026#34;}`); // a || \u0026#34;ABC\u0026#34; = ABC console.log(`a ?? \u0026#34;ABC\u0026#34; = ${a ?? \u0026#34;ABC\u0026#34;}`); // a ?? \u0026#34;ABC\u0026#34; = // 3. Using null as input const a = null; console.log(`a || 10 = ${a || 10}`); // a || 10 = 10v console.log(`a ?? 10 = ${a ?? 10}`); // a ?? 10 = 10 // 4. Using undefined as input const a = {name: \u0026#39;\u0026#39;} console.log(`a.name ?? \u0026#39;varun 1\u0026#39; = ${a.name ?? \u0026#39;varun 1\u0026#39;}`); console.log(`a.name || \u0026#39;varun 2\u0026#39; = ${a.name || \u0026#39;varun 2\u0026#39;}`); // a.name ?? \u0026#39;varun 1\u0026#39; = // a.name || \u0026#39;varun 2\u0026#39; = varun 2 // 5. Using false as input const a = false; console.log(`a || 10 = ${a || 10}`); // a || 10 = 10 console.log(`a ?? 10 = ${a ?? 10}`); // a ?? 10 = false For JS’s falsy value judgement, you can refer to this table: JavaScript-Equality-Table/.\nUse Symbols as Keys in WeakMap WeakMap is very similar to Map, but the difference is that its keys can only be objects or symbols, which are stored as weak references.\nWhy? Because the keys of a WeakMap must be garbage collectable. Most primitive data types can be freely created and have no lifecycle, so they can’t be used as keys. Objects and non-registered symbols can be used as keys because they can be garbage collected — MDN- WeakMap.\nThis feature means that if there are no other references to the object in memory except for the key, JavaScript engine can perform garbage collection on the object when needed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Map let user = { name: \u0026#34;User\u0026#34; }; let map = new Map(); map.set(user, \u0026#34;Ketching\u0026#34;); user = null; // Overwrite the reference by setting to null, \u0026#39;user\u0026#39; is stored internally in the map, which can be accessed through map.keys() // WeakMap let user = { name: \u0026#34;User\u0026#34; }; let weakMap = new WeakMap(); weakMap.set(user, \u0026#34;Ganyu\u0026#34;); user = null; // With WeakMap, \u0026#39;user\u0026#39; has been deleted from memory So, what is the use of a WeakMap? Given its characteristics, it can be inferred that WeakMap can be used for custom caching and detecting memory leaks.\nBy using objects as keys, you can associate cached values with specific objects. When the object is garbage collected, the corresponding WeakMap entry will be automatically deleted, immediately clearing the cache.\nIn ES14, it has become possible to use symbols as keys in WeakMap, which can make the role of key-value pairs in WeakMap more clear. Because the only primitive type that can be used as keys in WeakMap is the symbol, the symbol guarantees that the key is unique and cannot be recreated.\n1 2 3 4 5 6 7 8 9 10 11 let mySymbol = Symbol(\u0026#39;mySymbol\u0026#39;); let myWeakMap = new WeakMap(); let obj = { name: \u0026#39;Frontend Kitten Writer\u0026#39; }; myWeakMap.set(mySymbol, obj); console.log(myWeakMap.get(mySymbol)); // Output: {name: \u0026#39;Frontend Kitten Writer\u0026#39;} Functional Programming Since 2015, JavaScript versions have been updated, and this year (2023 ES14) is no exception.\nThe biggest update in ES14 is that many extra array methods have been added, or complementary methods that don’t cause mutation have been added to the existing array methods. That means they’ll create new arrays based on the original ones rather than directly modifying the original arrays.\nThe new complementary methods are:\nArray.sort() -\u0026gt; Array.toSorted()\nArray.splice() -\u0026gt; Array.toSpliced()\nArray.reverse() -\u0026gt; Array.toReversed()\nThe new array methods are:\nArray with()\nArray.findLast()\nArray.findLastIndex()\nThe key theme of this year is Simpler Functional Programming (fp) and Immutability.\n1 2 3 4 5 6 // For example, with Array.with(), you had to modify a value of an array with arr[2] = 3; // This causes a mutation. This is impure! Angry💢 But with the new array methods that don\u0026#39;t cause mutations, you can write it like this: const arr = [5, 4, 7, 2, 1]; const replaced = arr.with(2, 3); console.log(replaced); // [5, 4, 3, 2, 1] ","date":"2024-02-16T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ESMQv6s2ta9iDO9H3ChVlg.png","permalink":"http://localhost:1313/p/10-javascript-tricks-you-dont-know/","title":"10 JavaScript Tricks You Don’t Know"},{"content":"Preamble Design patterns can be broadly classified into three types:\nCreation patterns: Factory Method Pattern, Abstract Factory Pattern, Singleton Pattern, Builder Pattern, Prototype Pattern.\nStructural patterns: Adapter Pattern, Decorator Pattern, Proxy Pattern, Facade Pattern, Bridge Pattern, Composite Pattern, Flyweight Pattern.\nBehavioral patterns: Strategy Pattern, Template Method Pattern, Observer Pattern, Iterator Pattern, Chain of Responsibility Pattern, Command Pattern, Memento Pattern, State Pattern, Visitor Pattern, Mediator Pattern, Interpreter Pattern.\nFactory Method Pattern The factory method pattern defines an interface for creating objects, but it’s up to the subclass to decide which class to instantiate. It separates the creation and use of the objects, making the system more flexible. Here is a code example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // Define an abstract class class Animal { speak() { throw new Error(\u0026#39;This method must be implemented.\u0026#39;); } } // Implement specific classes class Dog extends Animal { speak() { return \u0026#39;Woof!\u0026#39;; } } class Cat extends Animal { speak() { return \u0026#39;Meow!\u0026#39;; } } // Implement factory method class AnimalFactory { createAnimal(animalType) { switch(animalType) { case \u0026#39;dog\u0026#39;: return new Dog(); case \u0026#39;cat\u0026#39;: return new Cat(); default: throw new Error(`Invalid animal type: ${animalType}`); } } } // Use factory method to create objects const animalFactory = new AnimalFactory(); const dog = animalFactory.createAnimal(\u0026#39;dog\u0026#39;); console.log(dog.speak()); // Output: Woof! const cat = animalFactory.createAnimal(\u0026#39;cat\u0026#39;); console.log(cat.speak()); // Output: Meow! Singleton Pattern The purpose of the Singleton Pattern is to ensure a class has only one instance and to provide a global access point to it. Here’s a code sample:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Logger { constructor() { if (!Logger.instance) { this.logs = []; Logger.instance = this; } return Logger.instance; } log(message) { this.logs.push(message); console.log(`Logger: ${message}`); } printLogCount() { console.log(`Number of logs: ${this.logs.length}`); } } // A global variable can be used to access an instance const logger = new Logger(); Object.freeze(logger); // The output should be the same for each instance logger.log(\u0026#39;First message\u0026#39;); // Output: Logger: First message logger.printLogCount(); // Output: Number of logs: 1 const anotherLogger = new Logger(); // At this point, returns an existing instance anotherLogger.log(\u0026#39;Second message\u0026#39;); // Output: Logger: Second message anotherLogger.printLogCount(); // Output: Number of logs: 2 Builder Pattern The Builder Pattern is a design pattern that is used to construct an object step by step and is generally used to construct complex objects. Here’s a code sample:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // Create Product class class Sandwich { constructor() { this.ingredients = []; } addIngredient(ingredient) { this.ingredients.push(ingredient); } toString() { return this.ingredients.join(\u0026#39;, \u0026#39;); } } // Create a builder class class SandwichBuilder { constructor() { this.sandwich = new Sandwich(); } reset() { this.sandwich = new Sandwich(); } putMeat(meat) { this.sandwich.addIngredient(meat); } putCheese(cheese) { this.sandwich.addIngredient(cheese); } putVegetables(vegetables) { this.sandwich.addIngredient(vegetables); } get result() { return this.sandwich; } } // Create a builder for user (director) to use class SandwichMaker { constructor() { this.builder = new SandwichBuilder(); } createCheeseSteakSandwich() { this.builder.reset(); this.builder.putMeat(\u0026#39;ribeye steak\u0026#39;); this.builder.putCheese(\u0026#39;american cheese\u0026#39;); this.builder.putVegetables([\u0026#39;peppers\u0026#39;, \u0026#39;onions\u0026#39;]); return this.builder.result; } } // Build a Sandwich const sandwichMaker = new SandwichMaker(); const sandwich = sandwichMaker.createCheeseSteakSandwich(); console.log(`Your sandwich: ${sandwich}`); // Output: Your sandwich: ribeye steak, american cheese, peppers, onions Prototype Pattern The Prototype Pattern is a creational design pattern, which can be used when the cost of creating objects is relatively expensive but objects with the same properties can be created by cloning. The Prototype Pattern separates the process of creating objects from the process of using these objects, as it creates new objects by cloning existing ones, thus avoiding costly object creation. Because JavaScript natively supports object cloning (i.e., copying), implementing the Prototype Pattern in JavaScript is relatively simple.\nHere is a code sample of the Prototype Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Create a prototype object const carPrototype = { wheels: 4, color: \u0026#39;red\u0026#39;, start() { console.log(\u0026#39;Starting the car...\u0026#39;); }, stop() { console.log(\u0026#39;Stopping the car...\u0026#39;); }, }; // Clone with Object.create() method const car1 = Object.create(carPrototype); console.log(car1); // Output: {} car1.wheels = 6; console.log(car1.wheels); // Output: 6 console.log(car1.color); // Output: red car1.start(); // Output: Starting the car... car1.stop(); // Output: Stopping the car... // Clone another object const car2 = Object.create(carPrototype); console.log(car2); // Output: {} car2.color = \u0026#39;blue\u0026#39;; console.log(car2.color); // Output: blue console.log(car2.wheels); // Output: 4 car2.start(); // Output: Starting the car... car2.stop(); // Output: Stopping the car... In this example, we created a prototype object called carPrototype. Then we cloned this prototype object using the Object.create() method. As we performed a shallow copy, we can modify the object’s properties before using it and car2 and car1 objects’ start() and stop() methods are the same because they come from the same prototype object.\nThe Prototype Pattern has the advantage of providing a convenient way to create objects with the same properties. It can reduce duplicate code and save time and resources when creating objects. However, it also has some disadvantages. For example, deep copying might cause unexpected problems because all properties are copied and these properties may also refer to other objects.\nAdapter Pattern The Adapter Pattern is a structural design pattern that allows incompatible objects to be wrapped in an adapter, making them work together. Here’s a code sample of the Adapter Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Target interface class Target { request() { console.log(\u0026#39;Target: request has been called\u0026#39;); } } // The class that needs to be adapted class Adaptee { specificRequest() { console.log(\u0026#39;Adaptee method has been accessed\u0026#39;); } } // Adapter class, transforming Adaptee to Target class Adapter extends Target { constructor(adaptee) { super(); this.adaptee = adaptee; } request() { this.adaptee.specificRequest(); } } // Use adapter to decouple client from Adaptee const client = new Adapter(new Adaptee()); client.request(); // Output: Adaptee method has been accessed In the code above, we have a target interface Target and a class Adaptee that needs to be adapted. We created an adapter class Adapter to transform Adaptee to Target and used the adapter to communicate with the client, which calls the request() method, thereby implementing the functionality of Adaptee.\nProxy Pattern The Proxy Pattern is a structural design pattern that provides a placeholder or proxy for an object when accessing it, thus offering control over the access to the object. Here’s a code sample of the Proxy Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // Subject interface class Subject { request() { console.log(\u0026#39;Subject: Handling request\u0026#39;); } } // Real Subject class class RealSubject extends Subject { request() { console.log(\u0026#39;RealSubject: Handling request\u0026#39;); } } // Proxy class class Proxy extends Subject { constructor(realSubject) { super(); this.realSubject = realSubject; } request() { if (this.checkAccess()) { this.realSubject.request(); this.logAccess(); } } checkAccess() { console.log(\u0026#39;Proxy: Checking access rights\u0026#39;); return true; } logAccess() { console.log(\u0026#39;Proxy: Logging access\u0026#39;); } } // Accessing the real object using proxy const realSubject = new RealSubject(); const proxy = new Proxy(realSubject); proxy.request(); In the code above, we have a subject interface Subject and a real subject class RealSubject. We created a proxy class Proxy that encapsulates a real subject and offers additional functionality when accessing it, such as checking access rights and logging access. By instantiating the RealSubject class and wrapping it in a Proxy class, we access the real subject object through the proxy.\nFacade Pattern The Facade Pattern is a structural design pattern that provides a simpler interface for a set of complex subsystems. Here’s a code sample of the Facade Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Subsystem1 class Subsystem1 { operation1() { console.log(\u0026#39;Subsystem1: Perform operation1\u0026#39;); } } // Subsystem2 class Subsystem2 { operation2() { console.log(\u0026#39;Subsystem2: Perform operation2\u0026#39;); } } // Facade class class Facade { constructor() { this.subsystem1 = new Subsystem1(); this.subsystem2 = new Subsystem2(); } operation() { this.subsystem1.operation1(); this.subsystem2.operation2(); } } // Client code const facade = new Facade(); facade.operation(); // Output: Subsystem1: Perform operation1, Subsystem2: Perform operation2 In the code above, we have two subsystems Subsystem1 and Subsystem2, both of which provide complex operations. We created a “Facade” class using the Facade Pattern, which provides a simple interface by combining the operations of Subsystem1 and Subsystem2 objects. Finally, we instantiate the Facade class and call the operation() method to complete the complex functional operation.\nBridge Pattern The Bridge Pattern is a structural design pattern that separates an object’s abstraction from its implementation, allowing the two to vary independently. Here’s a code sample of the Bridge Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Implementor interface class Implementor { operationImpl() { console.log(\u0026#39;Implementor: Perform operation\u0026#39;); } } // Abstract class class Abstraction { constructor(implementor) { this.implementor = implementor; } operation() { this.implementor.operationImpl(); } } // Extended Abstract class class RefinedAbstraction extends Abstraction { otherOperation() { console.log(\u0026#39;RefinedAbstraction: Other operation\u0026#39;); } } // Utilizing the Bridge Pattern const implementor = new Implementor(); const abstraction = new Abstraction(implementor); abstraction.operation(); // Output: Implementor: Perform operation const refinedAbstraction = new RefinedAbstraction(implementor); refinedAbstraction.operation(); // Output: Implementor: Perform operation refinedAbstraction.otherOperation(); // Output: RefinedAbstraction: Other operation In the code above, we have an Implementor interface and an abstract class — Abstraction. By creating an extended abstract class, RefinedAbstraction, to extend the functionality of the abstract class, we are utilizing an instance object of the Implementor interface. We then instantiate Implementor and create two objects with different behaviors by passing the “Implementor” object in the declarations of the Abstraction and RefinedAbstraction classes. By separating the implementation from the abstraction, we can freely combine the implementation with the abstraction, making it easier to extend.\nComposite Pattern The Composite Pattern is a structural design pattern that uses a tree structure to represent the part-whole hierarchy of objects, allowing users to handle individual objects and combinations of objects in a uniform way. Here’s a code sample of the Composite Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // Abstract Component class Component { constructor(name) { this.name = name; } operation() { console.log(`Component ${this.name}: Perform operation`); } add(component) { console.log(\u0026#39;Component: Unsupported operation\u0026#39;); } remove(component) { console.log(\u0026#39;Component: Unsupported operation\u0026#39;); } getChild(index) { console.log(\u0026#39;Component: Unsupported operation\u0026#39;); } } // Leaf Node class Leaf extends Component { constructor(name) { super(name); } } // Branch Node class Composite extends Component { constructor(name) { super(name); this.children = []; } add(component) { this.children.push(component); } remove(component) { const index = this.children.indexOf(component); if (index \u0026gt;= 0) { this.children.splice(index, 1); } } getChild(index) { return this.children[index]; } } // Using the Composite Pattern const root = new Composite(\u0026#39;Root\u0026#39;); const branch1 = new Composite(\u0026#39;Branch1\u0026#39;); const branch2 = new Composite(\u0026#39;Branch2\u0026#39;); const leaf1 = new Leaf(\u0026#39;Leaf1\u0026#39;); const leaf2 = new Leaf(\u0026#39;Leaf2\u0026#39;); const leaf3 = new Leaf(\u0026#39;Leaf3\u0026#39;); root.add(branch1); root.add(branch2); branch1.add(leaf1); branch1.add(leaf2); branch2.add(leaf3); root.operation(); // Output: Component Root: Perform operation branch1.operation(); // Output: Component Branch1: Perform operation branch1.remove(leaf2); branch2.operation(); // Output: Component Branch2: Perform operation root.getChild(0).operation(); // Output: Component Branch1: Perform operation In the code above, we have an abstract component Component, and we extended the functionality of the abstract component by creating two concrete components: Leaf and Composite. Composite holds an array of child objects and implemented the ability to include other components. We then used all these components to build a tree structure model. The parent node model is a Component object, whereas child nodes can be Component objects or Composite objects. Finally, we can perform operations by calling the operation method.\nlyweight Pattern The Flyweight Pattern is a structural design pattern that minimizes memory usage and the number of class instances by sharing objects. Here’s a code sample of the Flyweight Pattern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Flyweight factory class class FlyweightFactory { constructor() { this.flyweights = {}; } getFlyweight(key) { if (!this.flyweights[key]) { this.flyweights[key] = new ConcreteFlyweight(key); } return this.flyweights[key]; } } // Concrete Flyweight class class ConcreteFlyweight { constructor(key) { this.key = key; } operation() { console.log(`ConcreteFlyweight ${this.key}: Perform operation`); } } // Utilizing the Flyweight Pattern const factory = new FlyweightFactory(); const flyweight1 = factory.getFlyweight(\u0026#39;key\u0026#39;); const flyweight2 = factory.getFlyweight(\u0026#39;key\u0026#39;); flyweight1.operation(); // Output: ConcreteFlyweight key: Perform operation flyweight2.operation(); // Output: ConcreteFlyweight key: Perform operation console.log(flyweight1 === flyweight2); // Output: true In the code above, we have a Flyweight factory class FlyweightFactory, used to create and manage the shared ConcreteFlyweight objects. Objects of ConcreteFlyweight contain data or states that need to be shared. We instantiate the FlyweightFactory, get objects through the getFlyweight() method of the FlyweightFactory, and verify whether the same object is shared among multiple objects. Ultimately, it’s demonstrated that flyweight1 and flyweight2 point to the same object, thereby upholding the concept of shared objects.\nStrategy Pattern The Strategy Pattern is a design pattern that defines a series of algorithms and encapsulates each one, making them interchangeable. The Strategy Pattern allows the algorithm to change independently of the client that uses it. This pattern is a behavioral pattern. Here’s the sample code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Strategy { constructor(name) { this.name = name; } execute() {} } class StrategyA extends Strategy { execute() { console.log(\u0026#39;Executing strategy A\u0026#39;); } } class StrategyB extends Strategy { execute() { console.log(\u0026#39;Executing strategy B\u0026#39;); } } class Context { constructor(strategy) { this.strategy = strategy; } executeStrategy() { this.strategy.execute(); } } let context = new Context(new StrategyA(\u0026#39;A\u0026#39;)); context.executeStrategy(); // Executing strategy A context.strategy = new StrategyB(\u0026#39;B\u0026#39;); context.executeStrategy(); // Executing strategy B Template Method Pattern The Template Method Pattern is a behavioral design pattern. It defines the skeleton of an algorithm in an operation and delays some steps to subclasses. The Template Method Pattern allows a subclass to redefine certain steps of an algorithm without changing the algorithm’s structure.\nSample code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Game { setup() {} start() { this.setup(); this.play(); this.finish(); } play() {} finish() {} } class Chess extends Game { setup() { console.log(\u0026#39;Setting up chess game\u0026#39;); } play() { console.log(\u0026#39;Playing chess\u0026#39;); } finish() { console.log(\u0026#39;Finishing chess game\u0026#39;); } } class TicTacToe extends Game { setup() { console.log(\u0026#39;Setting up TicTacToe game\u0026#39;); } play() { console.log(\u0026#39;Playing TicTacToe\u0026#39;); } finish() { console.log(\u0026#39;Finishing TicTacToe game\u0026#39;); } } let game = new Chess(); game.start(); game = new TicTacToe(); game.start(); Observer Pattern The Observer Pattern is a behavioral design pattern in which a one-to-many dependency exists between objects. When the state of an object changes, all its dependents get notified and automatically updated. The Observer pattern decouples relationships between objects, allowing them to change independently.\nSample code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Subject { constructor() { this.observers = []; } attach(observer) { this.observers.push(observer); } detach(observer) { const index = this.observers.indexOf(observer); if (index \u0026gt; -1) { this.observers.splice(index, 1); } } notify() { for(const observer of this.observers) { observer.update(this); } } } class Observer { update(subject) {} } class ConcreteSubject extends Subject { constructor(state) { super(); this.state = state; } set_state(state) { this.state = state; this.notify(); } get_state() { return this.state; } } class ConcreteObserver extends Observer { update(subject) { console.log(`Got updated value: ${subject.get_state()}`); } } let subject = new ConcreteSubject(\u0026#39;initial state\u0026#39;); let observer = new ConcreteObserver(); subject.attach(observer); subject.set_state(\u0026#39;new state\u0026#39;); Iterator Pattern The Iterator Pattern is a behavioral design pattern that provides a way to access the elements of a collection object in sequence. The Iterator Pattern delegates the responsibility of traversing the collection to the iterator instead of the collection itself. This allows for the implementation of the collection and the traversal algorithm to be decoupled, providing better flexibility.\nSample code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Iterator { constructor(items) { this.items = items; this.cursor = 0; } has_next() { return this.cursor \u0026lt; this.items.length; } next() { const item = this.items[this.cursor]; this.cursor += 1; return item; } } class Collection { constructor() { this.items = []; } add_item(item) { this.items.push(item); } iterator() { return new Iterator(this.items); } } const collection = new Collection(); collection.add_item(\u0026#39;item 1\u0026#39;); collection.add_item(\u0026#39;item 2\u0026#39;); collection.add_item(\u0026#39;item 3\u0026#39;); const iterator = collection.iterator(); while(iterator.has_next()) { console.log(iterator.next()); } Chain of Responsibility Pattern The Chain of Responsibility Pattern is a behavioral design pattern. It allows multiple objects to have a chance to handle requests, thus avoiding coupling the sender and receiver of the request. These objects are linked into a chain, and the request is passed along this chain until one object handles it.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class Handler { constructor() { this.nextHandler = null; } setNextHandler(handler) { this.nextHandler = handler; } handleRequest(request) { if (this.nextHandler !== null) { return this.nextHandler.handleRequest(request); } return null; } } class ConcreteHandlerA extends Handler { handleRequest(request) { if (request === \u0026#39;A\u0026#39;) { return `Handle Request ${request}`; } return super.handleRequest(request); } } class ConcreteHandlerB extends Handler { handleRequest(request) { if (request === \u0026#39;B\u0026#39;) { return `Handle Request ${request}`; } return super.handleRequest(request); } } class ConcreteHandlerC extends Handler { handleRequest(request) { if (request === \u0026#39;C\u0026#39;) { return `Handle Request ${request}`; } return super.handleRequest(request); } } const handlerA = new ConcreteHandlerA(); const handlerB = new ConcreteHandlerB(); const handlerC = new ConcreteHandlerC(); handlerA.setNextHandler(handlerB); handlerB.setNextHandler(handlerC); console.log(handlerA.handleRequest(\u0026#39;A\u0026#39;)); // Handle Request A console.log(handlerA.handleRequest(\u0026#39;B\u0026#39;)); // Handle Request B console.log(handlerA.handleRequest(\u0026#39;C\u0026#39;)); // Handle Request C console.log(handlerA.handleRequest(\u0026#39;D\u0026#39;)); // null Command Pattern The Command Pattern is a behavioral design pattern that encapsulates a request or operation into an object, thus allowing you to decouple the initiator of the request or operation from the specific executor. Command Pattern can parameterize requests or operations, even dynamically combining commands at runtime.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Command { constructor(receiver) { this.receiver = receiver; } execute() { throw new Error(\u0026#39;You have to implement the method execute!\u0026#39;); } } class ConcreteCommandA extends Command { execute() { this.receiver.actionA(); } } class ConcreteCommandB extends Command { execute() { this.receiver.actionB(); } } class Receiver { actionA() { console.log(\u0026#39;Receiver Action A.\u0026#39;); } actionB() { console.log(\u0026#39;Receiver Action B.\u0026#39;); } } class Invoker { constructor() { this.commands = new Map(); } setCommand(key, command) { this.commands.set(key, command); } executeCommand(key) { const command = this.commands.get(key); if (!command) { console.log(`Command ${key} is not found.`); return; } command.execute(); } } const receiver = new Receiver(); const invoker = new Invoker(); invoker.setCommand(\u0026#39;A\u0026#39;, new ConcreteCommandA(receiver)); invoker.setCommand(\u0026#39;B\u0026#39;, new ConcreteCommandB(receiver)); invoker.executeCommand(\u0026#39;A\u0026#39;); // Receiver Action A. invoker.executeCommand(\u0026#39;B\u0026#39;); // Receiver Action B. Memento Pattern The Memento Pattern is a behavioral design pattern that allows you to save and restore an object’s state without exposing the details of the object’s implementation. The Memento Pattern involves three roles: Memento, Originator, and Caretaker.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class Memento { constructor(state) { this.state = state; } getState() { return this.state; } } class Originator { constructor(state) { this.state = state; } setState(state) { this.state = state; } createMemento() { return new Memento(this.state); } restoreMemento(memento) { this.state = memento.getState(); } getState() { return this.state; } } class Caretaker { constructor() { this.mementos = []; } addMemento(memento) { this.mementos.push(memento); } getMemento(index) { return this.mementos[index]; } } const originator = new Originator(\u0026#39;State A\u0026#39;); const caretaker = new Caretaker(); // Save state caretaker.addMemento(originator.createMemento()); // change state originator.setState(\u0026#39;State B\u0026#39;); console.log(`Current State: ${originator.getState()}`); // Restore state originator.restoreMemento(caretaker.getMemento(0)); console.log(`Current State: ${originator.getState()}`); State Pattern The State Pattern is a behavioral design pattern that allows an object to change its behavior when its internal state changes. The State Pattern encapsulates each state into a class, making any operations for that state can be handled within that class. This allows the state transition code to be abstracted from the main business logic, avoiding a large number of if-else statements.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Context { constructor() { this.state = new ConcreteStateA(this); } setState(state) { this.state = state; } request() { this.state.handle(); } } class State { constructor(context) { this.context = context; } handle() { throw new Error(\u0026#39;You have to implement the method handle!\u0026#39;); } } class ConcreteStateA extends State { handle() { console.log(\u0026#39;Handle State A\u0026#39;); this.context.setState(new ConcreteStateB(this.context)); } } class ConcreteStateB extends State { handle() { console.log(\u0026#39;Handle State B\u0026#39;); this.context.setState(new ConcreteStateA(this.context)); } } const context = new Context(); context.request(); // Handle State A context.request(); // Handle State B context.request(); // Handle State A Visitor Pattern The Visitor Pattern is a behavioral design pattern that allows you to encapsulate an algorithm in one or more visitor classes, allowing you to define new operations that act on these elements without changing the interfaces of each element class.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Element { accept(visitor) { throw new Error(\u0026#39;You have to implement the method accept!\u0026#39;); } } class ConcreteElementA extends Element { accept(visitor) { visitor.visitConcreteElementA(this); } operationA() { console.log(\u0026#39;Operation A of Concrete Element A.\u0026#39;); } } class ConcreteElementB extends Element { accept(visitor) { visitor.visitConcreteElementB(this); } operationB() { console.log(\u0026#39;Operation B of Concrete Element B.\u0026#39;); } } class Visitor { visitConcreteElementA(element) { console.log(`Visit Concrete Element A with ${element.operationA()}`); } visitConcreteElementB(element) { console.log(`Visit Concrete Element B with ${element.operationB()}`); } } const elementA = new ConcreteElementA(); const elementB = new ConcreteElementB(); const visitor = new Visitor(); elementA.accept(visitor); elementB.accept(visitor); Mediator Pattern The Mediator Pattern is a behavioral design pattern that allows you to reduce direct dependencies between components by having them interact through a mediator. By avoiding explicit referencing each other between components, the mediator would allow components to be more easily reused.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Mediator { constructor() { this.components = new Set(); } register(component) { component.mediator = this; this.components.add(component); } notify(sender, event) { this.components.forEach((component) =\u0026gt; { if (component !== sender) { component.receive(sender, event); } }); } } class Component { constructor(name) { this.name = name; this.mediator = null; } send(event) { console.log(`Send event ${event} from ${this.name}`); this.mediator.notify(this, event); } receive(sender, event) { console.log(`Receive event ${event} from ${sender.name} by ${this.name}`); } } const mediator = new Mediator(); const componentA = new Component(\u0026#39;Component A\u0026#39;); const componentB = new Component(\u0026#39;Component B\u0026#39;); const componentC = new Component(\u0026#39;Component C\u0026#39;); mediator.register(componentA); mediator.register(componentB); mediator.register(componentC); componentA.send(\u0026#39;Hello\u0026#39;); //Send event Hello from Component A, Receive event Hello from Component A by Component B, Receive event Hello from Component A by Component C nterpreter Pattern The Interpreter Pattern is a behavioral design pattern that can represent the grammar of a language (typically a programming language) or expression as a parse tree, and define an interpreter to interpret this language or expression.\nImplementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class Context { constructor(input) { this.input = input; this.output = 0; } } class Expression { interpreter(context) { throw new Error(\u0026#39;You have to implement the method interpreter!\u0026#39;); } } class ThousandExpression extends Expression { interpreter(context) { const str = context.input; if (str.startsWith(\u0026#39;M\u0026#39;)) { context.output += 1000; context.input = str.slice(1); } } } class HundredExpression extends Expression { interpreter(context) { const str = context.input; if (str.startsWith(\u0026#39;C\u0026#39;)) { context.output += 100; context.input = str.slice(1); } else if (str.startsWith(\u0026#39;CD\u0026#39;)) { context.output += 400; context.input = str.slice(2); } else if (str.startsWith(\u0026#39;CM\u0026#39;)) { context.output += 900; context.input = str.slice(2); } } } class TenExpression extends Expression { interpreter(context) { const str = context.input; if (str.startsWith(\u0026#39;X\u0026#39;)) { context.output += 10; context.input = str.slice(1); } else if (str.startsWith(\u0026#39;XL\u0026#39;)) { context.output += 40; context.input = str.slice(2); } else if (str.startsWith(\u0026#39;XC\u0026#39;)) { context.output += 90; context.input = str.slice(2); } } } class OneExpression extends Expression { interpreter(context) { const str = context.input; if (str.startsWith(\u0026#39;I\u0026#39;)) { context.output += 1; context.input = str.slice(1); } else if (str.startsWith(\u0026#39;IV\u0026#39;)) { context.output += 4; context.input = str.slice(2); } else if (str.startsWith(\u0026#39;V\u0026#39;)) { context.output += 5; context.input = str.slice(1); } else if (str.startsWith(\u0026#39;IX\u0026#39;)) { context.output += 9; context.input = str.slice(2); } } } class Interpreter { static parse(roman) { const context = new Context(roman); const tree = [ new ThousandExpression(), new HundredExpression(), new TenExpression(), new OneExpression(), ]; tree.forEach((expression) =\u0026gt; expression.interpreter(context)); return context.output; } } console.log(Interpreter.parse(\u0026#39;CDXLVIII\u0026#39;)); // 448 ","date":"2024-02-15T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xOAzIinBSTLixy37KkW7ag.jpeg","permalink":"http://localhost:1313/p/javascript-design-patterns/","title":"JavaScript Design Patterns"},{"content":"Introduction The upgrade of Vue.js to Vue3 brings many exciting features and improvements, among which the most notable is the introduction of Composition API. It brings a new way to write component logic, and provides a more flexible, composable, and reusable code structure, enabling developers to better organize and manage complex front-end logic.\nUsing the Composition API can avoid writing a large amount of code in the Options API’s large object that is difficult to understand when writing complex components. Therefore, it is necessary to delve into Vue 3’s Composition API, use it proficiently in projects, and write high-quality maintainable code.\nComposition API Introduction Options API Review In Vue 2, we primarily use the Options API to create and manage Vue components. The main idea of the Options API is to define different parts of a component (such as data, methods, computed, etc.) in different options. The advantage of this approach is that it is clear in structure, easy to start with, and convenient for editing small components. However, as the component becomes more and more complex, this approach may lead to a decrease in code readability and maintainability.\nFor example, suppose we have a very complex component that involves multiple functional modules. In the Options API, we need to scatter the code of these functional modules into different options. This may confuse us in reading and understanding the code, because we need to jump back and forth between different options.\nThe Options API has some other issues as well. For example, it does not support type inference, which makes using Vue in TypeScript difficult. Moreover, the Options API does not support code reuse. Although we can use mixins to reuse code, mixins have their own problems, such as naming conflicts and unclear data sources, etc.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 export default { data() { return { count: 0, }; }, computed: { doubleCount() { return this.count * 2; }, }, methods: { increment() { this.count++; }, }, }; Composition API Addresses Pain Points To solve the issues with the Options API, Vue 3 introduced the Composition API. The main idea of the Composition API is to provide a new and more flexible way to organize and reuse code. With the Composition API, we can organize code by functional modules rather than Vue options.\nFor example, suppose we have a very complex component that involves multiple functional modules. In the Composition API, we can put the code for each functional module together, rather than scattered into different options. This makes it easier for us to understand and maintain complex components.\nIn addition, the Composition API also provides better type inference, making it easier for us to use Vue in TypeScript. All in all, using the Composition API can make our code cleaner, more readable, and maintainable.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { ref, computed } from \u0026#39;vue\u0026#39;; export default { setup() { const count = ref(0); const doubleCount = computed(() =\u0026gt; count.value * 2); function increment() { count.value++; } return { count, doubleCount, increment, }; }, }; Composition API Core Concepts Setup Function In the Composition API, we primarily write code in the setup function. The setup function is a special function that is called when the component is initialized, and we can define and return our reactive data and functions inside this function.\nThe setup function receives two parameters: props and context\nprops: is an object, a way of component communication, and cannot use ES6 destructuring, it will eliminate the reactivity of the prop, at this time you need to use toRef or toRefs to take the value, using it has another advantage, can follow the single-way data flow of props, and modify props value\ncontext: context object, attributes are attrs, slots, emit, expose\nattrs is a non-reactive object, mainly receiving no-props attributes, often used to pass some style attributes\nslots is an object containing all slots, where slots.default() gets an array of slot contents\nemit replaces the previous this.$emit due to the lack of this in the setup, used for child-to-parent transmission, triggering custom events\nexpose controls the exposed properties and methods of the component, no interface is exposed by default in the script setup\n1 2 3 4 5 6 7 8 9 10 11 setup(props,context){ const { msg，ans } = toRefs(props) console.log(msg.value); console.log(ans.value); const { attrs, slots, emit, expose } = context // attrs gets the attribute value passed by the component, // slots inside the component\u0026#39;s slots // emit custom event for child components // expose the exposed interface } The setup function is executed before created, and there is no this inside, so this related stuff cannot be mounted. We can use Vue’s various reactive APIs, such as reactive and ref. The properties and methods within the setup that want to be used in the component template must be returned and exposed\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { ref } from \u0026#39;vue\u0026#39;; export default { setup() { const count = ref(0); function increment() { count.value++; } return { count, increment }; } }; Another special use case for the return value of the setup is in jsx development, if the setup returns a function it will act as an h rendering function for rendering templates because JSX cannot write template tags like in a template.\nBelow is a calculator component example written in JSX:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { ref, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const count = ref(0); const increment = () =\u0026gt; { count.value++; }; const decrement = () =\u0026gt; { count.value--; }; return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Current count: {count.value}\u0026lt;/p\u0026gt; \u0026lt;button onClick={increment}\u0026gt;Increase\u0026lt;/button\u0026gt; \u0026lt;button onClick={decrement}\u0026gt;Decrease\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } }); The downside of this approach is that the Vue Devtools developer tool will not detect data defined in the setup function for display, such as count cannot see its value. The more common approach is to write the template in the render function, separating the template from the logic.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import { ref, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const count = ref(0); const increment = () =\u0026gt; { count.value++; }; const decrement = () =\u0026gt; { count.value--; }; return { count, increment, decrement }; }, render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Current count: {this.count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={this.increment}\u0026gt;Increase\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.decrement}\u0026gt;Decrease\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } }); Reactive Functions In Vue 3, reactive data refers to the data used in applications where the relevant views will automatically update to reflect changes when the data changes. The reactive implementation in Vue3 uses a Proxy to intercept and track data changes, so developers only need to manage and maintain application state and data, and can update page views without operating the underlying DOM.\nVue 3 provides some reactivity functions, such as ref, reactive, and computed, for defining reactive data.\nreactive: used to turn a normal JavaScript object into a reactive object. All properties become reactive\nref: used to create a wrapper, making ordinary JavaScript data reactive, generally used to create basic data, and the underlying reactive is called to create object data. The variable created with the ref function needs to access its internal value through .value. template does not need to access through .value, because it is automatically destructed\ncomputed: used to create a computed property, which automatically updates based on the reactive data it depends on.\nLimitations of Using Reactive\nreactive is only valid for object types (object, array, and Map, Set collection types), and is invalid for primitive types such as string, number, and boolean\nA reactive object cannot be arbitrarily “replaced”, as this will cause the responsive connection to the initial reference to be lost, if there is a replacement scenario, consider defining using ref, or as a reactive object property\n1 2 3 4 5 6 7 let state = reactive({ count: 0 }) // The reference above ({ count: 0 }) will no longer be tracked (reactivity connection has been lost!) state = { count: 1 } // Replace with ref, reactivity is normal let state1 = ref({ count: 0 }) state1.value = { count: 1 } reactive, props cannot be directly destructed, will lose the reactivity, the reason is that vue reactive tracking depends on the proxy object’s reference, destructing is equivalent to creating a new memory address, the reference changes. The solution is to use toRef, toRefs for value taking, or to assign the value to a reactive property. A sample of reactive functions code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ fullName }}\u0026lt;/h1\u0026gt; \u0026lt;input v-model=\u0026#34;firstName\u0026#34; placeholder=\u0026#34;firstName\u0026#34; /\u0026gt; \u0026lt;input v-model=\u0026#34;lastName\u0026#34; placeholder=\u0026#34;lastName\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, computed, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const firstName = ref(\u0026#39;\u0026#39;); const lastName = ref(\u0026#39;\u0026#39;); const fullName = computed(() =\u0026gt; { return `${firstName.value} ${lastName.value}`; }); return { firstName, lastName, fullName }; } }); \u0026lt;/script\u0026gt; Analysis:\nUsing the ref function, we wrap firstName and lastName as reactive reference types, allowing their changes to be automatically tracked and updated in the view.\nWe use the computed function to create a full name computed attribute, fullName, which automatically calculates the full name based on the values of firstName and lastName. The computed function internally depends on firstName.value and lastName.value, and when their values change, fullName is automatically updated.\nIn the setup function, we expose firstName, lastName, and fullName as return values to the component instance so they can be accessed and used in the template.\nComputed Computation Functions In Vue, we can use the computed function to create computed properties. A computed property is a special kind of reactive reference whose value is calculated by a function, and this function’s result is cached. When the dependencies of this function change, Vue automatically recalculates the value of this property and updates the view.\nThe computed property use scenario is generally used to optimize the computational logic of the template, such as class and style calculations depending on other data, reducing the writing of if-else templates, the calculation result is cached, reducing calculation and optimizing performance.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 :class=\u0026#34;headingClasses\u0026#34;\u0026gt;Hello, Vue 3!\u0026lt;/h1\u0026gt; \u0026lt;div :style=\u0026#34;boxStyles\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;toggleColor\u0026#34;\u0026gt;Toggle Color\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, computed, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const isRed = ref(true); // Computed property: Return different class names based on the value of isRed const headingClasses = computed(() =\u0026gt; { return { \u0026#39;red-text\u0026#39;: isRed.value, \u0026#39;blue-text\u0026#39;: !isRed.value }; }); // Computed property: Return different style objects based on the value of isRed const boxStyles = computed(() =\u0026gt; { return { backgroundColor: isRed.value ? \u0026#39;red\u0026#39; : \u0026#39;blue\u0026#39;, width: \u0026#39;200px\u0026#39;, height: \u0026#39;200px\u0026#39; }; }); const toggleColor = () =\u0026gt; { isRed.value = !isRed.value; }; return { headingClasses, boxStyles, toggleColor }; } }); \u0026lt;/script\u0026gt; In the above example, we use the computed function to create two computed properties: headingClasses and boxStyles. Depending on the value of isRed, these two computed properties dynamically return different class names and style objects.\nPoints to note when using computed\nThe getter should not have side effects: for example, do not make asynchronous requests or change the DOM in the getter, the getter’s responsibility should only be to calculate and return the value.\nAvoid directly modifying the computed property value, can define a setter\nSummarize the advantages of computed Reactive: The computed function will automatically track the reactive data it depends on, and when the dependent data changes, the computed function will recalculate and update the result. This ensures that the computed property’s value is always up-to-date.\nCached: The computed function caches the calculated results, and only recalculates when the dependent data changes. This can avoid unnecessary calculations and improve performance.\nSimplicity: By using the computed function, complex logic can be encapsulated in the computed property, making the template more concise and readable. The result of the computed property can be directly used in the template, without having to write complex logic in the template.\nReusable: Computed properties can be used multiple times within a component, improving the reusability of the code. If multiple components need the same calculation logic, the computed property can be defined in a function and referenced in multiple components.\nNotes on using computed\nExtra memory overhead: The computed function will create a new reactive object to store the calculation result, which will occupy some memory space. If the computation property’s logic is complex or the computation result is large, it may lead to a large memory overhead. Not suitable for asynchronous operations: The computed function is only suitable for synchronous computation logic and is not suitable for handling asynchronous operations. If you need to perform asynchronous computation, you should use the watch function or async/await to handle it. Watch Listening Function In Vue, we can use the watch function to create listeners. Listeners are special functions that monitor changes in some reactive references or computed properties and then perform some side effects. When the value of the reference or property being monitored changes, Vue will automatically execute the listener.\nThe watch function can monitor various data types such as objects, arrays, functions, etc.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Listen to reference objects watch(state.data, (newValue,oldValue) =\u0026gt; { // Perform operation }) // Listen to a specific value of an object, use a function watch(() =\u0026gt; state.data.id, (newValue,oldValue) =\u0026gt; { // Perform operation }) // Listen to multiple values, use an array watch([data1, data2], ([newVal1,newVal2], [oldVal1,oldVal2]) =\u0026gt; { // Perform operation }) // Stop, call the callback function const stop = watch(data, (newValue,oldValue) =\u0026gt; { // Perform operation }) // Stop listening stop() Use case analysis of watch:\nMonitor changes in the form input 1 2 3 watch(\u0026#39;formData\u0026#39;, (newValue,oldValue) =\u0026gt; { // Perform form validation operation }) In the form, you can use the watch function to monitor changes in form data, and then perform form validation operations. When formData changes, the watch function will automatically execute the callback function.\nMonitor changes in routing parameters 1 2 3 watch(route.params.id, (newValue,oldValue) =\u0026gt; { // Perform page data update operation }) When using Vue Router to route jumps, you can use the watch function to monitor changes in routing parameters and then perform page data update operations. When the routing parameters change, the watch function will automatically execute the callback function.\nMonitor changes in asynchronous request results 1 2 3 watch(\u0026#39;asyncData\u0026#39;, (newValue,oldValue) =\u0026gt; { // Perform page rendering operation }) When making an asynchronous request, you can use the watch function to monitor changes in asynchronous request results and then perform page rendering operations. When asyncData changes, the watch function will automatically execute the callback function.\nMonitor global status changes 1 2 3 watch(() =\u0026gt; store.state.globalData,(newValue,oldValue) =\u0026gt; { // Perform global status update operation }) When using Pinia or Vuex for global state management, you can use the watch function to monitor changes in global status and then perform global status update operations. When globalData changes, the watch function will execute the callback function.\nOther scenarios, such as\nMonitor changes in computed properties and perform corresponding operations\nMonitor changes in arrays and perform corresponding operations, changes in elements within the array, need to set the deep option to true (note, using deep consumes performance, use with caution)\nAdvantages of watch\nMore flexible: The watch function of Vue 3 is more flexible compared to the method of Vue 2. It can monitor multiple data sources and can perform corresponding operations as needed, which makes it more convenient to handle complex data changes\nBetter performance: Vue3’s watch function uses a responsive system based on Proxy, which has a better performance compared to Vue2’s Object.defineProperty. Proxy can directly intercept object reading, assignment, deletion, and other operations, thereby achieving finer-grained data change tracking, reducing unnecessary update operations, and improving performance\nBetter type inference: Vue3’s watch function supports TypeScript, and can better perform type inference. Through type declaration, potential errors can be captured during the coding phase, improving the maintainability and readability of the code\nUse of watch to note\nDeeply nested data needs to be handled manually: Vue 3’s watch function by default only listens for changes in the first layer properties of an object. If you need to listen to changes in deeply nested data, you need to manually set the deep option. This adds some extra code and handling logic\nMay cause repeat execution: If you modify the data being monitored in the callback function, it may cause the callback function to be executed repeatedly. Avoid this situation when writing code, otherwise it may cause infinite loops or other unexpected results.\nLifecycle Hook Function Lifecycle hooks are special functions used to execute logic at different stages of a component’s lifecycle. They provide a mechanism for executing code when the component is created, mounted, updated, and unmounted.\nCommon lifecycle hook functions and their uses in Vue 3:\nonBeforeCreate: Called before the component instance is created. At this time, the component’s data, computed properties, and methods have not yet been initialized, and these properties and methods cannot be accessed.\nonCreated: Called after the component instance is created. At this point, the component’s data, computed properties, and methods have been initialized, but the DOM has not yet been rendered.\nonBeforeMount: Called before the component is mounted. At this time, the component’s template has been compiled, but it has not yet been rendered to the DOM.\nonMounted: Called after the component is mounted. At this time, the component has been rendered to the DOM, and operations such as DOM operations and asynchronous requests can be performed.\nonBeforeUpdate: Called before the component is updated. When the component’s data changes but has not been re-rendered, this hook function is triggered.\nonUpdated: Called after the component is updated. When the component’s data changes and re-rendering is complete, this hook function is triggered.\nonBeforeUnmount: Called before the component is unmounted. When the component is about to be destroyed, this hook function will be triggered. Operations such as clearing timers and canceling subscriptions can be performed here.\nonUnmounted: Called after the component is unmounted. Once the component has been destroyed and DOM nodes have been removed from the page, this hook function is triggered.\nIn the Composition API, combined with specific business scenarios, for example, in the onMounted hook function, you can perform DOM operations, subscribe to events, or send asynchronous requests. In the onBeforeUnmount hook function, you can clear resources, unsubscribe, or clear timer operations code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ message }}\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, onMounted, onBeforeUnmount, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { const message = ref(\u0026#39;Hello, Vue 3!\u0026#39;); onMounted(() =\u0026gt; { // Operations executed after the component is mounted console.log(\u0026#39;Component has been mounted\u0026#39;); performDOMOperation(); subscribeToEvent(); fetchData(); }); onBeforeUnmount(() =\u0026gt; { // Operations executed before the component is unmounted console.log(\u0026#39;Component will unmount\u0026#39;); cleanUpResources(); unsubscribeFromEvent(); clearTimer(); }); const performDOMOperation = () =\u0026gt; { // Execute DOM operation const element = document.getElementById(\u0026#39;my-element\u0026#39;); // ... }; const subscribeToEvent = () =\u0026gt; { // Subscribe to event window.addEventListener(\u0026#39;resize\u0026#39;, handleResize); }; const fetchData = async () =\u0026gt; { // Send asynchronous request const response = await fetch(\u0026#39;https://api.example.com/data\u0026#39;); const data = await response.json(); // ... }; const cleanUpResources = () =\u0026gt; { // Cleanup resources // ... }; const unsubscribeFromEvent = () =\u0026gt; { // Cancel event subscription window.removeEventListener(\u0026#39;resize\u0026#39;, handleResize); }; const clearTimer = () =\u0026gt; { // Clear the timer clearInterval(timer); }; const handleResize = () =\u0026gt; { // Handle the event callback // ... }; let timer; onMounted(() =\u0026gt; { // Operations executed after the component is mounted console.log(\u0026#39;Component has been mounted\u0026#39;); timer = setInterval(() =\u0026gt; { // data update on a timer message.value = \u0026#39;Updated message\u0026#39;; }, 1000); }); onBeforeUnmount(() =\u0026gt; { // Operations executed before the component is unmounted console.log(\u0026#39;Component will unmount\u0026#39;); clearInterval(timer); }); return { message }; } }); \u0026lt;/script\u0026gt; In the onMounted hook function, the following operations are performed:\nperformDOMOperation: Perform DOM operations, such as obtaining elements and operating styles.\nsubscribeToEvent: Subscribe to events, such as window size adjustment events.\nfetchData: Send asynchronous requests, for example, obtaining remote data.\nIn the onBeforeUnmount hook function, we performed the following operations:\ncleanUpResources: Clean up resources, such as releasing memory, closing connections, etc.\nunsubscribeFromEvent: Cancel event subscriptions, such as canceling subscriptions to window size adjustment events.\nclearTimer: Clear the timer, for example, stop the timed data update operation.\nBy performing these operations in the appropriate lifecycle hook functions, we can ensure that necessary operations are performed at specific stages of the component’s life cycle and clean up before the component is destroyed. This can improve the reliability and performance of the code and avoid possible memory leaks and unnecessary resource occupancy.\nBest Practices for the Composition API To write high-quality code, when using Vue 3’s Composition API, I’ve summarized some good practices based on my own development experience.\nComposition API Coding Standards Definition of reactive data Reactive data defined in the setup function should be placed at the top of the function, and not defined within loops or conditional statements. This ensures the accuracy and consistency of the reactive data.\n1 2 3 4 5 6 7 8 9 10 import { reactive, ref } from \u0026#39;vue\u0026#39;; setup() { const state = reactive({ name: \u0026#39;John\u0026#39;, age: 30 }); return { state }; } 2、Writing order\nIn order to reduce too flexible writing in the setup function, leading to messy code logic. A standard writing order is recommended, proposed as follows: reactive functions, computed functions, watch listener functions, lifecycle hooks, custom methods, etc. This makes the code more readable and maintainable within the team.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import { ref, computed, watch, onMounted, onBeforeUnmount, defineComponent } from \u0026#39;vue\u0026#39;; export default defineComponent({ setup() { // Reactive data const firstName = ref(\u0026#39;John\u0026#39;); const lastName = ref(\u0026#39;Doe\u0026#39;); const age = ref(30); // Computed properties const fullName = computed(() =\u0026gt; `${firstName.value} ${lastName.value}`); // Observer watch( age, (newAge, oldAge) =\u0026gt; { console.log(`Age has changed from ${oldAge} to ${newAge}`); } ); // Lifecycle hooks onMounted(() =\u0026gt; { console.log(\u0026#39;Component has been mounted\u0026#39;); // You can perform some initialization operations here }); onBeforeUnmount(() =\u0026gt; { console.log(\u0026#39;Component will unmount\u0026#39;); // Resources can be cleaned or subscriptions cancelled here }); // Method const increaseAge = () =\u0026gt; { age.value++; }; // Return data and methods return { firstName, lastName, age, fullName, increaseAge }; } }); Custom Hooks Custom Hooks draw on React’s ideas. Vue 3’s Composition API’s flexibility and composition can help us encapsulate reusable logic and share it across different components.\nFor instance, in a business scenario where multiple components need to obtain user geolocation information, we can create a custom Hook called useGeolocation to encapsulate the logic of obtaining geolocation, so it can be reused in multiple components when needed.\nHere’s a code example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Latitude: {{ latitude }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Longitude: {{ longitude }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, onMounted, onBeforeUnmount, defineComponent } from \u0026#39;vue\u0026#39;; // Custom Hook function useGeolocation() { const latitude = ref(null); const longitude = ref(null); const successCallback = (position) =\u0026gt; { latitude.value = position.coords.latitude; longitude.value = position.coords.longitude; }; const errorCallback = (error) =\u0026gt; { console.error(\u0026#39;Failed to get geolocation:\u0026#39;, error); }; onMounted(() =\u0026gt; { // Get geolocation navigator.geolocation.getCurrentPosition(successCallback, errorCallback); }); onBeforeUnmount(() =\u0026gt; { // Cancel geolocation acquisition navigator.geolocation.clearWatch(watchId); }); return { latitude, longitude }; } export default defineComponent({ setup() { const { latitude, longitude } = useGeolocation(); return { latitude, longitude }; } }); \u0026lt;/script\u0026gt; In the useGeolocation function, we create the latitude and longitude reactive data with ref. In the successCallback callback, we get the user’s geolocation and assign the latitude and longitude values to the corresponding reactive data.\nIn the onMounted hook, we call the navigator.geolocation.getCurrentPosition method to get the geolocation. In the onBeforeUnmount hook, we call the navigator.geolocation.clearWatch method to cancel the geolocation acquisition.\nBy doing this, we can reuse the logic of obtaining geolocation in multiple components without having to rewrite the same code in each component. This enhances the reusability and maintainability of the code and makes the logic clearer.\nSummary of the Composition API Finally, let’s summarize the best practices for developing with the Composition API:\nSingle responsibility principle: Group related logic and state into a single custom function to make the code clearer and more maintainable.\nUse reactive functions: Use ref to wrap basic data types and reactive to wrap objects or arrays for reactive tracking.\nUse computed: Create computed properties using the computed function to dynamically calculate values based on dependent data, avoiding redundant calculations and manual dependency tracking.\nUse watch: Use the watch function to observe changes in reactive data and execute corresponding operations, such as sending network requests, updating states, etc.\nCombine multiple functions: Logic can be composed by calling multiple custom functions, making the code more reusable and testable.\nUse provide and inject: Use the provide function in the parent component to provide data, and then use the inject function in the child component to inject these data to achieve cross-component data sharing.\nUtilize lifecycle hooks: Use lifecycle hooks such as onMounted, onBeforeUnmount, etc., to execute corresponding operations, such as subscribing to events, sending requests, etc.\nSeparate side-effect code: Place code that has side effects (such as timers, network requests, etc.) in onMounted and onBeforeUnmount hooks to ensure correct initialization and cleanup.\n","date":"2024-02-14T16:22:33+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SirXXHZL0xDpmuI4y36vSw.jpeg","permalink":"http://localhost:1313/p/understanding-and-practice-of-the-vue3-composition-api/","title":"Understanding and Practice of the Vue3 Composition API"},{"content":"Long list loading component Mainly by monitoring whether the bottom DOM appears in the visible area, and then making data requests to handle some special situations. Usevue’s useIntersectionObserver api is used, which simply encapsulates the IntersectionObserver api, allowing us to more easily implement cross-monitoring of the visible area.\nIt mainly provides isLoading to display and load more dynamic icons, isFinished to determine whether the data request is completed, and load to request data props for the event.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026lt;script setup\u0026gt; import { useVModel, useIntersectionObserver } from \u0026#39;@vueuse/core\u0026#39; import { onUnmounted, ref, watch } from \u0026#39;vue\u0026#39; const props = defineProps({ isLoading: { type: Boolean, default: false }, isFinished: { type: Boolean, default: false } }) // Define loading binding event, load more event const emits = defineEmits([\u0026#39;update:isLoading\u0026#39;, \u0026#39;load\u0026#39;]) const loading = useVModel(props, \u0026#39;isLoading\u0026#39;, emits) // Load more const loadingRef = ref(null) // The first load, the visible area is true, and the visible area becomes false after the data is loaded // If the visible area is not alternately visible, then the callback will not be executed // Record whether it is at the bottom (whether it is intersecting) const targetIsIntersecting = ref(false) useIntersectionObserver(loadingRef, ([{ isIntersecting }]) =\u0026gt; { // console.log(isIntersecting, props.isFinished, loading.value) targetIsIntersecting.value = isIntersecting emitLoad() }) const emitLoad = () =\u0026gt; { // When the bottom area appears, the data is not loaded, and when loading is false, request data if (targetIsIntersecting.value \u0026amp;\u0026amp; !props.isFinished \u0026amp;\u0026amp; !loading.value) { loading.value = true emits(\u0026#39;load\u0026#39;) } } /** * Handle the bug that the visible area judgement callback only executes once when the first data load is full screen * * Listen to the loading changes and trigger it again */ let timer = null watch(loading, () =\u0026gt; { // false =\u0026gt; true（delay request data, wait for the previous request to finish, and then execute）=\u0026gt; false // Trigger load, delay processing, wait for rendering (although data returns, but the UI does not render, so targetIsIntersecting is still true) and useIntersectionObserver to trigger again // When one load can fill the container, when loading changes, do not let it load data. Because targetIsIntersecting is false. This delay time must be greater than the time after targetIsIntersecting changes // But for the case that one load cannot fill the container. targetIsIntersecting is always true, so you can load twice on the first screen. Wait for the next watch execution, just delay letting targetIsIntersecting change to false, then trigger emitLoad. At this time, it just stops the request. timer = setTimeout(() =\u0026gt; { emitLoad() }, 500) }) onUnmounted(() =\u0026gt; { clearTimeout(timer) }) \u0026lt;/script\u0026gt; There is a bug that is easy to occur here. When the amount of data we return is too small at one time, the bottom area is always within the but area. We will not be able to call the callback passed in useIntersectionObserver again, and we will not be able to request data again and load it. More.\nSo we need to monitor the changes in loading and trigger the data request again. But there is another problem. When we load too much data at once, we still request data multiple times. This is because although the data requested for the first time has come back, the interface has not yet been rendered. This means that the bottom area is still within the area, causing the data to be read again. ask. So we manually delay the request for data in the watch listener.\nCustom lazy loading instructions We also need to use useVue’s useIntersectionObserver api. First, leave src blank. When entering the visible area, we assign src back.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { useIntersectionObserver } from \u0026#39;@vueuse/core\u0026#39; export default { mounted(el) { // Save image path const imgSrc = el.getAttribute(\u0026#39;src\u0026#39;) // Set image src to empty el.setAttribute(\u0026#39;src\u0026#39;, \u0026#39;\u0026#39;) // Observe the visibility of the image const { stop } = useIntersectionObserver(el, ([{ isIntersecting }]) =\u0026gt; { if(isIntersecting) { el.setAttribute(\u0026#39;src\u0026#39;, imgSrc) // Stop observing stop() } }) } } Automatically register instructions through another method of vite’s Glob. Use import.meta.globEager to import all modules directly.\n1 2 3 4 5 6 7 8 9 10 export default { install(app) { // Get all directive module objects. const modules = import.meta.globEager(\u0026#39;./modules/*.js\u0026#39;) for (let [key, value] of Object.entries(modules)) { const directiveName = key.replace(\u0026#39;./modules/\u0026#39;, \u0026#39;\u0026#39;).split(\u0026#39;.\u0026#39;)[0] app.directive(directiveName, value.default) } } } Confirm component confirm Implementation ideas of components:\nCreate a confirm component\nCreate a function component and return a promise\nAt the same time, the h function is used to generate vnode of the confirm component.\nFinally, use the render function to render vnode into body\nAfter understanding the design idea of ​​the component, we need to analyze the props it should have.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const props = defineProps({ title: { type: String }, content: { type: String, required: true }, // Button text cancelText: { type: String, default: \u0026#39;Cancel\u0026#39; }, confirmText: { type: String, default: \u0026#39;Confirm\u0026#39; }, // Trigger event when canceling and confirming, such as removing dom closeAfter: { type: Function }, /** * Mainly to distinguish whether to click cancel or confirm */ // Trigger event when confirming handleConfirmClick: { type: Function }, // Trigger event when canceling handleCancelClick: { type: Function } }) For the confirm component, we use a responsive data to control the animation of showing and hiding.\nWhen the pop-up box appears, we need to monitor the mounting moment and then control the display of the mask and pop-up box, otherwise the animation will fail.\nWhen we click to close the pop-up box, we cannot uninstall the component immediately, otherwise the animation will disappear immediately, so we delay the uninstallation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Animation duration, which is a state-driven dynamic CSS const actionDuration = \u0026#39;0.5s\u0026#39; // Control visibility of \u0026#39;confirm\u0026#39; const isVisible = ref(false) // Display the dialog box as soon as the component is mounted. You can control component mounting and unmounting through function components. // Use the \u0026#39;mounted\u0026#39; life cycle hook to have an animation effect when it’s mounted. onMounted(() =\u0026gt; { isVisible.value = true }) /** * Close the dialog box * The DOM is removed after the animation is completed using a timer. */ const handleClose = () =\u0026gt; { // Animation appears only when it is hidden isVisible.value = false setTimeout(() =\u0026gt; { // Unmount \u0026#39;confirm\u0026#39; component props.closeAfter() }, parseInt(actionDuration.replace(\u0026#39;0.\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;s\u0026#39;, \u0026#39;\u0026#39;)) * 100) } The encapsulation of function components mainly uses h, render function operations.\ncloseAfter : Mainly to uninstall the component when clicking anywhere to close the pop-up box.\nhandleConfirmClick : Mainly when the confirmation button is clicked, the promise status is fulfilled, so that when the outside world uses the function component, the confirmed things can be operated in then.\nhandleCancelClick : Mainly when the cancel button is clicked, the promise status is rejected, so that when the outside world uses the function component, the canceled things can be operated in the catch.\nThe latter two functions are mainly to distinguish whether you clicked Cancel or Confirm.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import { h, render } from \u0026#39;vue\u0026#39; import Confirm from \u0026#39;./index.vue\u0026#39; export default function createConfirm({ title, content, cancelText = \u0026#39;Cancel\u0026#39;, confirmText = \u0026#39;Confirm\u0026#39; }) { return new Promise((resolve, reject) =\u0026gt; { /** * Remove \u0026#39;confirm\u0026#39; */ const closeAfter = () =\u0026gt; { render(null, document.body) } /** * Callback when the \u0026#39;confirm\u0026#39; button is clicked */ const handleConfirmClick = resolve /** * Callback when the \u0026#39;cancel\u0026#39; button is clicked */ const handleCancelClick = reject // Create \u0026#39;vnode\u0026#39; and pass in \u0026#39;props\u0026#39; const vnode = h(Confirm, { title, content, cancelText, confirmText, closeAfter, handleConfirmClick, handleCancelClick }) // Render component in \u0026#39;body\u0026#39; render(vnode, document.body) }) } Message component The implementation of the message component is very similar to confirm.\nprops need to specify the pop-up time and type\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 const props = defineProps({ // message type type: { type: String, required: true, validate(val) { if (types.includes(val)) { return true } else { throw new Error(\u0026#39;Please pass in a correct type value (error, warn, success)\u0026#39;) } } }, // message content content: { type: String, required: true }, // message callback, unloads message after animation is completed closeAfter: { type: Function }, // delay before deletion delay: { type: Number, default: 3000 } }) The main reason is that the hiding timing of the pop-up frame is different. In the message, it is hidden through the time control passed in from the outside world.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 const isVisible = ref(false) /** * To ensure animation is displayed when it appears, we need to show the corresponding content after the component is mounted. */ onMounted(() =\u0026gt; { isVisible.value = true setTimeout(() =\u0026gt; { isVisible.value = false }, props.delay) }) // After the animation is complete, trigger the component to unmount using the \u0026#39;after-leave\u0026#39; hook of the \u0026#39;transition\u0026#39; component. Function component implementation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { h, render } from \u0026#39;vue\u0026#39; import Message from \u0026#39;./index.vue\u0026#39; export function createMessage({ type, content, delay = 3000 }) { /** * Callback when the animation is over */ const closeAfter = () =\u0026gt; { // message destruction render(null, document.body) } // Generate \u0026#39;vnode\u0026#39; const vnode = h(Message, { type, content, delay, closeAfter }) // Render component render(vnode, document.body) } File download File download related libraries:\nSmall file download: file-saver\nLarge file download: streamsaver\nUse the api directly and pass in the download path.\n1 2 3 4 5 import { saveAs } from \u0026#39;file-saver\u0026#39; const handleDownload = (downloadPath) =\u0026gt; { saveAs(downloadPath) } Full screen display We know that on native dom , some methods are provided for us to turn on or off full screen:\nElement.requestFullscreen()\nDocument.exitFullscreen()\nDocument.fullscreen Returns a Boolean value indicating whether the current document is in full-screen mode. Deprecated\nDocument.fullscreenElement Returns the Element node that is being displayed in full-screen mode in the current document, or null if not.\nGeneral browser\nUse requestFullscreen() and exitFullscreen() to achieve this\nEarlier version of Chrome browser\nBrowsers based on the WebKit kernel need to add the webkit prefix, using webkitRequestFullScreen() and webkitCancelFullScreen() to achieve this.\nEarlier version of IE browser\nBrowsers based on the Trident kernel need to add the ms prefix and use msRequestFullscreen() and msExitFullscreen() to achieve this. Note that the s in screen in the method is in lowercase.\nEarlier versions of Firefox\nBrowsers based on the Gecko kernel need to add the moz prefix, using mozRequestFullScreen() and mozCancelFullScreen() to achieve this.\nEarlier version of Opera browser\nOpera browser needs to add the o prefix, use oRequestFullScreen() and oCancelFullScreen() to achieve this.\nConsidering compatibility, we can use the useFullscreen api provided by usevue\n1 2 3 4 5 6 7 8 import { useFullscreen } from \u0026#39;@vueuse/core\u0026#39; const imgRef = ref(null) const { isFullscreen, enter, exit, toggle } = useFullscreen(imgRef) const handleFullScreen = () =\u0026gt; { imgRef.value.style.backgroundColor = \u0026#39;transparent\u0026#39; enter() } Function guide implementation We can achieve this through the driver.js library.\nDefine the corresponding guidance steps.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 export default [ { // Which element to highlight element: \u0026#39;.guide-home\u0026#39;, // Configuration object popover: { // Title title: \u0026#39;Logo\u0026#39;, // Description description: \u0026#39;Click to return to the home page\u0026#39; } }, { element: \u0026#39;.guide-search\u0026#39;, popover: { title: \u0026#39;Search\u0026#39;, description: \u0026#39;Search for the image you want\u0026#39; } }, { element: \u0026#39;.guide-theme\u0026#39;, popover: { title: \u0026#39;Style\u0026#39;, description: \u0026#39;Choose a style you like\u0026#39;, // Pop-up position position: \u0026#39;left\u0026#39; } }, { element: \u0026#39;.guide-my\u0026#39;, popover: { title: \u0026#39;Account\u0026#39;, description: \u0026#39;Your account information is marked here\u0026#39;, position: \u0026#39;left\u0026#39; } }, { element: \u0026#39;.guide-start\u0026#39;, popover: { title: \u0026#39;Guide\u0026#39;, description: \u0026#39;You can view the guide information again here\u0026#39;, position: \u0026#39;left\u0026#39; } }, { element: \u0026#39;.guide-feedback\u0026#39;, popover: { title: \u0026#39;Feedback\u0026#39;, description: \u0026#39;You can tell us about any dissatisfaction here\u0026#39;, position: \u0026#39;left\u0026#39; } } ] Then call the api provided by the driver library\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import Driver from \u0026#39;driver.js\u0026#39; import \u0026#39;driver.js/dist/driver.min.css\u0026#39; import steps from \u0026#39;./steps\u0026#39; import { onMounted } from \u0026#39;vue\u0026#39; /** * Guide page processing */ let driver = null onMounted(() =\u0026gt; { driver = new Driver({ // Prohibit closing by clicking on the screen mask allowClose: false, closeBtnText: \u0026#39;Close\u0026#39;, nextBtnText: \u0026#39;Next\u0026#39;, prevBtnText: \u0026#39;Previous\u0026#39; }) }) /** * Start guiding */ const handleGuideClick = () =\u0026gt; { // Define guide steps driver.defineSteps(steps) driver.start() } Form validation Third-party form validation library: vee-validate.\nThis library provides three important components. Handle form components and form validation error prompts for us respectively.\n1 2 3 4 5 import { Form as VeeForm, Field as VeeField, ErrorMessage as VeeErrorMessage } from \u0026#39;vee-validate\u0026#39; Each form item can bind validation rules through rules props. The message corresponds to the name in the field.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;vee-form @submit=\u0026#34;handleLogin\u0026#34;\u0026gt; \u0026lt;vee-field class=\u0026#34;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900\u0026#34; name=\u0026#34;username\u0026#34; :rules=\u0026#34;validateUsername\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;username\u0026#34; autocomplete=\u0026#34;on\u0026#34; v-model=\u0026#34;loginForm.username\u0026#34; /\u0026gt; \u0026lt;vee-error-message class=\u0026#34;text-sm text-red-600 block mt-0.5 text-left\u0026#34; name=\u0026#34;username\u0026#34; \u0026gt; \u0026lt;/vee-form\u0026gt; What needs to be noted is: the verification function, true means that the form verification has passed, String means that the form verification has not passed, and the prompt text is given.\n1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Form validation for Username */ export const validateUsername = (value) =\u0026gt; { if (!value) { return \u0026#39;Username is required\u0026#39; } if (value.length \u0026lt; 3 || value.length \u0026gt; 12) { return \u0026#39;Username should be between 3-12 characters\u0026#39; } return true } For those that need to rely on other form values ​​for associated verification, we need to define rules through defineRule . For example: Confirm password input box verification.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * Form validation for Confirm Password * * Parameter two: An array representing the related form values */ export const validateConfirmPassword = (value, password) =\u0026gt; { if (value !== password[0]) { return \u0026#39;The two password entries must be consistent\u0026#39; } return true } /** * Define associated rules, for example confirm password */ defineRule(\u0026#39;validateConfirmPassword\u0026#39;, validateConfirmPassword) ruleRule rules=\u0026ldquo;validateConfirmPassword:@password\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!-- Password --\u0026gt; \u0026lt;vee-field class=\u0026#34;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900\u0026#34; name=\u0026#34;password\u0026#34; type=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34; autocomplete=\u0026#34;on\u0026#34; :rules=\u0026#34;validatePassword\u0026#34; v-model=\u0026#34;regForm.password\u0026#34; /\u0026gt; \u0026lt;vee-error-message class=\u0026#34;text-sm text-red-600 block mt-0.5 text-left\u0026#34; name=\u0026#34;password\u0026#34; \u0026gt; \u0026lt;/vee-error-message\u0026gt; \u0026lt;!-- Confirm Password --\u0026gt; \u0026lt;vee-field class=\u0026#34;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900\u0026#34; name=\u0026#34;confirmPassword\u0026#34; type=\u0026#34;password\u0026#34; placeholder=\u0026#34;Confirm password\u0026#34; autocomplete=\u0026#34;on\u0026#34; rules=\u0026#34;validateConfirmPassword:@password\u0026#34; v-model=\u0026#34;regForm.confirmPassword\u0026#34; /\u0026gt; \u0026lt;vee-error-message class=\u0026#34;text-sm text-red-600 block mt-0.5 text-left\u0026#34; name=\u0026#34;confirmPassword\u0026#34; \u0026gt; \u0026lt;/vee-error-message\u0026gt; Image cropping To learn image cropping, we need to get an image and display it. How do we preview the image when we click to upload it? Let’s briefly introduce it.\nPicture Preview\nThe URL.createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter. The lifetime of this URL is bound to the document in the window that created it. This new URL object represents the specified File object or Blob object. Through URL.createObjectURL(blob) you can get a memory URL of the current file.\nFileReader.readAsDataURL(file) , a string of data:base64 can be obtained through FileReader.readAsDataURL(file) .\nExecution time:\ncreateObjectURL is executed synchronously (immediately)\nFileReader.readAsDataURL is executed asynchronously (after a period of time)\nMemory usage:\ncreateObjectURL returns a section of url with hash and is stored in memory until document triggers unload event (for example: document close ) or execute revokeObjectURL to release.\nFileReader.readAsDataURL returns base64 containing many characters and consumes more memory than blob url , but it will be automatically cleared from memory (through garbage) when not in use. Recycling mechanism) In terms of compatibility, both properties are compatible with browsers above IE10.\nCompare the pros and cons:\nUsing createObjectURL can save performance and be faster, but you need to manually release the memory when not in use. If you don\u0026rsquo;t care about device performance issues and want to get base64 of the image, it is recommended. Use FileReader.readAsDataURL .\ncropperjs library to cut pictures\ncropperjs is a very powerful image cropping tool, which can be applied to: native js, vue, react, etc. And the operation is very simple, and you can complete the picture cropping work in just a few simple steps.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import Cropper from \u0026#39;cropperjs\u0026#39; import \u0026#39;cropperjs/dist/cropper.css\u0026#39; // Mobile configuration object const mobileOptions = { // Limit crop box within the size of canvas viewMode: 1, // Move canvas, crop box does not move dragMode: \u0026#39;move\u0026#39;, // Fixed aspect ratio of the crop box: 1:1 aspectRatio: 1, // Crop box cannot be moved cropBoxMovable: false, // Crop box size cannot be adjusted cropBoxResizable: false } // PC configuration object const pcOptions = { // Fixed aspect ratio of the crop box: 1:1 aspectRatio: 1 } /** * Image cropping processing */ const imageRef = ref(null) let cropper = null onMounted(() =\u0026gt; { /** * Takes two parameters: * 1. DOM of the image to be cropped * 2. options configuration object */ cropper = new Cropper( imageRef.value, isMobileTerminal.value ? mobileOptions : pcOptions ) }) Then we can get the cropped file object through cropper.getCroppedCanvas().toBlob .\n1 2 3 4 5 // Get the cropped image cropper.getCroppedCanvas().toBlob((blob) =\u0026gt; { // The blob object after cropping console.log(blob) }) Make the h5 page jump as smooth as the native app page jump Under normal circumstances, when we switch routes on the mobile terminal, in order to make the h5 page jump comparable to the native app, we will use the excessive animation provided by vue.\nThe main implementation logic is to first define the animation for entering and leaving the page, and dynamically change the transition animation name through routing jumps. Dynamically change the components of the cache component stack when jumping to achieve the component switching cache effect.\nu0026lt;template\u0026gt; \u0026lt;!-- Router outlet --\u0026gt; \u0026lt;router-view v-slot=\u0026#34;{ Component }\u0026#34;\u0026gt; \u0026lt;!-- Animation component --\u0026gt; \u0026lt;transition :name=\u0026#34;transitionName\u0026#34; @before-enter=\u0026#34;beforeEnter\u0026#34; @after-leave=\u0026#34;afterLeave\u0026#34; \u0026gt; \u0026lt;!-- Cache component --\u0026gt; \u0026lt;!-- :key=\u0026#34;$route.fullPath\u0026#34; to prevent caching when switching between dynamic routes --\u0026gt; \u0026lt;keep-alive :include=\u0026#34;virtualTaskStack\u0026#34;\u0026gt; \u0026lt;component :class=\u0026#34;{ \u0026#39;fixed top-0 left-0 w-screen z-50\u0026#39;: isAnimation }\u0026#34; :is=\u0026#34;Component\u0026#34; :key=\u0026#34;$route.fullPath\u0026#34; /\u0026gt; \u0026lt;/keep-alive\u0026gt; \u0026lt;/transition\u0026gt; \u0026lt;/router-view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; const ROUTER_TYPE_NONE = \u0026#39;none\u0026#39; const ROUTER_TYPE_PUSH = \u0026#39;push\u0026#39; const ROUTER_TYPE_BACK = \u0026#39;back\u0026#39; \u0026lt;/script\u0026gt; \u0026lt;script setup\u0026gt; import { ref, watch } from \u0026#39;vue\u0026#39; import { useRouter } from \u0026#39;vue-router\u0026#39; const props = defineProps({ // Transition type. No transition animation for PC, set to \u0026#39;none\u0026#39; routerType: { type: String, default: ROUTER_TYPE_NONE, validate(val) { if ( val == ROUTER_TYPE_BACK || val == ROUTER_TYPE_NONE || val == ROUTER_TYPE_PUSH ) { return true } else { console.error( `Please pass in one of the types ${ROUTER_TYPE_NONE}, ${ROUTER_TYPE_BACK}, ${ROUTER_TYPE_PUSH}` ) return false } } }, // Main component name, corresponding to the first component in the task stack mainComponentName: { type: String, required: true } }) // Cached components const virtualTaskStack = ref([props.mainComponentName]) /** * Watch the transition type, then determine the animation name */ const transitionName = ref(\u0026#39;\u0026#39;) watch( () =\u0026gt; props.routerType, (val) =\u0026gt; { transitionName.value = val } ) /** * Change the cached components array every time the route changes. */ const router = useRouter() router.beforeEach((to, from) =\u0026gt; { // // Define current animation name // transitionName.value = props.routerType if (props.routerType === ROUTER_TYPE_PUSH) { // Push to stack virtualTaskStack.value.push(to.name) } else if (props.routerType === ROUTER_TYPE_BACK) { // Pop from stack virtualTaskStack.value.pop() } // Default to clear the stack when entering the main page if (to.name === props.mainComponentName) { clearTask() } }) /** * Animation starts */ const isAnimation = ref(false) const beforeEnter = () =\u0026gt; { isAnimation.value = true } /** * Animation ends */ const afterLeave = () =\u0026gt; { isAnimation.value = false } /** * Clear stack */ const clearTask = () =\u0026gt; { virtualTaskStack.value = [props.mainComponentName] } \u0026lt;/script\u0026gt; \u0026lt;style lang=\u0026#34;scss\u0026#34; scoped\u0026gt; // When pushing a new page: entering animation for the new page .push-enter-active { animation-name: push-in; animation-duration: 0.6s; } // When pushing a new page: leaving animation for the old page .push-leave-active { animation-name: push-out; animation-duration: 0.6s; } // Animation for new page entering when pushing a new page @keyframes push-in { 0% { transform: translate(100%, 0); } 100% { transform: translate(0, 0); } } // Animation for old page exiting when pushing a new page @keyframes push-out { 0% { transform: translate(0, 0); } // The old page only moves 50% of the animation here, but the new page moves 100%, so it will be squeezed out. 100% { transform: translate(-50%, 0); } } // Animation for the page about to be displayed when moving backwards .back-enter-active { animation-name: back-in; animation-duration: 0.6s; } // Animation for the page moving backwards .back-leave-active { animation-name: back-out; animation-duration: 0.6s; } // Animation for the page about to be displayed when moving backwards @keyframes back-in { 0% { width: 100%; transform: translate(-100%, 0); } 100% { width: 100%; transform: translate(0, 0); } } // Animation for page moving backwards @keyframes back-out { 0% { width: 100%; transform: translate(0, 0); } 100% { width: 100%; transform: translate(50%, 0); } } \u0026lt;/style\u0026gt; ","date":"2024-02-13T16:20:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*DYdGMu4svwz6UJ6Izma43g.png","permalink":"http://localhost:1313/p/vue3-development-solutions-two/","title":"Vue3 Development Solutions Two"},{"content":"Customized, high-availability front-end style processing solution Pain points in CSS processing under enterprise-level projects：\nUnified variables are difficult to maintain\nLots of className overhead\nThe writing burden caused by the separation of HTML and CSS\nResponsive, theme switching is complex to implement\nFor more pain points, see CSS Utility Classes and “Separation of Concerns”\nIn response to the above problems, we can solve it through tailwindcss. Let’s look at its specific usage below.\nInstallation\n1 yarn add tailwindcss postcss autoprefixer -D Initializes the tailwindcss.config.js configuration file and also creates the postcss.config.js file.\n1 2 // -p This represents creating a basic configuration file. npx tailwindcss init -p 1 2 3 4 5 6 7 8 9 10 // tailwindcss.config.js /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ export default { // The scope of files applied by Tailwind CSS. content: [\u0026#39;./index.html\u0026#39;, \u0026#39;./src/**/*.{vue,js}\u0026#39;], theme: { extend: {}, }, plugins: [], } Add instructions to load Tailwind to your CSS file\n1 2 3 @tailwind base; @tailwind components; @tailwind utilities; Use built-in class names on elements\nTailwindcss is officially introduced to quickly build modern websites without leaving HTML. Specifically, tailwind provides many class names, all of which define specific css. You can quickly build a website by directly adding the corresponding class name when writing HTML.\nThe design concept of tailwindcss\nFirst, let’s take a look at the css granular design form\nInline styles. The highest degree of freedom and the strongest customization. But it is inconvenient to reuse styles. 1 \u0026lt;div style=\u0026#34;color: red; font-size: 20px\u0026#34;\u0026gt;zh-llm\u0026lt;/div\u0026gt; Atomized css, each class name represents a type of css style. The degree of freedom is still very strong, the customization is also very high, and the styles can be reused. But a lot of meaningless class names will be written. Among them, tailwindcss is this design. 1 \u0026lt;div class=\u0026#34;text-sky-400\u0026#34;\u0026gt;zh-llm\u0026lt;/div\u0026gt; In the traditional form, one or several semantic classes are used to describe a CSS attribute. It is encapsulated, has strong semantics, and has average freedom and customizability (most class names are written with the entire set of CSS attributes of the corresponding element). However, there are a large number of semantic classes, which require switching back and forth between HTML and CSS when writing. 1 \u0026lt;div class=\u0026#34;container clear\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; In component form, the structure and style are directly defined in the current component. It has strong encapsulation and strong semantics. However, the degree of freedom and customizability are relatively poor. And the style is fixed, which is more suitable for background projects. Such as element-plus and so on. 1 \u0026lt;my-component /\u0026gt; Comparing the four design methods, we can see that atomized CSS has a degree of freedom, is customizable, and has good reusability. It only has the disadvantage of writing a large number of meaningless class names. Compared with its advantages, the disadvantages can be ignored. But for those who maintain the project, if they don’t understand the class names defined in tailwindcss, it may be a very headache. For high personalization, high interactivity, and highly customized front-end project style solutions, the atomized CSS form is more suitable.\nWhen developing with vscode, we can install a Tailwind CSS IntelliSense plug-in to prompt for class names to help us develop better.\nVueUse A practical toolset for Vue’s compositional API VueUse, a set of practical tools based on Vue’s composite API. It encapsulates many common and reusable functions. It supports Vue2, Vue3, and Nuxt. It can be understood as the lodash of the Vue world. It can be used out of the box and is very convenient.\nThe core package has 140+ combined functions, and also provides 10 extension plug-ins, totaling about 290+ functions.\nFunction\nState: Manage user status (such as: global, local storage, session storage)\nElements: Element processing related (such as: element dragging, element visibility, window size)\nBrowser: Browser related (such as: updating page title, media query, clipboard)\nSensors: monitor different DOM events, input events, network events, etc.\nNetwork: Network request related\nAnimation: Transitions, timeouts and timing functions\nComponent: Provides abbreviations for different component methods\nWatch: Provides some monitors (such as: monitoring changes after promises, anti-shake monitoring, throttling monitoring)\nReactivity: Responsive function related\nArray: Responsive array processing\nTime: Provides response time formatting function\nUtilities: general functions, such as throttling, anti-shake, etc.\nPlugin: Electron、Firebase、Head、Integrations、Math、Motion、Router、RxJS、SchemaOrg、Sound\nThe core functions are all in the packages/core folder.\nInstallation\n1 2 3 4 5 npm i @vueuse/core // or yarn add @vueuse/core // or pnpm add @vueuse/core Use\nall it directly as a function: for example, const { toggle } = useFullScreen(), which is also our most commonly used method.\nUsed as a component: Some functions are provided, such as \u0026lt;UseFullscreen\u0026gt;\u0026lt;UseFullscreen\u0026gt; .\nWhen called directly as a function, you can receive responsive parameters. Most functions will return a refs object, and you can use object destructuring to obtain the required content. Functions usually start with use.\nFor component usage, in addition to installing the @vueuse/core core package, you also need to install @vueuse/components, that is\n1 pnpm add @vueuse/core @vueuse/components VueUse encapsulates many practical functions, such as: clipboard (useClipboard), anti-shake (useDebounceFn), setting the title of the web page (useTitle), and listening for events (useEventListener). Page uninstallation can automatically help us delete event monitoring without us having to delete it manually. etc. Before encapsulating hooks yourself, you can go to the official website to see if they have been encapsulated to improve development efficiency.\nVueUse also has good interactive documentation and function demonstrations. It is written in TS. The core source code of each function is relatively small and easy to read. In addition to using its encapsulated functions, we can also learn function encapsulation skills by looking at its source code. Learn good coding habits.\nWhy is vite faster than webpack? When building during webpack development, your entire application will be crawled and built by default before it can provide services. This will cause any error in your project (even if the current error is not a module referenced on the homepage), it will still affect it. to your entire project build. So the bigger your project is, the longer the build time will be and the slower the project startup will be.\nVite will not build your entire project at the beginning, but will divide the modules in the reference into two parts: dependency and source code (project code). For the source code part, it will split the code modules according to routing, and will only go Build what you have to build from the get-go.\nAt the same time, Vite provides the source code to the browser in the form of native ESM, allowing the browser to take over part of the packaging work.\nvite development configuration Configure path alias\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // vite.config.js import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import {join} from \u0026#34;path\u0026#34; // https://vitejs.dev/config/ export default defineConfig({ plugins: [vue()], resolve: { alias: { \u0026#34;@\u0026#34;: join(__dirname, \u0026#34;/src\u0026#34;) } } }) Development environment solves cross-domain issues\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import {join} from \u0026#34;path\u0026#34; // https://vitejs.dev/config/ export default defineConfig({ plugins: [vue()], resolve: { alias: { \u0026#34;@\u0026#34;: join(__dirname, \u0026#34;/src\u0026#34;) } }, server: { proxy: { // Proxy all /api requests \u0026#34;/api\u0026#34;: { target: \u0026#34;target origin\u0026#34;, // Change the origin of the request to the value of target changeOrigin: true, } } } }) Configure environment variables\nEnterprise-level projects will distinguish many environments for us to test and trial. We cannot let our test data contaminate the online data. Therefore, Vite also provides a way to configure our environment files, allowing us to easily select the corresponding interface address and so on through some environments.\nThe format of .env.[mode] can load different content in different modules.\nEnvironment loading priority:\nA file that specifies a pattern (e.g. .env.production ) will take precedence over a generic form (e.g. .env ).\nIn addition, environment variables that already exist when Vite is executed have the highest priority and will not be overwritten by the .env class file. For example when running VITE_SOME_KEY=123 vite build .\n.env The class file will be loaded when Vite starts, and changes will take effect after restarting the server.\nWe can obtain loaded environment variables starting with VITE_ through import.meta.env.* in the code.\n1 2 3 4 5 6 // .env.development VITE_BASE_API = \u0026#34;/api\u0026#34; // package.json \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;VITE_BASE_API=/oop vite\u0026#34;, } After executing yarn dev , we can find that import.meta.env.VITE_BASE_API is the parameter specified in the command line.\nAutomatic registration of common components Vite’s Glob import function: This function can help us import multiple modules in the file system\n1 2 3 4 5 6 const modules = import.meta.glob(\u0026#39;./dir/*.js\u0026#39;) // translate： const modules = { \u0026#39;./dir/foo.js\u0026#39;: () =\u0026gt; import(\u0026#39;./dir/foo.js\u0026#39;), \u0026#39;./dir/bar.js\u0026#39;: () =\u0026gt; import(\u0026#39;./dir/bar.js\u0026#39;) } Then introduce it through the way of registering asynchronous components provided by vue. Vue’s defineAsyncComponent method: This method can create an asynchronous component that is loaded on demand. Based on the above two methods, the component can be automatically registered.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // import SvgIcon from \u0026#39;./svg-icon/index.vue\u0026#39; // import HmPopup from \u0026#39;./popup/index.vue\u0026#39; import { defineAsyncComponent } from \u0026#39;vue\u0026#39; // const components = [SvgIcon, HmPopup] export default { install(app) { // components.forEach((element) =\u0026gt; { // app.component(element.name, element) // }) // Get all index.vue under the current path const components = import.meta.glob(\u0026#39;./*/index.vue\u0026#39;) // Traverse the obtained component module for (let [key, component] of Object.entries(components)) { const componentName = \u0026#39;hm-\u0026#39; + key.replace(\u0026#39;./\u0026#39;, \u0026#39;\u0026#39;).split(\u0026#39;/\u0026#39;)[0] // asynchronously import components under specified path using defineAsyncComponent app.component(componentName, defineAsyncComponent(component)) } } } In fact, if the components all provide the name attribute, we can directly manually introduce each component module and then achieve semi-automatic registration.\nThe advantage of providing a name for a component is that it is convenient to find each component when debugging in vue-devtools.\nIn the vue official website, in versions 3.2.34 or above, the single-file component using \u0026lt;script setup\u0026gt; will automatically generate the corresponding name option based on the file name, even when used with \u0026lt;KeepAlive\u0026gt; There is no need to declare manually when using it. But for us developers whose file names are all index.vue, there is no way.\nUse svg as icon First we need to encapsulate a general svg component to use svg icons.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;use :xlink:href=\u0026#34;symbolId\u0026#34; :fill=\u0026#34;color\u0026#34; :fillClass=\u0026#34;fillClass\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { computed } from \u0026#39;vue\u0026#39; const props = defineProps({ name: { type: String, required: true }, color: { type: String }, fillClass: { type: String } }) // Generate a unique icon id #icon-xxx const symbolId = computed(() =\u0026gt; `#icon-${props.name}`) \u0026lt;/script\u0026gt; Then register the svg universal component globally. Here we use the plug-in method.\n1 2 3 4 5 6 7 import SvgIcon from \u0026#34;./svg-icon/index.vue\u0026#34; export default { install(app) { app.component(\u0026#34;SvgIcon\u0026#34;, SvgIcon) } } After registering directly through use in main.js, it can be used.\n1 \u0026lt;svg-icon name=\u0026#34;back\u0026#34;\u0026gt;\u0026lt;/svg-icon\u0026gt; However, the path of the svg icon cannot be known in the project. We need to use the vite-plugin-svg-icons plug-in to specify the search path.\nConfigure svg related content in vite.config.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import {join} from \u0026#34;path\u0026#34; import {createSvgIconsPlugin} from \u0026#34;vite-plugin-svg-icons\u0026#34; // https://vitejs.dev/config/ export default defineConfig({ plugins: [ vue(), createSvgIconsPlugin({ // Specify the icon folders that need to be cached iconDirs: [join(__dirname, \u0026#34;/src/assets/icons\u0026#34;)], // Specify symbolId format, which is the href used by svg.use symbolId: \u0026#34;icon-[name]\u0026#34; }) ], }) Import and register svg-icons in main.js, it will register all svg images in the specified folder on the homepage.\n1 2 // register svg-icons import \u0026#34;virtual:svg-icons-register\u0026#34; Persistent state data vuex-persistedstate vuex-persistedstate, as a plug-in of vuex, can persist the data in the store to prevent data loss due to page refresh and other operations. (When running again, the cached data will be used as the initial value of the corresponding state attribute)\n1 2 3 4 5 6 7 8 9 10 import { createStore } from \u0026#34;vuex\u0026#34;; import createPersistedState from \u0026#34;vuex-persistedstate\u0026#34;; const store = createStore({ // ... plugins: [createPersistedState({ key : \u0026#39;categoryList\u0026#39;, // The key for cache, paths: [\u0026#39;category\u0026#39;], // An array of any paths to partially persist the state. If no paths are given, the complete state is persisted. If an empty array is given, no state will be persisted. The path must be specified using dot notation. If using modules, include the module name. Such as: \u0026#34;auth.user\u0026#34;. Default is undefined. })], }); Theme switching implementation Implementation idea: (This solution is based on the tailwindcss plug-in)\nThe tailwind.config.js configuration file needs to be added\n1 darkMode: \u0026#39;class\u0026#39; Store current theme type in vuex\n1 2 3 4 5 6 7 8 9 10 11 12 13 // current theme import { THEME_LIGHT } from \u0026#39;@/constants\u0026#39; export default { namespaced: true, state: () =\u0026gt; ({ themeType: THEME_LIGHT }), mutations: { setThemeType(state, theme) { state.themeType = theme } } } Modify the theme type in vuex when switching themes\n1 2 3 const handleHeaderTheme = (item) =\u0026gt; { store.commit(\u0026#39;theme/setThemeType\u0026#39;, item.type) } Monitor changes in theme types: theme-light, theme-dark, theme-system, and dynamically set the class attribute value for the html tag. He just adds the css prefix to the corresponding theme to the html element when switching. To achieve the effect of switching themes\n1 2 3 4 \u0026lt;html lang=\u0026#34;en\u0026#34; class=\u0026#34;dark\u0026#34;\u0026gt; \u0026lt;!-- To add a dark mode CSS style, simply prepend it with the \u0026#34;dark\u0026#34; prefix. --\u0026gt; \u0026lt;div class=\u0026#34;bg-zinc-300 dark:bg-zinc-900\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/html\u0026gt; After the value of the class attribute of html changes, it will match the class of the corresponding theme, thereby displaying the color of the corresponding theme.\nSet two sets of class names for labels: one for white and one for dark.\n1 \u0026lt;div class=\u0026#34;bg-zinc-300 dark:bg-zinc-900\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; To follow the theme changes of the system, you need to use Window.matchMedia(). This method receives a mediaQueryString (a string parsed by the media query). We can pass the prefers-color-scheme to this string, that is, window.matchMedia('(prefers-color-scheme: dark)') The method returns a MediaQueryList object.\nThis object has a change event that can listen for system theme changes.\nThe event object matches attribute can determine the theme. (true: dark theme, false: light theme).\nTheme modification tool function\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import { watch } from \u0026#39;vue\u0026#39; import store from \u0026#39;../store\u0026#39; import { THEME_DARK, THEME_LIGHT, THEME_SYSTEM } from \u0026#39;../constants\u0026#39; /** * Listen for system theme changes */ let matchMedia = \u0026#39;\u0026#39; function changeSystemTheme() { // Only need to be initialized once if (matchMedia) return matchMedia = window.matchMedia(\u0026#39;(prefers-color-scheme: dark)\u0026#39;) // This also listens for theme switching, and then calls to modify the HTML class matchMedia.addEventListener(\u0026#39;change\u0026#39;, (event) =\u0026gt; { changeTheme(THEME_SYSTEM) }) } /** * Theme matching function * @param val {*} Theme tag */ const changeTheme = (val) =\u0026gt; { let htmlClass = \u0026#39;\u0026#39; if (val === THEME_LIGHT) { // Light theme htmlClass = THEME_LIGHT } else if (val === THEME_DARK) { // Dark theme htmlClass = THEME_DARK } else { // Follow the system changeSystemTheme() // True is dark mode, false is light theme htmlClass = matchMedia.matches ? THEME_DARK : THEME_LIGHT } document.querySelector(\u0026#39;html\u0026#39;).className = htmlClass } /** * Initialize the theme */ export default () =\u0026gt; { // Listen for theme switching and modify the value of the HTML class watch(() =\u0026gt; store.getters.themeType, changeTheme, { immediate: true }) } Implement waterfall flow layout The construction of the entire waterfall flow component generally needs to be divided into several parts\nPass key data through props data: data source\nnodeKey: unique identifier\ncolumn: number of columns rendered\ncolumnSpacing: column spacing\nrowSpacing: row spacing\npicturePreReading: Whether picture pre-rendering is required\nWaterfall rendering mechanism: layout is completed through absolute and relative. The layout logic is: each item should be arranged horizontally, and the items in the second row are sequentially connected to the current shortest column.\nPass the key data involved in each item to the item view through the scope slot.\nCalculate the width of each column\nThe general calculation method is to get the container width (excluding margin, padding, border),\n1 2 3 4 5 6 7 8 9 10 11 12 13 const useContainerWidth = () =\u0026gt; { const { paddingLeft, paddingRight } = getComputedStyle( containerRef.value, null ) // Container left margin containerLeft.value = parseFloat(paddingLeft) // Container width containerWidth.value = containerRef.value.offsetWidth - parseFloat(paddingLeft) - parseFloat(paddingRight) } And get the total spacing of each item element in the container.\n1 2 3 4 // Total column spacing size (column - 1) * columnSpacing const columnSpacingTotal = computed(() =\u0026gt; { return (props.column - 1) * props.columnSpacing }) Then subtract the total spacing from the current container, divided by the number of columns.\n1 2 3 4 5 6 7 const useColumnWidth = () =\u0026gt; { // Get container width useContainerWidth() // Get column width columnWidth.value = (containerWidth.value - columnSpacingTotal.value) / props.column } Get the height of each element\nWhether the height of the image is defined. If the height is defined, the height of each item can be calculated directly.\n1 2 3 4 5 6 7 8 9 10 11 12 const useItemHeight = () =\u0026gt; { // Initialize item height list itemsHeight = [] // Get item element const itemElements = [...document.getElementsByClassName(\u0026#39;hm-waterfall-item\u0026#39;)] // Get item height itemElements.forEach((itemEl) =\u0026gt; { itemsHeight.push(itemEl.offsetHeight) }) // Render position useItemLocation() } If the height is not defined, we need to calculate the height after the image is loaded.\nGet item element\nGet the image path in the itm element\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Get all img elements in item */ export function getImgElements(itemElements) { const imgElements = [] itemElements.forEach((el) =\u0026gt; { imgElements.push(...el.getElementsByTagName(\u0026#39;img\u0026#39;)) }) return imgElements } /** * Get all image paths */ export function getAllImgSrc(imgElements) { const allImgSrc = [] imgElements.forEach((item) =\u0026gt; { allImgSrc.push(item.getAttribute(\u0026#39;src\u0026#39;)) }) return allImgSrc } Use the load event of the image object to determine whether the image is loaded, and then calculate the height. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 export function allImgComplete(allImgSrc) { // Store all promise objects for image loading const promises = [] // Loop through allImgSrc allImgSrc.forEach((imgSrc, index) =\u0026gt; { promises.push( new Promise((resolve) =\u0026gt; { const imgObj = new Image() imgObj.src = imgSrc imgObj.onload = () =\u0026gt; { resolve({ imgSrc, index }) } }) ) }) return Promise.all(promises) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const waitImgComplete = () =\u0026gt; { // Initialize item height list itemsHeight = [] // Get item elements const itemElements = [...document.getElementsByClassName(\u0026#39;hm-waterfall-item\u0026#39;)] // Get all img elements in item const imgElements = getImgElements(itemElements) // Get all image paths const allImgSrc = getAllImgSrc(imgElements) // Preload images and then calculate height allImgComplete(allImgSrc).then(() =\u0026gt; { itemElements.forEach((itemEl) =\u0026gt; { itemsHeight.push(itemEl.offsetHeight) }) }) // Render location useItemLocation() } Calculate the offset of each element\nThey are all calculated based on obtaining the minimum height of the column.\nYou need to initialize the height of each column to 0, use this object as a container, the key is the column subscript, and the value is the column height.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // The total height of the container const containerHeight = ref(0) // Store each column\u0026#39;s height. key: column index, val: column height const columnHeightObj = ref({}) /** * Create an object to store the height of each column. Initialize all as 0 */ const useColumnHeightObj = () =\u0026gt; { columnHeightObj.value = {} for (let i = 0; i \u0026lt; props.column; i++) { columnHeightObj.value[i] = 0 } } When getting the left offset, we need to get the minimum height column.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** * Get the minimum height */ export function getMinHeight(columnHeightObj) { const columnHeightValue = Object.values(columnHeightObj) return Math.min(...columnHeightValue) } /** * Get the column with the minimum height */ export function getMinHeightColumn(columnHeightObj) { // Get the minimum height const minHeight = getMinHeight(columnHeightObj) const columns = Object.keys(columnHeightObj) const minHeightColumn = columns.find((col) =\u0026gt; { return columnHeightObj[col] === minHeight }) return minHeightColumn } After getting the minimum height column, just multiply it by the column width and add the spacing.\n1 2 3 4 5 6 7 8 9 10 11 /** * Calculate the left offset of the current element */ const getItemLeft = () =\u0026gt; { // Get the column with the minimum height const column = getMinHeightColumn(columnHeightObj.value) // Calculate left return ( (columnWidth.value + props.columnSpacing) * column + containerLeft.value ) } To calculate the top offset, we can directly get the minimum height column height.\n1 2 3 4 5 6 7 8 /** * Calculate the top offset of the current element */ const getItemTop = () =\u0026gt; { // Get the column\u0026#39;s minimum height const minHeight = getMinHeight(columnHeightObj.value) return minHeight } It should be noted that when we complete each element offset assignment, we need to recalculate the height of the minimum height column.\n1 2 3 4 5 6 7 8 9 10 /** * Recalculate the height of the column with the minimum height */ const increasingHeight = (index) =\u0026gt; { // Get the column with the minimum height const column = getMinHeightColumn(columnHeightObj.value) // Recalculate the height for this column columnHeightObj.value[column] = columnHeightObj.value[column] + itemsHeight[index] + props.rowSpacing } Finally, assign the maximum height column height to the container height.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Render position const useItemLocation = () =\u0026gt; { props.data.forEach((item, index) =\u0026gt; { // Avoid repeated calculation if (item._style) return // Obtain the minimum height and calculate left, top in _style item._style = {} item._style.left = getItemLeft() item._style.top = getItemTop() // Every time the offset is set, the height of the shortest column needs to be updated. increasingHeight(index) }) // Once all items have their offsets set, set the container height to the height of the tallest column containerHeight.value = getMaxHeight(columnHeightObj.value) } ","date":"2024-02-12T16:22:33+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*DYdGMu4svwz6UJ6Izma43g.png","permalink":"http://localhost:1313/p/vue3-development-solutions-one/","title":"Vue3 Development Solutions One"},{"content":"ES7 The following features have been added to ES2016 (ES7)\nArray.prototype.includes includes() method is used to determine whether an array or string contains a specified value\nReturn value: true if included, false otherwise.\nSyntax\narr.includes(valueToFind)\narr.includes(valueToFind, fromIndex)\n1 2 3 4 let arr = [1, 2, 3, 4]; arr.includes(3); // true arr.includes(5); // false arr.includes(3, 1); // true fromIndex is greater than or equal to the array length\nReturn false\n1 2 arr.includes(3, 3); // false arr.includes(3, 20); // false The calculated index is less than 0\nIf fromIndex is negative, use the index calculated by arrlength + fromIndex as the new fromIndex . If the new fromIndex is negative, then Search the entire array.\n1 2 arr.includes(3, -100); // true arr.includes(3, -1); // false Exponentiation Operator Power operation Power operator ** , equivalent to Math.pow()\n1 2 5 ** 2 // 25 Math.pow(5, 2) // 25 ES8 ES2017 (ES8) has added the following features\nAsync functions\nObject.entries\nObject.values\nObject.getOwnPropertyDescriptors\nTrailing commas\nAsync functions Async functions is a function declared by async and the async function is an instance of the AsyncFunction constructor, where await is allowed Keywords.\nReturn value: a Promise\nSyntax\n1 2 3 async function name([param[, param[, ...param]]]) { // statements } Example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 const promise = () =\u0026gt; { console.log(\u0026#39;1\u0026#39;); return new Promise((resolve, reject) =\u0026gt; { resolve(\u0026#39;2\u0026#39;); }); }; const asyncFun = async() =\u0026gt; { console.log(\u0026#39;3\u0026#39;); const test = await promise(); console.log(\u0026#39;4\u0026#39;, test); } asyncFun(); // 3 1 4 2 Object.entries Return value: The Object.entries() method returns an array of key-value pairs for the given object\u0026rsquo;s own enumerable properties.\nSyntax\n1 Object.entries(obj); Example:\n1 2 let obj = {a: 1, b: 2}; Object.entries(obj); // [[\u0026#39;a\u0026#39;, 1], [\u0026#39;b\u0026#39;, 2]] Object.values Return value: The Object.values() method returns an array of the enumerable property values ​​of the given object itself.\nSyntax\n1 Object.values(obj); Example:\n1 2 let obj = {a: 1, b: 2}; Object.values(obj); // [1, 2] Object.getOwnPropertyDescriptors Return value: The Object.getOwnPropertyDescriptors() method is used to obtain the descriptors of all its own properties of an object.\nSyntax\n1 Object.getOwnPropertyDescriptors(obj); Example:\n1 2 let obj = {a: 1, b: 2}; Object.getOwnPropertyDescriptors(obj); // [a: {configurable: true, enumerable: true, value: 1, writable: true}, b: {configurable: true, enumerable: true, value: 2, writable: true}] Trailing commas If you want to add a new attribute, and the previous line already used a trailing comma, you can just add the new line without modifying the previous line.\nJSON does not allow trailing commas\nExample:\nTrailing comma in literal 1 2 3 4 5 6 7 8 9 10 11 // Object let obj = { a: 1, b: 2 } // Array let arr = [ 1, 2 ] Trailing comma in function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Parameter definition function(x, y) {} function(x, y,) {} (x, y) =\u0026gt; {} (x, y,) =\u0026gt; {} // function call fun(x, y) fun(x, y,) // Illegal trailing comma // Containing no parameters or adding commas after the remaining parameters are illegal trailing commas. function(,) {} (,) =\u0026gt; {} fn(,) function(...arg,) {} (...arg,) =\u0026gt; {} Trailing comma in deconstruction 1 2 let [a, b,] = [1, 2]; let {x, y} = {x: 1, y: 2}; String.prototype.padStart() padStart() Fills the current string with another string.\nReturn value: A new string formed by filling the specified padding string at the beginning of the original string until the target length.\nSyntax\n1 2 str.padStart(targetLength); str.padStart(targetLength, padString); targetLength: The target length to which the current string needs to be filled. If this value is less than the length of the current string, the current string itself is returned.\npadString (optional): padding string. If the string is too long and the padded string length exceeds the target length, only the leftmost part is retained and the other parts are truncated. The default value for this parameter is “ “.\nExample:\n1 2 3 4 5 \u0026#39;abc\u0026#39;.padStart(10); // \u0026#34; abc\u0026#34; \u0026#39;abc\u0026#39;.padStart(10, \u0026#34;foo\u0026#34;); // \u0026#34;foofoofabc\u0026#34; \u0026#39;abc\u0026#39;.padStart(6,\u0026#34;123465\u0026#34;); // \u0026#34;123abc\u0026#34; \u0026#39;abc\u0026#39;.padStart(8, \u0026#34;0\u0026#34;); // \u0026#34;00000abc\u0026#34; \u0026#39;abc\u0026#39;.padStart(1); // \u0026#34;abc\u0026#34; String.prototype.padEnd() The padEnd() method fills the current string with a string (repeatedly if necessary).\nReturn value: Returns a new string formed by filling the specified padding string at the end of the original string until the target length.\nSyntax\n1 2 str.padEnd(targetLength) str.padEnd(targetLength, padString) targetLength: The target length to which the current string needs to be filled. If this value is less than the length of the current string, the current string itself is returned.\npadString (optional): padding string. If the string is too long and the padded string length exceeds the target length, only the leftmost part is retained and the other parts are truncated. The default value for this parameter is “ “.\nExample:\n1 2 3 4 \u0026#39;abc\u0026#39;.padEnd(10); // \u0026#34;abc \u0026#34; \u0026#39;abc\u0026#39;.padEnd(10, \u0026#34;foo\u0026#34;); // \u0026#34;abcfoofoof\u0026#34; \u0026#39;abc\u0026#39;.padEnd(6, \u0026#34;123456\u0026#34;); // \u0026#34;abc123\u0026#34; \u0026#39;abc\u0026#39;.padEnd(1); // \u0026#34;abc\u0026#34; ES9 ES2018 (ES9) has added the following features\nAsync iterators\nObject rest properties\nObject spread properties\nPromise.prototype.finally\nAsync iterators Return value: The next() method of Async iterator object returns a Promise . The return value of this Promise can be parsed into the format of {value, done}\nSyntax\n1 iterator.next().then(({value, done}) =\u0026gt; {}); Example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const asyncIterator = () =\u0026gt; { const array = [1, 2]; return { next: function() { if(array.length) { return Promise.resolve({ value: array.shift(), done: false }); } return Promise.resolve({ done: true }); } } } let iterator = asyncIterator(); const test = async() =\u0026gt; { await iterator.next().then(console.log); // {value: 1, done: false} await iterator.next().then(console.log); // {value: 2, done: false} await iterator.next().then(console.log); // {done: true} } test(); You can use for-await-of to call functions asynchronously in a loop\n1 2 3 4 5 6 7 8 9 10 11 12 13 const promises = [ new Promise((resolve) =\u0026gt; resolve(1)), new Promise((resolve) =\u0026gt; resolve(2)), new Promise((resolve) =\u0026gt; resolve(3)), ]; const test = async() =\u0026gt; { for await (const p of promises) { console.log(\u0026#39;p\u0026#39;, p); } }; test(); Object rest properties Example:\n1 2 3 4 5 6 7 8 9 10 11 12 let test = { a: 1, b: 2, c: 3, d: 4 } let {a, b, ...rest} = test; console.log(a); // 1 console.log(b); // 2 console.log(rest); // {c: 3, d: 4} Note: null Cannot use spread operator\nObject spread properties Example:\n1 2 3 4 5 6 7 8 9 let test = { a: 1, b: 2 } let result = {c: 3, ...test}; console.log(result); // {c: 3, a: 1, b: 2} let test = null; let result = {c: 3, ...test}; // {c: 3} Promise.prototype.finally At the end of Promise , whether the result is resolved or rejected , the method in finally will be called\nThe callback function in finally does not accept any parameters\nReturn value: a Promise\nSyntax\n1 2 3 4 5 6 7 8 9 10 const promise = new Promise((resolve, reject) =\u0026gt; { resolve(\u0026#39;resolved\u0026#39;); reject(\u0026#39;rejectd\u0026#39;); }) promise.then((res) =\u0026gt; { console.log(res); }).finally(() =\u0026gt; { console.log(\u0026#39;finally\u0026#39;) }); Example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const promise = new Promise((resolve, reject) =\u0026gt; { resolve(1); reject(2); }); const test = () =\u0026gt; { console.log(3); promise.then((res) =\u0026gt; { console.log(4, res); }).catch(err =\u0026gt; { console.log(5, err); }).finally(() =\u0026gt; { console.log(6); }); }; test(); // 3 4 1 6 ES10 ES2019 (ES10) has added the following new features\nArray.prototype.{flat, flatMap}Flatten nested arrays\nObject.fromEntries\nString.prototype.{trimStart, trimEnd}\nSymbol.prototype.description\nOptional catch binding\nArray.prototype.sort() is now required to be stable\nArray.prototype.{flat, flatMap} Flatten nested arrays Array.prototype.flat\nThe flat() method will traverse the recursive array according to a specifiable depth, and merge all elements with the elements in the traversed sub-array into a new array and return it.\nReturn value: a new array, the old array will not be changed.\nSyntax\n1 arr.flat([depth]); Example:\n1 2 3 4 5 6 const arr = [1, 2, [[[[3, 4]]]]]; arr.flat(); // [1, 2, [[[3, 4]]]] arr.flat(3); // [1, 2, [3, 4]] arr.flat(-1); // [1, 2, [[[[3, 4]]]]] arr.flat(Infinity); // [1, 2, 3, 4] Note: flat() will remove empty items from the array\n1 2 let arr = [1, 2, , , 3]; arr.flat(); // [1, 2, 3] Implement flat\n1 2 3 4 5 6 7 8 9 10 11 function customFlat(arr, depth = 1) { if(!Array.isArray(arr) || depth \u0026lt;= 0) { return arr; } return arr.reduce((pre, cur) =\u0026gt; { if(Array.isArray(arr)) { return pre.concat(customFlat(cur, depth - 1)); } return pre.concat(cur); }, []); } Array.prototype.flatMap\nThe flatMap() method first maps each element of the array (with a depth value of 1) using the mapping function, and then compresses the result into a new array.\nReturn value: a new array with each element being the result of the callback function.\nSyntax\n1 2 3 arr.flatMap(function callback(currentVal[, index[, array]]) { }[, thisArg]) callback: a function called to generate a new array\ncurrentVal: The element currently being processed by the array\nindex: optional, the index of the element being processed\narray: optional, the array to be called\nthisArg: this value used when executing the callback function\nExample:\n1 2 3 4 5 let arr = [\u0026#39;My name\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;Lisa\u0026#39;]; let newArr1 = arr.flatMap(cur =\u0026gt; cur.split(\u0026#39; \u0026#39;)); let newArr2 = arr.map(cur =\u0026gt; cur.split(\u0026#39; \u0026#39;)); console.log(newArr1); // [\u0026#34;My\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;Lisa\u0026#34;] console.log(newArr2); // [[\u0026#34;My\u0026#34;, \u0026#34;name\u0026#34;], [\u0026#34;is\u0026#34;], [\u0026#34;\u0026#34;], [\u0026#34;Lisa\u0026#34;]] Object.fromEntries The fromEntries() method converts a list of key-value pairs into an object\nReturn value: a new object\nSyntax\n1 Object.fromEntries(iterable) iterable: Array, Map and other iterable objects\nExample:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let map = new Map([[\u0026#39;a\u0026#39;, 1], [\u0026#39;b\u0026#39;, 2]]); let mapToObj = Object.fromEntries(map); console.log(mapToObj); // {a: 1, b: 2} let arr = [[\u0026#39;a\u0026#39;, 1], [\u0026#39;b\u0026#39;, 2]]; let arrToObj = Object.fromEntries(arr); console.log(arrToObj); // {a: 1, b: 2} let obj = {a: 1, b: 2}; let newObj = Object.fromEntries( Object.entries(obj).map( ([key, val]) =\u0026gt; [key, val * 2] ) ); console.log(newObj); // {a: 2, b: 4} String.prototype.{trimStart, trimEnd} String.prototype.trimStart\nThe trimStart() method is used to remove whitespace characters at the beginning of a string.\ntrimLeft() is its alias.\nReturn value: a new string with the spaces on the left side of this string removed.\nSyntax\n1 2 str.trimStart(); str.trimLeft(); Example:\n1 2 3 let str = \u0026#39; a b cd \u0026#39;; str.trimStart(); // \u0026#39;a b cd \u0026#39; str.trimLeft(); // \u0026#39;a b cd \u0026#39; String.prototype.trimEnd\nThe trimEnd() method is used to remove whitespace characters at the end of a string.\nReturn value: a new string, the spaces on the right side of this string have been removed\nSyntax\n1 2 str.trimEnd() str.trimRight() Example:\n1 2 3 let str = \u0026#39; a b cd \u0026#39;; str.trimEnd(); // \u0026#39; a b cd\u0026#39; str.trimRight(); // \u0026#39; a b cd\u0026#39; Symbol.prototype.description description is a read-only property\nReturn value: It returns a string with an optional description of the Symbol object\nSyntax\n1 2 3 Symbol(\u0026#39;myDescription\u0026#39;).description; Symbol.iterator.description; Symbol.for(\u0026#39;foo\u0026#39;).description; Example:\n1 2 3 Symbol(\u0026#39;foo\u0026#39;).description; // \u0026#39;foo\u0026#39; Symbol().description; // undefined Symbol.for(\u0026#39;foo\u0026#39;).description; // \u0026#39;foo\u0026#39; Optional catch binding Optional capture binding, allowing omission of the catch binding and the parentheses following it\nPrevious usage:\n1 2 3 4 5 try { } catch(err) { console.log(\u0026#39;err\u0026#39;, err); } ES10 usage:\n1 2 3 4 5 try { } catch { } The strengthening power of JSON.stringify() JSON.stringify() In ES10, the problem of display errors for some out-of-range Unicode has been fixed. Therefore, characters within 0xD800-0xDFF will cause display errors because they cannot be encoded into UTF-8. In ES10, it will use escape characters to process these characters instead of encoding, so they will be displayed normally.\n1 JSON.stringify(\u0026#39;😊\u0026#39;); // \u0026#39;\u0026#34;😊\u0026#34;\u0026#39; Revision Function.prototype.toString() The previous toString method from Object.prototype.toString() is now a Function.prototype.toString() method that returns a string representing the source code of the current function. Previously, only this function would be returned, without spaces, comments, etc.\n1 2 3 4 5 6 7 8 9 function foo() { // es10 console.log(\u0026#39;imooc\u0026#39;) } console.log(foo.toString()); // function foo() { // // es10 // console.log(\u0026#39;imooc\u0026#39;) // } ES11 ES2020 (ES11) has added the following new features\nNullish coalescing Operator\nOptional chaining\nglobalThis\nBigInt\nString.prototype.matchAll()\nPromise.allSettled()\nDynamic import (import on demand)\nNullish coalescing Operator Null value merging operator ( ?? )\nThe null value merging operator ( ?? ) is a logical operator that returns the right operator when the left operand is null or undefined , otherwise returns the left-hand operator.\n1 2 3 undefined ?? \u0026#39;foo\u0026#39; // \u0026#39;foo\u0026#39; null ?? \u0026#39;foo\u0026#39; // \u0026#39;foo\u0026#39; \u0026#39;foo\u0026#39; ?? \u0026#39;bar\u0026#39; // \u0026#39;foo\u0026#39; Logical OR operator ( || )\nThe logical OR operator ( || ) will return the right operand when the left operand is false, that is, if you use || to set default values ​​for some variables , unexpected situations may occur. For example, 0, \u0026lsquo;\u0026rsquo;, NaN, false:\n1 2 3 4 5 6 7 8 9 10 11 0 || 1 // 1 0 ?? 1 // 0 \u0026#39;\u0026#39; || \u0026#39;bar\u0026#39; // \u0026#39;bar\u0026#39; \u0026#39;\u0026#39; ?? \u0026#39;bar\u0026#39; // \u0026#39;\u0026#39; NaN || 1 // 1 NaN ?? 1 // NaN false || \u0026#39;bar\u0026#39; // \u0026#39;bar\u0026#39; false ?? \u0026#39;bar\u0026#39; // false Note\nYou cannot use ?? with AND ( \u0026amp;\u0026amp; ) OR ( || ), and an error will be reported.\n1 2 null || undefined ?? \u0026#34;foo\u0026#34;; // throw SyntaxError true || undefined ?? \u0026#34;foo\u0026#34;; // throw SyntaxError Optional chaining Optional chaining The optional chain operator ( ?. ) allows reading the value of a property located deep in the chain of connected objects without having to explicitly verify that each reference in the chain is valid. The ?. operator functions similarly to the . chaining operator, except that when referenced as null or undefined An error will be reported, and the return value of the link expression is undefined .\nPrevious writing:\n1 2 3 const street = user \u0026amp;\u0026amp; user.address \u0026amp;\u0026amp; user.address.street; const num = user \u0026amp;\u0026amp; user.address \u0026amp;\u0026amp; user.address.getNum \u0026amp;\u0026amp; user.address.getNum(); console.log(street, num); ES11:\n1 2 3 const street2 = user?.address?.street; const num2 = user?.address?.getNum?.(); console.log(street2, num2); Note: Optional chains cannot be used for assignment:\n1 2 let object = {}; object?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment globalThis Previously, in the Web, global objects could be obtained through window and self , but in node.js, global must be used.\nIn loose mode, you can return this in a function to get the global object, but in strict mode and module environment, this will return undefined .\nIn the past, to obtain the global object, you could define a function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const getGlobal = () =\u0026gt; { if (typeof self !== \u0026#39;undefined\u0026#39;) { return self } if (typeof window !== \u0026#39;undefined\u0026#39;) { return window } if (typeof global !== \u0026#39;undefined\u0026#39;) { return global } throw new Error(\u0026#39;can\u0026#39;t find global object\u0026#39;) } const globals = getGlobal() console.log(globals) globalThis now provides a standard way to obtain the global object\u0026rsquo;s own value in different environments.\nBigInt BigInt is a built-in object used to create integers larger than 2⁵³ — 1 (the largest number that can be created by Number). Can be used to represent arbitrarily large integers\nHow to define a BigInt\nAdd n after an integer literal, for example 10n\nCall function BigInt() and pass an integer or string value, such as BigInt(10)\nFeatures of BigInt\nBigInt cannot be used in methods in Math objects;\nBigInt cannot be mixed with any Number instance, both must be converted to the same type. Note, however, that BigInt may lose precision when converted to Number.\nWhen using BigInt, operations with decimals are rounded down\nBigInt and Number are not strictly equal, but are loosely equal\n1 2 0n === 0 // false 0n == 0 // true BigInt and Number can be compared 1 2 2n \u0026gt; 2 // false 2n \u0026gt; 1 // true BigInt and Number can be mixed in an array for sorting 1 2 const mixed = [4n, 6, -12n, 10, 4, 0, 0n]; mixed.sort(); // [-12n, 0, 0n, 10, 4n, 4, 6] BigInt wrapped by Object is compared using the comparison rules of object, and is only equal when comparing with the same object. 1 2 3 4 0n === Object(0n); // false Object(0n) === Object(0n); // false const o = Object(0n); o === o // true BigInt methods\nBigInt.asIntN() — Converts a BigInt value to a signed integer between -2^(width-1) and 2^(width-1) — 1.\nBigInt.asUintN() — Converts a BigInt value to an unsigned integer between 0 and 2^(width) — 1.\nBigInt.prototype.toLocaleString() — Returns the language-sensitive form of this number as a string. Override the Object.prototype.toLocaleString() method.\nBigInt.prototype.toString() — Returns a string representing the specified number in the specified base. Override the Object.prototype.toString() method.\nBigInt.prototype.valueOf() — Returns the primitive value of the specified object. Override the Object.prototype.valueOf() method.\nWhy is there a Bigint proposal?\nIn JavaScript, Number.MAX_SAFE_INTEGER represents the maximum safe number, and the calculated result is 9007199254740991, that is, there will be no loss of precision within this number range (except for decimals). But once it exceeds this range, js will have inaccurate calculations, which has to rely on some third-party libraries to solve large number calculations. Therefore, the official proposed BigInt to solve this problem.\nString.prototype.matchAll() Returns an iterator containing all results matching the regular expression and grouped capturing groups.\n1 2 3 4 5 6 const regexp = /t(e)(st(\\d?))/g; const str = \u0026#39;test1test2\u0026#39;; const array = [...str.matchAll(regexp)]; console.log(array[0]); // [\u0026#34;test1\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;st1\u0026#34;, \u0026#34;1\u0026#34;] console.log(array[1]); // [\u0026#34;test2\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;st2\u0026#34;, \u0026#34;2\u0026#34;] Promise.allSettled() Class method that returns a promise after all given promises have been fulfilled or rejected, with an array of objects, each object representing the corresponding promise result.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Promise.allSettled([ Promise.resolve(33), new Promise((resolve) =\u0026gt; setTimeout(() =\u0026gt; resolve(66), 0)), 99, Promise.reject(new Error(\u0026#34;an error\u0026#34;)), ]).then((values) =\u0026gt; console.log(values)); // [ // { status: \u0026#39;fulfilled\u0026#39;, value: 33 }, // { status: \u0026#39;fulfilled\u0026#39;, value: 66 }, // { status: \u0026#39;fulfilled\u0026#39;, value: 99 }, // { status: \u0026#39;rejected\u0026#39;, reason: Error: an error } // ] Dynamic import (import on demand) import You can load a module when needed.\n1 2 3 4 5 6 7 8 9 button.addEventListener(\u0026#39;click\u0026#39;, event =\u0026gt; { import(\u0026#39;./dialogBox.js\u0026#39;) .then(dialogBox =\u0026gt; { dialogBox.open(); }) .catch(error =\u0026gt; { /* Error handling */ }) }); ES12 ES 2021 (ES12) has added the following new features\nLogical operators and assignment expressions (\u0026amp;\u0026amp;=, ||=, ??=)\nString.prototype.replaceAll()\nNumber separator\nPromise.any\nLogical operators and assignment expressions (\u0026amp;\u0026amp;=, ||=, ??=) \u0026amp;\u0026amp;= The logical AND assignment operator x \u0026amp;\u0026amp;= y is equivalent to x \u0026amp;\u0026amp; (x=y) : meaning that when x is true, x = y.\n1 2 3 4 5 6 7 8 let a = 1; let b = 0; a \u0026amp;\u0026amp;= 2; console.log(a); // 2 b \u0026amp;\u0026amp;= 2; console.log(b); // 0 ||= The logical OR assignment operator x ||= y is equivalent to x || (x = y) : meaning x = y only if x is false.\n1 2 3 4 5 6 7 const a = { duration: 50, title: \u0026#39;\u0026#39; }; a.duration ||= 10; console.log(a.duration); // 50 a.title ||= \u0026#39;title is empty.\u0026#39;; console.log(a.title); // \u0026#34;title is empty\u0026#34; ??= The logical null assignment operator x ??= y is equivalent to x ?? (x = y) : meaning that x = y only if x is null or undefined.\n1 2 3 4 5 6 7 const a = { duration: 50 }; a.duration ??= 10; console.log(a.duration); // 50 a.speed ??= 25; console.log(a.speed); // 25 String.prototype.replaceAll() Returns a new string in which all parts of the string that match pattern will be replaced by replacement. The original string remains unchanged.\npattern can be a string or RegExp;\nreplacement can be a string or a function that is called each time it is matched.\n1 \u0026#39;aabbcc\u0026#39;.replaceAll(\u0026#39;b\u0026#39;, \u0026#39;.\u0026#39;); // \u0026#39;aa..cc\u0026#39; When searching for a value using a regular expression, it must be global:\n1 2 3 \u0026#39;aabbcc\u0026#39;.replaceAll(/b/, \u0026#39;.\u0026#39;); // TypeError: replaceAll must be called with a global RegExp \u0026#39;aabbcc\u0026#39;.replaceAll(/b/g, \u0026#39;.\u0026#39;); // \u0026#34;aa..cc\u0026#34; Number separator ES12 allows JavaScript values ​​to use underscores (_) as separators, but does not specify the number of digits to separate them:\n1 123_00 Decimal and scientific notation can also use delimiters:\n1 2 0.1_23 1e10_00 NOTE:\nCannot be placed at the front or last of the value;\nTwo or more delimiters cannot be connected together;\nThere cannot be separators before and after the decimal point;\nIn scientific notation, there cannot be separators before or after e or E.\nPromise.any The method accepts a set of Promise instances as parameters, wraps them into a new Promise instance and returns it.\nAs long as one parameter instance becomes fulfilled, the wrapper instance will become fulfilled; if all parameter instances become rejected, the wrapper instance will become rejected.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const promise1 = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;promise1\u0026#34;); // reject(\u0026#34;error promise1 \u0026#34;); }, 3000); }); }; const promise2 = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;promise2\u0026#34;); // reject(\u0026#34;error promise2 \u0026#34;); }, 1000); }); }; const promise3 = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;promise3\u0026#34;); // reject(\u0026#34;error promise3 \u0026#34;); }, 2000); }); }; Promise.any([promise1(), promise2(), promise3()]) .then((first) =\u0026gt; { // As long as one request is successful, the first successful request is returned console.log(first); // return promise2 }) .catch((error) =\u0026gt; { // All three requests fail to come here console.log(\u0026#34;error\u0026#34;, error); }); ","date":"2024-02-11T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Wyu4L8Y0ciJ76ZkoP86gqw.jpeg","permalink":"http://localhost:1313/p/what-new-features-have-been-added-to-es789101112/","title":"What new features have been added to ES7,8,9,10,11,12?"},{"content":"Outline: Distinguishing between process and thread\nThe browser is multi-process\nWhat processes does a browser include?\nBenefits of multi-process browsing\nThe focus is on the browser kernel (rendering process)\nThe communication process between the Browser process and the browser kernel (Renderer process)\nSorting out the relationship between threads in the browser kernel GUI rendering thread and JS engine thread are mutually exclusive\nJS blocking page loading\nWebWorker, is that JavaScript’s multi-threading?\nWebWorker and SharedWorker\nBriefly comb through the browser rendering process The sequence of load events and DOMContentLoaded events\nDoes the loading of CSS block the rendering of DOM tree?\nOrdinary layers and composite layers\nDiscussing JavaScript’s runtime mechanism from the Event Loop Further supplement to the event loop mechanism\nTalking separately about the timer\nsetTimeout rather than setInterval\nAdvanced event loop: macrotask and microtask\nSummary\nDistinguishing between process and thread It’s quite normal for beginners to confuse threads and processes. Don’t worry about that. Let’s take a look at the following vivid metaphor:\nA process is like a factory, which has its independent resources\nFactories are independent from each other\nA thread is like a worker in the factory, multiple workers cooperate to complete tasks\nThere is one or more workers within a factory\nWorkers share space with each other\nLet’s further refine the concept:\nFactory resources -\u0026gt; Memory allocated by the system (an independent block of memory)\nFactories being independent -\u0026gt; Processes being independent from each other\nMultiple workers cooperate to complete tasks -\u0026gt; Multiple threads within a process cooperate to complete tasks\nThere is one or more workers within a factory -\u0026gt; A process is composed of one or more threads\nWorkers share work space -\u0026gt; Threads within the same process share the program’s memory space (including code segments, data sets, heap, etc.)\nThen, let’s reinforce this:\nOn a Windows computer, you can open the task manager and see a list of background processes. Yes, that’s where you can view the processes, and you can also see the memory resources and CPU occupancy rate of each process.\nSo, it should be easier to understand now: a process is the smallest unit of CPU resource allocation (the system will allocate memory to it)\nFinally, let’s describe it again with more official terms:\nA process is the smallest unit of CPU resource allocation (it is the smallest unit that can have resources and run separately)\nA thread is the smallest unit of CPU scheduling (a thread is a unit of program execution based on a process, and there can be multiple threads in a process)\nTips\nDifferent processes can communicate with each other, but the cost is high\nNowadays, the generally used terms: single-threaded and multi-threaded, both refer to single or multiple threads within one process. (So the core must belong to one process)\nBrowsers are multi-process After understanding the difference between process and thread, let’s get to know a bit about browsers: (first, here’s a simplified understanding)\nBrowsers are multi-process\nThe reason why a browser can run is that the system allocates resources (CPU, memory) to its processes\nTo simplify it, every time you open a Tab, it’s like creating an independent browser process.\nAs for the above points, please check the first image:\nIn the image, multiple tabs of the Chrome browser are opened, and you can see in Chrome’s task manager that there are multiple processes (each tab page has an independent process, along with a main process). If you are interested, you can try for yourself: if you open an extra Tab, the number of processes will normally increase by at least one.\nNote: Browsers should also have their own optimization mechanism. Sometimes, after opening multiple tabs, you can see in the Chrome task manager that some processes have been combined (so it’s not always the case that each Tab corresponds to one process).\nWhat processes does a browser include? Knowing that the browser is multi-process, let’s see what processes it actually includes: (to simplify understanding, only the main processes are listed)\nBrowser process: The main process of the browser (responsible for coordination, control), there is only one. Its functions include: Responsible for the display of the browser interface and interaction with the user. For example, forward, backward, etc.\nResponsible for the management of various pages, and the creation and destruction of other processes\nDraws the Bitmap of the Renderer process obtained from memory to the user interface\nManages network resources, downloads, etc.\nThird-party plug-in process: Each type of plug-in corresponds to one process, only created when the plug-in is used\nGPU process: At most one, used for 3D rendering, etc.\nBrowser rendering process (also known as the browser kernel) (Renderer process, internally multi-threaded): By default, each Tab page is a process and they do not affect each other. Its main functions include:\nPage rendering, script execution, event handling, etc. To enhance memory: opening a webpage in the browser is equivalent to starting a new process (a process with its own multiple threads)\nOf course, the browser sometimes combines multiple processes (for example, after opening multiple blank tabs, you may find that multiple blank tabs have been merged into one process), as shown in the picture.\nAdditionally, you can verify this by yourself through Chrome’s More Tools -\u0026gt; Task Manager.\nAdvantages of multi-process browsers Compared to single-process browsers, multi-process has the following advantages:\nAvoids a single page crash affecting the entire browser\nAvoids a third-party plugin crash affecting the entire browser\nTakes full advantage of multi-core\nIsolates plugins and other processes using the sandbox model, enhancing browser stability\nTo simplify: if the browser is single-process, then a crash on a certain Tab page would affect the entire browser, the experience would be quite poor; similarly, if it’s single-process, a plugin crash would also impact the entire browser; plus, multi-process has many other advantages…\nOf course, it also consumes more memory and other resources; it’s somewhat of a trade-off between space and time.\nThe focus is on the browser kernel (rendering process) Let’s focus now: we can see that, although there’re many processes mentioned above, for a regular frontend operation, what’s the most important thing? The answer is the rendering process\nYou can think of it this way: the rendering of the page, the execution of JS, and the event loop, all occur within this process. Let’s focus on this process next\nPlease remember, the browser’s rendering process is multi-threaded (if you don’t understand this point, please look back at the distinction between processes and threads).\nFinally, we get to the concept of threads 😭, how familiar. So, let’s see what threads it includes (listing some main resident threads):\nGUI Rendering Thread Responsible for rendering the browser interface, parsing HTML, CSS, building DOM tree and RenderObject tree, layout, and drawing, etc.\nWhen the interface needs to be repainted (Repaint) or a reflow is triggered due to some operation, this thread will execute\nNote that the GUI rendering thread and the JS engine thread are mutually exclusive. When the JS engine is executing, the GUI thread will be suspended (as if frozen), and GUI updates will be queued to be executed immediately when the JS engine is idle.\nJS Engine Thread Also known as JS kernel, responsible for processing Javascript scripts. (e.g., V8 Engine)\nThe JS engine thread is responsible for parsing Javascript scripts and running code.\nThe JS engine is always waiting for tasks in the task queue to arrive and then processes them. No matter when, there is only one JS thread running JS programs in a Tab page (renderer process)\nAgain, note that the GUI rendering thread and the JS engine thread are mutually exclusive. Therefore, if JS takes too long to execute, it will cause the page rendering to be incoherent and block the page rendering load.\nEvent Triggering Thread Belongs to the browser, not the JS engine, used to control the event loop (you can think it as the JS engine is too busy and needs the browser to help by opening another thread)\nWhen the JS engine executes code blocks like setTimeout (or it can come from other threads of the browser kernel, such as mouse clicks, AJAX asynchronous requests, etc.), it adds the corresponding tasks to the event thread\nWhen the corresponding event meets the trigger conditions, this thread will add the event to the end of the pending queue, waiting for the JS engine to process it\nNote that due to JS’s single thread, these events in the pending queue have to line up waiting for the JS engine to process (Only when the JS engine is idle will it execute them)\nTimer Trigger Thread The legendary thread where setInterval and setTimeout are located\nThe browser timer is not counted by the JavaScript engine, (since the JavaScript engine is single-threaded, if it is in a thread-blocking state, it will affect the accurate timing)\nTherefore, it counts and triggers timing on a separate thread (after timing is finished, it is added to the event queue, and executed only when the JS engine is idle)\nNote, W3C stipulates in the HTML standard that any time interval less than 4ms in setTimeout is considered as 4ms.\nAsynchronous HTTP Request Thread After the connection is established in XMLHttpRequest, a new thread is opened by the browser for the request\nOnce a state change is detected, if a callback function is set, the asynchronous thread generates a state change event, adds this callback to the event queue again, to be executed by the JavaScript engine.\nIf you’re tired at this point, feel free to rest a bit, as these concepts take some time to digest. After all, the upcoming event loop mechanism is based on the event triggering thread, so if you’re just looking at a piece of information, you might have a feeling of half-understanding. It would be better to go through once to quickly settle and not forget easily. Let’s consolidate with a diagram:\nAnother point, why is the JS engine single-threaded? Well, this question probably doesn’t have a standard answer, such as it may simply be due to the complexity of multi-threading, like multi-thread operations generally need to be locked, so they chose single-threading in the original design…\nCommunication process between Browser process and Browser Kernel (Renderer process) If you’ve read this far, you should have a good understanding of the processes and threads within the browser. Next, let’s discuss how the Browser process (control process) communicates with the Kernel. After understanding this, you can connect this part of the knowledge and form a complete concept from the beginning to the end.\nIf you open the task manager and then open a browser, you can see: two processes appear in the task manager (one is the main control process, the other is the rendering process of the opened Tab page). On this premise, look at the whole process: (highly simplified)\nThe Browser process receives user requests, first needs to get page content (such as through network resource download), then passes this task to the Render process through the RendererHost interface.\nThe Renderer interface of the Render process receives the message, after a simple explanation, passes it to the rendering thread, and then starts to render.\nThe rendering thread receives the request, loads the webpage and renders it. In this process, it may require the Browser process to obtain resources and use the GPU process to assist in rendering.\nOf course, there may be JS threads operating on the DOM (which could lead to reflow and repaint).\nFinally, the Render process passes the result back to the Browser process.\nThe Browser process receives the result and draws it. Let’s draw a simple diagram: (very simplified)\nAfter understanding this whole process, you should have a certain understanding of how the browser works. With this basic knowledge architecture, it will be easier to fill in the content later.\nIf you want to dig deep into this part, it involves the analysis of the source code of the browser kernel, which is not within the scope of this article.\nIf you want to dig deeper into this, it is suggested to read articles analyzing the source code of the browser kernel.\nSorting out the relationship between threads inside the browser kernel At this point, we should have an overall concept of how the browser operates. Next, let’s simply sort out some concepts:\nGUI Rendering Thread and JS Engine Thread are mutually exclusive Since JavaScript can manipulate the DOM, if these elements are modified while rendering the interface (i.e., JS thread and UI thread running at the same time), then the element data obtained by the rendering thread before and after may be inconsistent.\nTherefore, to prevent rendering from resulting in unpredicted outcomes, the browser sets the GUI rendering thread and the JS engine as mutually exclusive. When the JS engine is executing, the GUI thread will be suspended and GUI updates will be saved in a queue and executed immediately when the JS engine thread is free.\nJS blocks page loading From the above-mentioned mutual exclusion, it can be deduced that if JS takes a long time to execute, it will block the page.\nFor example, suppose the JS engine is performing a massive calculation, even when the GUI has updates, they are saved in the queue and will be executed only when the JS engine is free. As a result of the massive calculation, the JS engine is likely to remain busy for a long time, naturally causing a feeling of a very laggy experience.\nTherefore, it’s advisable to avoid excessive JS execution times as much as possible, as this will cause the page rendering to be discontinuous, leading to a feeling of page rendering loading being blocked.\nWebWorker, JS’s multithreading? We mentioned earlier that the JS engine is single-threaded, and that if JS executes for too long it can block a page. So, is JS really powerless when it comes to CPU-intensive calculations?\nTherefore, Web Worker was supported later in HTML5.\nThe official MDN explanation is:\nWeb Workers provide a simple means for web content to run scripts in background threads. The thread can carry out tasks without interfering with the user interface\nA worker is an object created using a constructor (e.g., Worker()) that runs a named JavaScript file\nThis file contains the code that will run in the worker thread; workers run in another global context that is different from the current ‘window’\nTherefore, using the window shortcut to get to the current global scope (rather than self) within a Worker will return an error\nUnderstanding it in this way:\nWhen creating a Worker, the JS engine requests the browser to open a sub-thread (the sub-thread is opened by the browser, completely controlled by the main thread, and can’t operate on the DOM)\nThe JS engine thread and the worker thread communicate through a specific way (postMessage API, it needs to serialize objects to interact with specific data)\nSo, if there is a very time-consuming job, start a Worker thread separately, no matter what happens in it, it will not affect the main thread of the JS engine, only need to communicate the result to the main thread after the calculation is done, perfect!\nAnd note that the JS engine is still single-threaded, this fact has not changed, Worker can be considered as an “outside help” provided by the browser for the JS engine, specifically used to solve those heavy computing problems.\nFurther explanation about Worker is not the scope of this article, so we won’t elaborate further.\nWebWorker and SharedWorker Since we’re here, let’s also mention SharedWorker (to avoid confusion with WebWorker in the future)\nWebWorker belongs only to some page, it won’t be shared with other pages’ Render process (browser kernel process)\nSo Chrome creates a new thread in the Render process (each Tab page is a render process) to run the JavaScript program in the Worker. SharedWorker is shared by all pages in the browser and can’t be implemented in the same way as Worker, because it doesn’t belong to some Render process, it can be shared by multiple Render processes\nSo Chrome browser creates a separate process for SharedWorker to run the JavaScript program, in the browser each same JavaScript only has one SharedWorker process, no matter how many times it is created. At this point, it should be easy to understand, essentially it’s the difference between processes and threads. SharedWorker is managed by a separate process, WebWorker is just a thread under the render process.\nBriefly outline the browser rendering process Originally, the plan was to start discussing the JS operation mechanism directly, but after some consideration, since we’ve been talking about browsers above, jumping directly to JS might seem abrupt. Therefore, I’ll supplement the rendering process of the browser (simple version) in between.\nTo simplify understanding, the early work is directly omitted: (If you want to elaborate or need more details, they could make up another lengthy article)\nEnter the URL in the browser, the browser’s main process takes over, opens a download thread, then makes an HTTP request (omitting operations like DNS query, IP addressing, etc.), waits for the response, gets the content, then passes the content to the Renderer process through the RendererHost interface.\nBrowser rendering process begins\nAfter the browser’s core gets the content, the rendering can be divided into the following steps:\nParsing HTML to build the DOM tree\nParsing CSS to build the render tree (Parse the CSS code into a tree-like data structure, then merge it with DOM to form a render tree)\nLayout/render tree (Layout/reflow), responsible for the calculation of element size and position\nDraw/render tree (paint), draw the pixel information of the page\nThe browser will send the information of each layer to the GPU, and the GPU will composite the layers and display them on the screen.\nAll detailed steps have been omitted. After the rendering is completed, it’s the load event, and then to your own JS logic processing.\nSince we’ve omitted some detailed steps, we might as well point out some details that might need to be paid attention to.\nHere’s a reference to a diagram of repainting:\nThe sequence of load event and DOMContentLoaded event As mentioned above, the load event will be triggered after the rendering is complete. So, can you distinguish the sequence of the load event and the DOMContentLoaded event?\nIt’s easy, know their definitions:\nWhen the DOMContentLoaded event is triggered, only when the DOM is loaded, it does not include stylesheets, images. (For example, if scripts are loaded asynchronously, they might not necessarily be completed)\nWhen the onload event is triggered, all DOMs, stylesheets, scripts, and images have been loaded on the page. (Rendering is complete)\nSo, the order is: DOMContentLoaded -\u0026gt; load\nDoes loading CSS block the rendering of the DOM tree? We’re talking about the situation of importing CSS in the header.\nFirst of all, we all know that CSS is downloaded asynchronously by a separate download thread.\nThen, let’s talk about a few phenomena:\nCSS loading does not block DOM tree parsing (DOM continues to be built while loading asynchronously)\nBut it does block render tree rendering (Rendering needs to wait until CSS is loaded, because render tree needs CSS information)\nThis may also be a kind of optimization mechanism of the browser.\nBecause you might modify the style of the following DOM nodes while loading CSS, if CSS loading does not block render tree rendering, then when CSS is loaded, the render tree may need to be redrawn or reflowed again, which causes some unnecessary waste. So just first parse the structure of the DOM tree, finish the work that can be done, and then wait until your CSS is loaded, then render the render tree according to the final style. This approach could indeed be better performing.\nOrdinary layer and composite layer The concept of composite was mentioned in the rendering steps.\nThis can be simply understood as such: the layers rendered by the browser generally include two major types: ordinary layers and composite layers.\nFirstly, the normal document flow can be understood as one composite layer (here called the default composite layer, regardless of how many elements are added, they are actually in the same composite layer)\nSecond, for absolute layout (same for fixed), although it can escape the normal document flow, it still belongs to the default composite layer.\nThen, a new composite layer can be declared through hardware acceleration, which will independently allocate resources (of course, it will also get out of the normal document flow. Hence, no matter how the composite layer changes, it will not affect the reflow and repaint in the default composite layer)\nThis can be simply understood as such: in the GPU, each composite layer is drawn independently, so they do not affect each other. That’s also why hardware acceleration is so effective in certain scenarios.\nThis can be seen in Chrome source code debug -\u0026gt; More Tools -\u0026gt; Rendering -\u0026gt; Layer borders, where the yellow ones represent composite layer information.\nHow to become a composite layer (hardware acceleration)\nTo turn an element into a composite layer is the so-called hardware acceleration technique.\nThe most common way is: translate3d, translateZ\nopacity attribute/transition animation (a composite layer will be created only in the process of animation execution; before the animation starts or after it ends, the element will return to its previous state)\nwill-change attribute (this one is quite rare), usually used with opacity and translate (and, after testing, except for the properties that can trigger hardware acceleration as mentioned above, other properties will not become composite layers), its function is to tell the browser in advance that changes will be made, so the browser will start to do some optimization work (be sure to release this once you finish using it)\nElements such as \u0026lt;video\u0026gt; \u0026lt;iframe\u0026gt; \u0026lt;canvas\u0026gt; \u0026lt;webgl\u0026gt;\nOthers, like the flash plugin in the past.\nDifference between absolute and hardware acceleration\nAs can be seen, although absolute can escape the normal document flow, it cannot escape the default composite layer. So, even if the information in absolute changes and does not change the render tree in the normal document flow, during the final rendering by the browser, the entire composite layer is rendered. So, any changes in the information in absolute will still affect the rendering of the entire composite layer. (The browser will repaint it, large changes in rendering information brought by absolute with a lot of content in the composite layer can cause serious resource consumption)\nAnd hardware acceleration just directly refers to another composite layer (“start from scratch”), so its information changes will not affect the default composite layer (of course, it will definitely affect the composite layer it belongs to internally), it only triggers the final composition (outputting the view)\nWhat’s the role of a composite layer?\nGenerally, an element will become a composite layer after hardware acceleration is enabled, which can be independent of the normal document flow, and changes can avoid repainting the entire page, thereby improving performance.\nBut try not to use a large number of composite layers, otherwise, due to excessive resource consumption, the page may become even more laggy.\nWhen using hardware acceleration, please use an index\nWhen using hardware acceleration, try to use an index as much as possible to prevent the browser from defaulting to create composite layers for subsequent elements.\nThe specific principle is this: in webkit CSS3, if this element has added hardware acceleration and has a relatively low index level, then other elements after this element (those with a higher or same level, and with the same relative or absolute properties), will default to composite layer rendering. If not handled properly, this can greatly impact performance.\nTo put it simply, it’s actually an implicit composite concept: if a is a composite layer and b is on top of a, then b will also be implicitly transformed into a composite layer, which needs to be especially noted.\nDiscussing JS’s operation mechanism from the Event Loop By now, it’s about things happening after the initial rendering of the browser page, and some analysis of the JS engine’s operation mechanism.\nKeep in mind, I won’t be discussing execution contexts, VoiceOver (VO), scope chains, etc., (those could totally make up another article), here I’m mainly talking about how JS code is executed in conjunction with the Event Loop.\nA prerequisite for understanding this part is knowing that the JS engine is single-threaded, and here I’ll use a few concepts from the text above: (If you don’t understand them quite well, you can review them)\nJS engine thread\nEvent trigger thread\nTimer trigger thread\nAnd then understand another concept:\nJS is divided into synchronous tasks and asynchronous tasks\nSynchronous tasks are executed on the main thread and form an execution stack\nOutside the main thread, an event trigger thread manages a task queue, and as long as the asynchronous task has a running result, an event will be placed in the task queue.\nOnce all synchronous tasks in the execution stack are completed (the JS engine is idle at this time), the system will read the task queue and add any runnable asynchronous tasks to the execution stack and start executing them.\nRefer to the following diagram:\nBy this point, you should understand: Why can’t the events pushed by setTimeout always execute on time? Because maybe when it pushed into the event list, the main thread wasn’t idle, and it was executing other code, so naturally there could be discrepancies.\nFurther supplement to the event loop mechanism\nHere, I’m directly referencing a diagram to assist your understanding:\nThe diagram roughly describes:\nWhen the main thread runs, it generates an execution stack. When the code in the stack calls certain APIs, they add various events to the event queue (triggered when conditions are met, such as when an AJAX request is completed)\nOnce the code in the stack finish executing, it will read the events in the event queue and execute those callbacks\nThis is a loop process.\nNote, you always have to wait for the code in the stack to finish executing before you read the events in the event queue.\nSpecifically on the timer. The core of the aforementioned event loop mechanism is: JS engine thread and event trigger thread\nBut in regards to the event, there are some hidden details, for instance, after calling setTimeout, how does it wait for a specific time before adding it to the event queue?\nIs it detected by the JS engine? Of course not. It is controlled by the timer thread (because the JS engine itself is too busy to multitask).\nWhy do we need a separate timer thread? Because the JavaScript engine is single-threaded, if it’s in a blocked thread state, it will affect the accuracy of the timing, so it’s necessary to start a separate thread for timing.\nWhen do we use the timer thread? When using setTimeout or setInterval, it relies on the timer thread for timing. Once the timing is completed, it will push a specific event into the event queue.\nFor example:\n1 2 3 setTimeout(function(){ console.log(\u0026#39;hello!\u0026#39;); }, 1000); The function of this code is to start the timing for 1000 milliseconds (timed by the timer thread), then pushes the callback function into the event queue, waiting for the main thread to execute.\n1 2 3 4 setTimeout(function(){ console.log(\u0026#39;hello!\u0026#39;); }, 0); console.log(\u0026#39;begin\u0026#39;); The function of this code is to push the callback function into the event queue at the earliest possible time, waiting for the main thread to execute.\nNote:\nThe execution result is: ‘begin’ first, and then ‘hello’!\nAlthough the original intention of the code is to push it into the event queue after 0 milliseconds, the W3C stipulates in the HTML standard that a time interval less than 4ms in setTimeout should be counted as 4ms. (However, there are different opinions, stating that different browsers have different minimum time settings)\nEven if it doesn’t wait for 4ms, even if it’s assumed to push into the event queue after 0 milliseconds, it will execute ‘begin’ first (because only when the executable stack is empty, it will actively read the event queue)\nsetTimeout instead of setInterval\nSimulating regular timing with setTimeout and using setInterval directly are different.\nThis is because each time setTimeout times out, it will be executed, and then it will be executed for a while before continuing setTimeout, causing an error in the middle (the amount of error is related to the execution time of the code).\nWhile setInterval is to push an event at precise intervals each time (However, the actual execution time of the event may not be accurate, and it may even happen that the next event comes before the current event finishes execution)\nMoreover, setInterval has some quite fatal issues:\nCumulative effect (as mentioned above), if the setInterval code is not finished executing before it is added to the queue by setInterval again, it will cause the timer code to run continuously several times, without intervals. Even if it is executed normally at intervals, the execution time of multiple setInterval codes may be less than expected (because code execution needs some time)\nMoreover, when the browser is minimized, etc., setInterval does not stop the execution of the program, it will put the callback function of setInterval in the queue, and when the browser window is opened again, it executes all at once.\nSo, considering so many problems, the currently generally accepted best solution is: use setTimeout to simulate setInterval, or directly use requestAnimationFrame for special occasions.\nSupplement: It’s mentioned in ‘Professional JavaScript for Web Developers’ that the JS engine will optimize setInterval, if there is a callback from setInterval in the current event queue, it won’t be added again. However, there are still a lot of issues.\nAdvanced Event Loop: macrotask vs. microtask First, let’s look at this code snippet:\n1 2 3 4 5 6 7 8 9 10 11 12 13 console.log(\u0026#39;script start\u0026#39;); setTimeout(function() { console.log(\u0026#39;setTimeout\u0026#39;); }, 0); Promise.resolve().then(function() { console.log(\u0026#39;promise1\u0026#39;); }).then(function() { console.log(\u0026#39;promise2\u0026#39;); }); console.log(\u0026#39;script end\u0026#39;); The correct execution order is as follows:\n1 2 3 4 5 script start script end promise1 promise2 setTimeout Why? Because a new concept is introduced within Promise: microtask\nOr further, JS divides into two types of tasks: macrotask and microtask, in ECMAScript, microtask is called jobs, and a macrotask can be called task\nTheir definition? Difference? Simply understand as follows:\nmacrotask (also known as macro-task), each code block executed in the execution stack can be seen as a macrotask (including each event callback retrieved from the event queue and placed into the execution stack for execution) Each task will execute the current task from start to finish without executing others\nIn order for the JS internal task and DOM task to execute sequentially, the browser will re-render the page after one task has finished and before the next task begins (task-\u0026gt;rendering-\u0026gt;task-\u0026gt;…)\nmicrotask (also known as micro-task), tasks that are executed immediately after the current task finishes That is to say, after the current task, before the next task, and before rendering\nSo its response speed is faster than setTimeout (setTimeout is a task) as it does not need to wait for rendering\nThat is, after a macrotask is executed, it will complete all the microtasks that were generated during its execution (before rendering)\nWhat scenarios will form a macrotask and a microtask?\nmacrotask: main code block, setTimeout, setInterval, etc. (you can see, each event in the event queue is a macrotask)\nmicrotask: Promise, process.nextTick, etc.\nSupplement: In the node environment, process.nextTick has higher priority than Promise, which can be simply understood as: after the macro task ends, it first executes the nextTickQueue part in the microtask queue, then it executes the Promise part in the microtask\nLet’s understand this from the perspective of threads:\nEvents within macrotask are all placed in one event queue, maintained by the event trigger thread\nAll microtasks in microtask are added to the microtask queue (Job Queues), waiting for the current macrotask to finish, this queue is maintained by the JS engine thread (it’s concluded from self-understanding and speculation, as its executed seamlessly under the main thread)\nSo, here’s the summary of the running mechanism:\nxecute a macrotask (get from the event queue if there is none in the stack)\nIf a microtask is encountered during the execution, add it to the microtask queue\nAfter the macro-task finishes, immediately execute all microtasks in the current microtask queue (one by one)\nAfter the current macrotask finishes, start checking for rendering, then the GUI thread takes over rendering\nAfter rendering, the JS thread takes over again, starting the next macrotask (getting from the event queue)\nAs illustrated:\nAlso, please note the difference between Promise’s polyfill and the official version:\nIn the official version, it is a standard microtask form\npolyfill, usually simulated by setTimeout, so it is macrotask form\nPlease particularly note these two differences\nNote, some browsers have different results (because they may treat microtask as macrotask), but for simplicity, some non-standard browser scenarios are not described here (but remember, some browsers may not be standard)\nImplementing microtask with MutationObserver MutationObserver can be used to implement microtasks (it’s considered a microtask with lower priority than Promise, it’s generally used when Promise is not supported)\nIt’s a new feature in HTML5, its function is: to monitor a DOM change. When any change occurs in the DOM object tree, Mutation Observer will be notified.\nFor instance, in the previous Vue source code, it was used to simulate nextTick. The specific principle is to create a TextNode and monitor its changes. Then, when nextTick is performed, change the text content of this node. As shown:\n1 2 3 4 5 6 7 8 9 10 11 var counter = 1 var observer = new MutationObserver(nextTickHandler) var textNode = document.createTextNode(String(counter)) observer.observe(textNode, { characterData: true }) timerFunc = () =\u0026gt; { counter = (counter + 1) % 2 textNode.data = String(counter) } However, later versions of Vue (2.5+) removed the MutationObserver way from nextTick’s implementation (presumably due to compatibility reasons), and instead used MessageChannel (of course, the default is still Promise, with compatibility as backup).\nMessageChannel is a macrotask, and its priority is: MessageChannel -\u0026gt; setTimeout, so the internal nextTick of Vue (2.5+) is different from the implementation of 2.4 and before. That’s something you should be aware of.\nConclusion Having read this far, I’m not sure if you have a better understanding of JS’s operating mechanism, but going through it all from start to finish, rather than just a fragmentary piece of knowledge, should definitely clear things up?\nAt the same time, it’s also worth noting that JS is not as simple as you might think it is, front-end knowledge is infinite, with endless concepts, a ton of easily forgotten knowledge points, all kinds of frameworks, and the underlying principles that can be endlessly delved into. Then, you’ll find out that what you know is too little…\n","date":"2024-02-10T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*auN6gSNpbv_7dcZ2EXBGFg.jpeg","permalink":"http://localhost:1313/p/browser-multi-process-js-single-thread-and-js-running-mechanism./","title":"Browser multi-process, JS single thread and JS running mechanism."},{"content":"Differences between HTML, XML and XHTML HTML: Hypertext Markup Language, is a somewhat loose and not strict Web language;\nXML: Extensible Markup Language, mainly used for storing data and structures, is extensible;\nXHTML: Extensible Hypertext Markup Language, based on XML, its function is similar to HTML, but the syntax is more strict.\nWhat are the differences and connections between HTML, XHTML and HTML5 Differences between XHTML and HTML\nXHTML tag names must be lowercase;\nXHTML elements must be closed;\nXHTML elements must be nested correctly;\nXHTML elements must have a root element.\nDifferences between XHTML and HTML5\nHTML5 adds the canvas drawing element;\nHTML5 adds the video and audio elements for media playback;\nMore semantic tags, easier for browsers to recognize;\nBetter support for local offline storage;\nMATHML, SVG, etc., can be rendered better;\nAdded new form controls: calendar, date, time, email, etc.\nThe connection between HTML, XHTML, and HTML5\nXHTML is a specification version of HTML;\nHTML5 is the new standard for HTML, XHTML, and HTML DOM.\nWhat are the elements in the line? What are block-level elements? What are void elements ? Inline elements: a, b, span, img, input, select, strong;\nBlock-level elements: div, ul, li, dl, dt, dd, h1-5, p, etc;\nVoid elements: \u0026lt;br\u0026gt;, \u0026lt;hr\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;meta\u0026gt;.\nUse the difference between link and @import when importing styles for pages link is an HTML tag, while @import is provided by css;\nWhen the page is loaded, link will be loaded at the same time, while the css referenced by @import will be loaded after the page is loaded;\n@import is only recognized in IE5 and above, while link is an XHTML tag, with no compatibility issues;\nThe weight of the styles in the link way is higher than the weight of @imort\nHow to understand semantic tags Concept:\nSemantic tagging refers to choosing appropriate tags based on the content’s structure (content semantics), which not only facilitates developers to read and write more elegant code, but also allows for web crawlers and machines to parse effectively.\nBenefits of Semantic Tagging\nUse the correct tags for the right tasks;\nWhen styles are removed or lost, the page can still present a clear structure;\nIt facilitates other devices (such as screen readers, readers for the blind, mobile devices) to render web pages in a meaningful way;\nBeneficial for SEO: Establishes good communication with search engines, aiding web crawlers to collect more effective information. Web crawlers depend on tags to determine context and the weight of various keywords;\nIt facilitates team development and maintenance. Semantic tagging is more readable. Teams that follow the W3C standard all stick to this standard, which can reduce differentiation.\nWhat is the difference between a property and an attribute property is a property in DOM, it\u0026rsquo;s an object in JavaScript;\nattribute is a feature on HTML tags, and its value can only be a string;\nIn simple terms: Attribute is a built-in property of DOM nodes, such as frequently used id, class, title, align etc in html; while Property is an additional content as an object of this DOM element, such as childNodes, firstChild etc.\nWhat are the new features of html5 and what elements have been removed? New Features\nHTML5 is no longer a subset of SGML, mainly about the addition of images, location, storage, multi-tasking and other features.\nDrag and drop API;\nBetter semantical content tags (header, nav, footer, aside, article, section);\nAudio, video API (audio, video);\nCanvas API;\nGeolocation API;\nLocal offline storage localStorage for long-term data storage, data will not be lost even after closing the browser;\nsessionStorage data is automatically deleted after closing the browser;\nForm controls: calendar, date, time, email, url, search;\nNew technologies such as webworker, websocket, Geolocation, etc.\nRemoved Elements\nPure presentation elements:\n\u0026lt;basefont\u0026gt; Default font, if no font is set, it will render with this;\n\u0026lt;font\u0026gt; Font tag;\n\u0026lt;center\u0026gt; Horizontal center;\n\u0026lt;u\u0026gt; Underline;\n\u0026lt;big\u0026gt; Font;\n\u0026lt;strike\u0026gt; Strikethrough text;\n\u0026lt;tt\u0026gt; Monospaced text.\nElements that negatively affect usability:\n\u0026lt;frameset\u0026gt;, \u0026lt;noframes\u0026gt; and \u0026lt;frame\u0026gt;.\nWhat is the structure of a front-end, where style and behavior are separated? And what are the benefits of separation? Structure, Style and Behavior Separation\nIf we compare frontend to a person as an example, the structure (HTML) is akin to the \u0026ldquo;skeleton\u0026rdquo; of the human body, style is like the \u0026ldquo;decoration\u0026rdquo; of the body, such as clothes, jewelry, etc.; behavior is equivalent to a series of \u0026ldquo;actions\u0026rdquo; made by people.\nIn structure, style and behavior separation, the three are separated, each responsible for its own content, and each part can be used by reference.\nOn the basis of separation, we need to achieve: simplicity, reusability, and orderliness of our code.\nBenefits of Separation\nCode separation is conducive to team development and later maintenance;\nReduces maintenance costs, improves readability and provides better compatibility.\nHow to optimize your website’s files and resources File merging (the purpose is to reduce http requests);\nFile compression (the purpose is to directly reduce the download volume of the file);\nUse cache;\nUse cdn to host resources;\ngizp compress the required js and css files;\nBacklinks, website external link optimization;\nMeta tag optimization (title, description, keywords), heading tag optimization, alt optimization.\nWhat is the concept of local storage in Html5, what are the advantages and how is it different from cookies? HTML5\u0026rsquo;s Web storage features two types of storage: sessionStorage and localStorage.\nsessionStorage is used for locally storing data within a session, which is destroyed after the session ends;\nUnlike sessionStorage, localStorage is used for persistent local storage. Unless the user actively deletes the data, it will never expire;\nA cookie is data stored locally on the user\u0026rsquo;s terminal (Client Side) by a website to identify user\u0026rsquo;s identity (usually encrypted).\nDifferences:\nData transfer between the browser and server: cookie data is always carried within the same origin\u0026rsquo;s http requests (even if it\u0026rsquo;s not necessary), meaning cookie data is passed back and forth between browser and server. Whereas sessionStorage and localStorage don\u0026rsquo;t automatically send data to the server and only save data locally.\nSize: The storage size limit is different. cookie data cannot exceed 4K and is only suitable for storing very small data; sessionStorage and localStorage also have storage size limits, but it\u0026rsquo;s much larger than cookie, it can reach up to 5M or larger.\nData lifespan: sessionStorage is instantly closed when the session closes, so it\u0026rsquo;s not persistent; cookie is effective until the set cookie expiration time, even if the window or browser is closed. Whereas localStorage is always effective.\nScope: sessionStorage is not shared across different browser windows, even for the same page; whereas localStorage and cookie can be shared across all same-origin windows.\nWhat are the common browser kernels Trident kernel: Originally developed or used by IE, 360 browser;\nWebkit kernel: Google Chrome, Safari, etc;\nGecko kernel: Mozilla FireFox, K-Meleon browser;\nPresto kernel: Opera browser.\nWhat is LocalStorage used for in HTML5? localStorage local storage is like a lightweight database, it can permanently store data locally (unless manually deleted). In addition, it can also read locally cached cookies in the event of a network outage.\nUse localStorage to save data: localStorage.setItem(key, value);\nUse localStorage to retrieve saved data: localStorage.getItem(key);\nClear localStorage saved data: localStorage.removeItem(key);\nClear all data saved in localStorage object: localStorage.clear( );\nWhy Utilizing Multiple Domains to Store Website Resources is More Effective Easier CDN caching;\nBreak browser’s concurrent limitations;\nSave cookie bandwidth;\nSave the number of connections to the main domain and optimize the response speed of the page;\nPrevent unnecessary security issues;\nThe difference between several image formats in HTML and their use There are currently two types of images:\nBitmap\nVector\nBitmap\nA so-called bitmap is an image made up of pixels, also known as a raster image. The png, jpg, joeg, progressive jpeg, etc. images we use are bitmaps.\nVector\nA vector image, also known as a vector graphic. Vector images do not record the information of each point on the screen, but record the algorithm of the element’s shape and color. When you open a vector image, the software calculates the function corresponding to the graphic and displays the results, the shape and color of the graphic, for you to see.\nNo matter whether the display screen is large or small, the algorithm corresponding to the object on the screen is unchanged. Therefore, even if the screen is scaled to a very large multiple, it will not become distorted like a bitmap.\nThe most common format is svg.\nWhat are DNS DNS stands for Domain Name System.\nIt is a distributed database on the World Wide Web that maps domain names to IP addresses, making it easier for users to access the Internet without having to remember IP strings that can be directly read by machines. The DNS protocol runs on top of the UDP protocol and uses port number 53.\nSimply put, the process of obtaining the IP address corresponding to a domain name through the domain name is called domain name resolution (or hostname resolution).\n1 www.zuofc.com (Domain Name) - DNS resolution -\u0026gt; 111.222.33.444 (IP Address) Where there is DNS, there is cache. The browser, operating system, local DNS, and root domain server will cache the DNS result to some extent.\nThe DNS query process is as follows:\nFirst, it searches the browser’s own DNS cache. If it exists, the domain name resolution is completed here.\nIf the corresponding entry cannot be found in the browser’s own cache, it will try to read the host file of the operating system to see if there is a corresponding mapping relationship. If there is, the domain name resolution is completed here.\nIf there is no mapping relationship in the local hosts file, it will look up the local DNS server (ISP server, or manually set DNS server). If it exists, the domain name resolution is completed here.\nIf the local DNS server still can’t find it, it will send a request to the root server for recursive query.\nStrong Cache When the browser loads resources, it first determines whether to hit the strong cache based on the header information of the local cache resources. If the hit is made, it directly uses the resources in the cache and will not send a request to the server again.\nThe header information here refers to expires and cache-control.\nExpires\nThis field is a specification in http1.0. Its value is an absolute time GMT formatted time string, such as Expires: Mon, 18 Oct 2066 23:59:59 GMT. This time represents the expiration time of this resource. Before this time, it hits the cache. This method has a clear disadvantage, because the expiration time is an absolute time, so when the server and client time deviation is large, it will cause cache chaos (local time can also be changed at will).\nCache-Control (priority over Expires)\nCache-Control is header information that appeared in http1.1. It mainly uses the max-age value of this field to make judgments. It is a relative time. For example, Cache-Control: max-age=3600, which means that the validity period of the resource is 3600 seconds. In addition to this field, cache-control also has the following commonly used setting values:\nno-cache: Need to use cooperative cache, send a request to the server to confirm whether to use the cache.\nno-store: Prohibit the use of caches, and you need to request data again every time.\npublic: Can be cached by all users, including end users and CDN and other intermediate proxy servers.\nprivate: It can only be cached by the end user’s browser, and it does not allow CDN and other relay cache servers to cache it.\nCache-Control and Expires can be enabled on the server side at the same time. When enabled at the same time, Cache-Control has a higher priority.\nnegotiation cache When the strong cache does not hit, the browser will send a request to the server, and the server will judge whether to hit the cache based on some information in the header. If it hits, it returns 304 and tells the browser that the resource has not been updated and can use the local cache.\nThe information in the header here refers to Last-Modify/If-Modify-Since and ETag/If-None-Match.\nLast-Modify/If-Modify-Since\nThe first time the browser requests a resource, the server will add Last-Modify to the header returned. Last-modify is a time that identifies the last modification time of this resource (it can only be accurate to seconds, so requests with intervals less than 1 second cannot detect file changes).\nWhen the browser requests this resource again, the request header of the request will contain If-Modify-Since, which is the Last-Modify returned before the cache. After receiving If-Modify-Since, the server judges whether to hit the cache based on the last modification time of the resource.\nIf the cache is hit, it will return 304, and it will not return the resource content, nor will it return Last-Modify.\nDisadvantages:\nThe resource has changed in a short time, Last-Modified will not change.\nPeriodic changes. If this resource is modified back to its original state within a cycle, we think it is possible to use the cache, but Last-Modified does not think so, so there is ETag.\nETag/If-None-Match\nEtag is encoded based on file content, which can ensure that if the server is updated, it will definitely request resources again, but encoding requires additional overhead.\nDifferent from Last-Modify/If-Modify-Since, ETag/If-None-Match returns a checksum. ETag can guarantee that each resource is unique, and the change of resources will lead to the change of ETag. The server determines whether to hit the cache according to the If-None-Match value uploaded by the browser.\nUnlike Last-Modified, when the server returns a 304 Not Modified response, the ETag has been regenerated, and this ETag will be returned in the response header, even if this ETag has not changed from before.\nLast-Modified and ETag can be used together, and the server will verify ETag first. Only when they are consistent, will it compare Last-Modified again, and finally decide whether to return 304.\nHow many processes will appear at least when opening a Tab page in Chrome browser? The latest Chrome browser includes at least four: 1 Browser main process, 1 GPU process, 1 Network process, multiple rendering processes and multiple plugin processes, of course, there are more complex situations;\nIf there are iframes on the page, the iframe will be separated into processes\nIf there are plugins, the plugin will also start a process\nultiple pages belong to the same site, and if page a opens page b, they will share one rendering process\nIf extensions are installed, the extensions will also occupy processes\nThese processes can be viewed through the Chrome Task Manager.\nEven with the current multi-process architecture, we still encounter situations where a single page freezes, ultimately leading to the crash of all pages. Can you explain your understanding of this? Let’s consider a situation that involves the same site, and we can expand on this.\nChrome’s default policy is to assign one rendering process to each tab. However, if a new page is opened from an existing page and the new page belongs to the same site as the existing page, then the new page will reuse the rendering process of the parent page. The official name for this default policy is ‘process-per-site-instance’.\nTo put it simply, if multiple pages belong to the same site, these pages will be assigned to one rendering process. So, there is a situation where if one page crashes, it will lead to the crash of other pages on the same site, because they are using the same rendering process.\nWhy would they be put into one process?\nJust think about it: for sites that belong to the same parent, such as the following three:\nhttps://time.geekbang.org\nhttps://www.geekbang.org\nhttps://www.geekbang.org:8080\nIf they are in one rendering process, they will share the JavaScript execution environment, which means that scripts in Page A can be directly executed in Page B. There are demands for this sometimes.\nCould you explain the process of establishing a TCP connection, and why three handshakes are needed? Three-way Handshake\nFirst handshake\nThe client sends a connection request segment to the server. The header of this segment has SYN=1, ACK=0, seq=x. After the request is sent, the client enters the SYN-SENT state.\nPS1: SYN=1, ACK=0 signifies that this segment is a connection request segment.\nPS2: x signifies the initial sequence number of the byte stream for this TCP communication.\nIt is stipulated in TCP that segments with SYN=1 cannot have a data part, but consume a sequence number.\nSecond handshake\nAfter the server receives the connection request segment, if it agrees to the connection, it will send a response: SYN=1, ACK=1, seq=y, ack=x+1. After the response is sent, it enters the SYN-RCVD state.\nPS1: SYN=1, ACK=1 signifies that this segment is a connection acceptance response segment.\nPS2: seq=y signifies the initial sequence number of the byte stream when the server acts as the sender.\nPS3: ack=x+1 signifies that the server hopes that the sequence number of the next data segment sent starts from x+1 byte.\nThird handshake\nWhen the client receives the connection acceptance response, it needs to send another confirmation segment to the server to confirm: the server’s connection acceptance response has been successfully received.\nThe header of this segment is: ACK=1, seq=x+1, ack=y+1.\nAfter the client sends this segment, it enters the ESTABLISHED state. When the server receives this response, it also enters the ESTABLISHED state. At this point, the connection establishment is complete!\nWhy is a three-way handshake needed for the connection establishment, instead of a two-way handshake?\nThe book “Computer Networks” by Xie Xiren states that the purpose of a “Three-way handshake” is “to prevent suddenly delivering outdated connection request segments to the server, thus causing errors”.\nIn another classic “Computer Networks” book, the purpose of a “Three-way handshake” is to solve the problem of “delayed duplicate groups in the network”. These two different descriptions actually clarify the same issue.\nIn Xie Xiren’s “Computer Networks” example, the occurrence of “outdated connection request segments” occurs in the following situation: the client’s first connection request segment did not get lost, but was detained in a network node for a long time, thus delaying the connection release to a certain time later when it reaches the server. This is an outdated segment. But when the server receives this outdated connection request segment, it mistakenly believes that it is a new connection request sent by the client again. So, it sends a confirmation segment to the client agreeing to establish a connection. If a “Three-way handshake” is not used, as long as the server sends a confirmation, a new connection is established. Since the client did not send a request to establish a connection at this time, it will ignore the server’s confirmation and will not send data to the server. But the server thinks that the new transport connection has been established and is always waiting for the client to send data. In this way, a lot of server resources are wasted. The method of “Three-way handshake” can prevent the above phenomenon from happening. For example, in just such a case, the client will not confirm the server’s confirmation. The server, not receiving a confirmation, knows that the client has not requested to establish a connection.\nFour-way Handshake\nFirst handshake\nIf A believes that data transmission is complete, it needs to send a connection release request to B. This request only has a header, the main parameters carried in the header are:\nFIN=1, seq=u. At this point, A enters the FIN-WAIT-1 state.\nPS 1: FIN=1 signifies that this segment is a connection release request.\nPS 2: seq=u, where u-1 is the sequence number of the last byte A sends to B.\nSecond handshake\nAfter B receives the connection release request, it informs the corresponding application program that the connection from A to B has been released. At this point, B enters the CLOSE-WAIT state and sends a connection release response to A. The header of the response contains:\nACK=1, seq=v, ack=u+1.\nPS1: ACK=1: except for the TCP connection request segments, all data packets in the TCP communication process have ACK=1, which means a response.\nPS2: seq=v, where v-1 is the sequence number of the last byte B sends to A.\nPS3: ack=u+1 means that B wants to receive segments starting from the u+1th byte and has successfully received the first u bytes.\nOnce A receives the response, it enters the FIN-WAIT-2 state and waits for B to send a connection release request.\nAfter the second handshake, the connection from A to B has been released, B will no longer receive data, and A will no longer send data. But the connection from B to A still exists, B can continue sending data to A.\nThird handshake\nAfter B sends all data to A, it sends a connection release request to A, the request header: FIN=1, ACK=1, seq=w, ack=u+1. B enters the LAST-ACK state.\nFourth handshake\nAfter A receives the release request, it sends a confirmation response to B, and A enters the TIME-WAIT state. This state lasts for 2MSL. If B does not retransmit the request during this time, A enters the CLOSED state and revokes the TCB. When B receives the confirmation response, it also enters the CLOSED state and revokes the TCB.\nWhy does A have to enter the TIME-WAIT state first, and wait for 2MSL before entering the CLOSED state?\nThis is to ensure that B can receive the confirmation response from A.\nIf A directly enters the CLOSED state after sending the confirmation response, then if this response is lost, B will resubmit the connection release request after waiting for a timeout. But at this point, A has closed and will not respond in any way, so B will never be able to close normally.\nWhat happens between entering a URL and the display of a webpage? URL Parsing\nFirstly, judge whether what you input is a valid URL or a keyword to be searched, and act according to your input.\nDNS Query\nQuery the corresponding IP through DNS.\nTCP Connection\nAfter determining the IP address of the target server, it goes through a three-way handshake to establish a TCP connection.\nHTTP Request\nAfter the TCP connection is established, communication can be based on this. The browser sends an HTTP request to the target server.\nResponding to request\nWhen the server receives the browser’s request, it will carry out logical operations. After the operations are completed, it will return an HTTP response message.\nPage Rendering\nWhen the browser receives the resources in the server’s response, it first parses the resources:\nLook at the information in the response header and handle it correspondingly according to different instructions, such as redirection, storing cookies, unzipping gzip, caching resources, etc.\nLook at the Content-Type value in the response header, adopting different parsing methods according to different resource types.\nThe rendering process of the page is as follows:\nParse HTML and build a DOM tree.\nParse CSS and generate a CSS rule tree.\nMerge the DOM tree and CSS rules to generate render tree.\nLayout the render tree (Layout / reflow), responsible for calculating the size and position of each element.\nDraw the render tree (paint), drawing the pixel information of the page.\nThe browser will send the information of each layer to the GPU, and the GPU will composite each layer and display it on the screen.\nCDN The full name is Content Delivery Network.\nA Content Delivery Network (CDN) is a network of interconnected servers that can speed up the loading of web pages for data-intensive applications. CDN can stand for Content Delivery Network or Content Distribution Network. When a user visits a particular website, data from the website’s server needs to be transmitted over the internet to the user’s computer. If the user is far away from the server, loading large files (such as videos or website images) will take a long time. In contrast, if the website content is stored on a CDN server closer to the user, it can reach their computer faster.\nCDN Cache\nAs for CDN cache, after the local cache of the browser becomes invalid, the browser will initiate a request to the CDN edge node. Similar to browser cache, there is also a cache mechanism at the CDN edge node. The caching strategies of CDN edge nodes are different for different service providers, but generally, they will follow the HTTP standard protocol and set the data cache time of the CDN edge node with the Cache-control: max-age field in the HTTP response header.\nWhen the browser requests data from the CDN node, the CDN node will judge whether the cache data has expired. If the cache data hasn’t expired, it would directly return the cache data to the client; otherwise, the CDN node will issue a request to the server for fresh data, pull the latest data from the server, update the local cache, and return the latest data to the client. CDN service providers generally provide CDN cache durations based on multiple dimensions such as file suffixes and directories, and provide more refined cache management for users.\nAdvantages of CDN\nThe CDN node solves the problem of cross-operator and cross-regional access, greatly reducing access latency. Most requests are completed at the CDN edge node. The CDN plays a role in diversion, reducing the load on the source server.\nDifference between HTTP and HTTPS HTTPS is a secure version of the HTTP protocol. The data transmission of the HTTP protocol is in plain text, which is insecure, whereas HTTPS encrypts data through the SSL/TLS protocol, making it relatively more secure.\nHTTP and HTTPS use different connection methods and default ports. HTTP uses port 80, while HTTPS uses port 443.\nDue to the need for encryption and multiple handshakes, HTTPS doesn’t perform as well as HTTP in terms of performance.\nHTTPS requires SSL, and SSL certificates have a cost. The stronger the certificate’s functionality, the higher the cost.\nWebpack fingerprinting strategy: hash, chunkhash, contenthash hash strategy: It’s based on the project. If the project content changes, a new hash will be generated. If the content doesn’t change, then the hash will stay the same.\nchunkhash strategy: It’s based on the chunk. If a file’s content changes, then the hash of the corresponding chunk group module will change.\ncontenthash strategy: It’s based on its own content.\nRecommended usage:\nFor css, use contenthash.\nFor js, use chunkhash.\nWebpack build process Initialize parameters: Parse the webpack configuration parameters, merge the parameters passed in by the shell and the parameters configured in the webpack.config.js file to form the final configuration result.\nStart compiling: The parameters obtained from the previous step are used to initialize the compiler object, register all configured plugins, and the plugins will listen to the event nodes of the webpack build lifecycle and respond accordingly. Run the ‘run’ method of the object to start compiling.\nDetermine the entry point: Starting from the configured ‘entry’ point, parse the file to build the AST syntax tree, find out dependencies, and then recurse.\nCompile modules: During the recursion, according to the file type and the ‘loader’ configuration, call all configured loaders to transform the file, then find out the modules that this module depends on, and recurse this step until all files dependent on the entry have been processed by this step.\nComplete module compilation: After using the loader to translate all modules in the fourth step, you get the final content of each module after translation and their dependencies.\nOutput resources: According to the dependencies between the entry and the modules, assemble them into chunks each containing multiple modules, then transform each chunk into a separate file and add it to the output list. This is the last chance to modify the output content.\nOutput completion: After determining the output content, determine the output path and filename according to the configuration, and write the file content into the file system.\nDifference between Loader and Plugin? Thoughts on writing Loader, Plugin Difference Loader is a file loader that can load resource files and perform some processing on them, such as compiling and compressing, and finally package them together into the specified file.\nPlugin gives webpack various flexible functions, such as package optimization, resource management, environment variable injection, etc. The purpose is to solve other things that loader cannot achieve.\nFrom the overall operation timing, we can see the difference between the two:\nLoader runs before the files are packaged.\nPlugins work throughout the entire compile cycle.\nThere are many events broadcasting during the lifecycle of Webpack. Plugin can listen to these events and change the output results at the right time through the API provided by Webpack.\nFor loader, its essence is a transformer, compiling file A into file B, operating on files, such as transforming A.scss or A.less into B.css, a simple file conversion process.\nWriting loaders Before writing a loader, you need to understand its nature.\nIts essence is a function. The this in the function is filled by webpack as context, so we cannot set the loader as an arrow function.\nThe function accepts a parameter, which is the source content of the file passed to the loader by webpack.\nThe this in the function is an object provided by webpack, and it can obtain all kinds of information required by the current loader.\nThe function contains asynchronous or synchronous operations. Asynchronous operations are returned through this.callback, and the return value is required to be string or Buffer.\nExample code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Export a function, source is the source content of the file passed to the loader by webpack module.exports = function(source) { const content = doSomething2JsString(source); // If the loader is configured with an options object, then this.query will point to options const options = this.query; // Can be used as the context for resolving other module paths console.log(\u0026#39;this.context\u0026#39;); /* * Parameters of this.callback: * error: Error | null, thrown an error when the loader has a problem * content: String | Buffer, the content to be exported after the loader has compiled * sourceMap: the source map of the compiled content generated for convenient debugging * ast: AST static syntax tree generated in this compilation, the loader to be executed can directly use this AST, thus saving the process of repeatedly generating AST */ this.callback(null, content); // Asynchronous return content; // Synchronous } Generally in the process of writing loaders, keep the functions simple and avoid doing multiple functions.\nLike the conversion from less file to css file, it is not completed in one step, but by the chain call of less-loader, css-loader, and style-loader.\nWrite plugins Since webpack is based on the publisher-subscriber mode, it will broadcast many events during the run lifecycle. By listening to these events, the plugins can execute their tasks at specific stages.\nWe have learned before that just two core objects are created during the webpack compile:\nCompiler: It contains all configuration information of the webpack environment, including options, loader, and plugin, and hooks related to the whole life cycle of webpack.\nCompilation: Acts as the parameters of the built-in event callback function of the plugin, and includes the current module resources, compiled resources, changed files, and the status information of the tracked dependencies. When a file change is detected, a new Compilation will be created.\nIf you want to implement plugins yourself, you also need to follow certain specifications:\nThe plugin must be a function or an object with an apply method so that it can access the compiler instance.\nThe compiler and compilation objects passed to each plugin are the same reference, so it is not recommended to modify them.\nAsynchronous events need to notify Webpack to enter the next process by calling the callback function when the plugin has completed the task, otherwise it will get stuck.\nThe template for implementing plugins is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 class MyPlugin { // Webpack will call the apply method of the MyPlugin instance and pass the compiler object to the plugin instance apply (compiler) { // Find the appropriate event hook and implement your plugin functionality compiler.hooks.emit.tap(\u0026#39;MyPlugin\u0026#39;, compilation =\u0026gt; { // compilation: current package build process context console.log(compilation); // do something... }) } } When the emit event occurs, it means that the conversion and assembly of the source files have been completed. We can read the resources, code blocks, modules and their dependencies that will be finally output, and we can modify the content of the output resources.\nImproving the build speed of webpack Optimize the loader configuration\nResponsible use of resolve.extensions\nOptimize resolve.modules\nOptimize resolve.alias\nUse DLLPlugin\nUse cache-loader\nEnable Multi-threading in Terser\nResponsible use of sourceMap\nHow is webpack hot update done? Create two servers with webpack-dev-server: Services providing static resources (express) and Socket services.\nThe express server directly provides static resource services (resources packed are directly requested and parsed by the browser).\nThe socket server is a long connection of websocket, which allows two-way communication.\nWhen the socket server listens to changes in the corresponding module, it will generate two files, .json (manifest file) and .js file (update chunk).\nThrough the long connection, the socket server can directly send these two files to the client (browser).\nAfter getting the two new files, the browser loads these files through the HMR runtime mechanism and updates the modified modules.\nCommon Loaders in webpack style-loader: Adds css to the inline style tag in the DOM.\ncss-loader: Allows css files to be imported through require and returns css code.\nless-loader: Handles less files.\nsass-loader: Used to process sass files.\npostcss-loader: Uses postcss to process CSS.\nautoprefixer-loader: Handles CSS3 property prefixes, is now deprecated; it is recommended to use postcss directly.\nfile-loader: Distributes files to the output directory and returns the relative path.\nurl-loader: Similar to file-loader, but can return a Data Url when the file size is smaller than the set limit.\nhtml-minify-loader: Compresses HTML.\nbabel-loader: Uses babel to convert ES6 files to ES5.\nommon Loaders in Plugin AggressiveSplittingPlugin: Splits the original chunk into smaller chunks.\nBabelMinifyWebpackPlugin: Uses babel-minify for compression.\nBannerPlugin: Adds a banner to the top of each generated chunk.\nCommonsChunkPlugin: Extracts common modules shared between chunks.\nCompressionWebpackPlugin: Prepares compressed versions of assets, serving them with Content-Encoding.\nContextReplacementPlugin: Overwrites the inferred context of the require expression.\nCopyWebpackPlugin: Copies individual files or entire directories to the build directory.\nDefinePlugin: Allows the configuration of global constants at compile time.\nDllPlugin: Splits packages to greatly reduce build time.\nEnvironmentPlugin: Abbreviation for the process.env key in DefinePlugin.\nExtractTextWebpackPlugin: Extracts text (CSS) from a bundle into a separate file.\nHotModuleReplacementPlugin: Enables Hot Module Replacement (HMR).\nHtmlWebpackPlugin: Simplifies creation of HTML files for server access.\nI18nWebpackPlugin: Adds internationalization support to the bundle.\nIgnorePlugin: Excludes certain modules from the bundle.\nLimitChunkCountPlugin: Sets the minimum/maximum limit for chunks, to refine and control chunk sizing.\nLoaderOptionsPlugin: Used for migration from webpack 1 to webpack 2.\nMinChunkSizePlugin: Ensures chunk sizes exceed specified limits.\nNoEmitOnErrorsPlugin: Skips when encountering build errors during the output phase.\nNormalModuleReplacementPlugin: Substitutes resources that match a regular expression.\nNpmInstallWebpackPlugin: Automatically installs missing dependencies during development.\nProvidePlugin: Allows use of modules without having to import/require.\nSourceMapDevToolPlugin: Provides more granular control of the source map.\nEvalSourceMapDevToolPlugin: Provides more granular control of the eval source map.\nUglifyjsWebpackPlugin: Controls the version of UglifyJS in the project.\nZopfliWebpackPlugin: Precompresses resources using node-zopfli.\nWhat are the commonly used Git commands and their functions? Basic Operations git init: Initializes the repository, default branch is master.\ngit add .: Stages all changes in the files to the staging area.\ngit add \u0026lt;specific file path+name\u0026gt;: Stages changes of specific files to the staging area.\ngit diff: Shows what will be added after using git add.\ngit diff — staged: Shows what will be committed when using git commit.\ngit status: Shows the status of the current branch.\ngit pull \u0026lt;remote repository name\u0026gt; \u0026lt;remote branch name\u0026gt;: Pulls and merges the given remote branch with the current local branch.\ngit pull \u0026lt;remote repo name\u0026gt; \u0026lt;remote branch name\u0026gt;:\u0026lt;local branch name\u0026gt;: Pulls and merges the remote branch with the specified local branch.\ngit commit -m “\u0026lt;comment\u0026gt;”: Commits the changes to the local repository with a comment.\ngit commit -v: Shows all diff information during commit.\ngit commit — amend [file1] [file2]: Resets previous commit and includes changes of specified files.\nCommit Rules feat: New feature, adds a function.\nfix: Bugs fixing.\nrefactor: Code refactoring.\ndocs: Document modification.\nstyle: Code formatting modification, not css modification.\ntest: Test cases modification.\nchore: Other modifications, like build workflow, dependency management.\nBranch Operations git branch: Lists all local branches.\ngit branch -r: Lists all remote branches.\ngit branch -a: Lists all local and remote branches.\ngit merge \u0026lt;branch name\u0026gt;: Merges branches.\ngit merge — abort: Cancels the branches merging in case of conflicts, and resets everything to before the merge.\ngit branch \u0026lt;new branch name\u0026gt;: Creates a new branch based on the current branch.\ngit checkout — orphan \u0026lt;new branch name\u0026gt;: Creates a new empty branch (that will still contain all files from the previous branch).\ngit branch -D \u0026lt;branch name\u0026gt;: Deletes a local branch.\ngit push \u0026lt;remote repository name\u0026gt;:\u0026lt;branch name\u0026gt;: Deletes a remote branch.\ngit branch \u0026lt;new branch name\u0026gt; \u0026lt;commit ID\u0026gt;: Restores a deleted branch from commit history.\ngit branch -m \u0026lt;old branch name\u0026gt; \u0026lt;new branch name\u0026gt;: Renames a branch.\ngit checkout \u0026lt;branch name\u0026gt;: Switches to a specified local branch.\ngit checkout \u0026lt;remote repository name\u0026gt;/\u0026lt;branch name\u0026gt;: Switches to a specified remote branch.\ngit checkout -b \u0026lt;new branch name\u0026gt;: Creates a new branch based on the current branch and switches to this new branch.\nRemote Operations git fetch [remote]: Downloads all changes from remote repository.\ngit remote -v: Lists all remote repositories.\ngit pull [remote] [branch]: Pulls and merges the specified remote branch with the current local branch.\ngit fetch: Fetches the latest version information from the server, without merging.\ngit push [remote] [branch]: Pushes the local specified branch to the remote repository.\ngit push [remote] — force: Forces the push of the current branch to the remote repository, even in case of conflicts.\ngit push [remote] — all: Pushes all branches to the remote repository.\nReverting Operations git checkout [file]: Resets the given file from the staging area to the work tree.\ngit checkout [commit] [file]: Restores the given file of a certain commit to the staging area and work tree.\ngit checkout.: Resets all files from the staging area to the work tree.\ngit reset [commit]: Resets the local HEAD pointer to a specified commit and resets the staging area but not the working directory.\ngit reset — hard: Resets the staging area and the work directory to match with the most recent commit.\ngit reset [file]: Resets the specified file in the staging area which matches with the last commit, leaving the work directory unchanged.\ngit revert [commit]: The latter’s all changes will be cancelled by the former, and it is applied to the current branch.\nreset: Real rollback, the commit records after the target version are all lost.\nrevert: Also rollback, this rollback operation is equivalent to a submission, the commit records after the target version are also all there.\nStash Operations git stash: Temporarily moves uncommitted changes.\ngit stash pop: Restores the last stashed work state and removes it from the stash.\ngit stash list: Lists all stashed work states.\ngit stash apply \u0026lt;stash’s name\u0026gt;: Restores the stashed work states but does not remove them from the stash.\ngit stash clear: Clears all stashed work states.\ngit stash drop \u0026lt;stash’s name\u0026gt;: Deletes a specific stashed work state.\nWhat is the standard CSS box model and how does it differ from the box model found in older versions of IE? Standard (W3C) box model: width = content width + border + padding + margin\nOlder versions of IE box model: width = content width (which includes the border and padding) + margin\nWhat is the CSS Specificity? CSS specificity refers to the priority level of a style being applied during conflicts. The calculation of specificity is determined based on the type and quantity of selectors. The weight values of selectors from high to low are: !important \u0026gt; inline styles \u0026gt; ID selector \u0026gt; class selector, attribute selector and pseudo-class selector \u0026gt; tag selector and pseudo-element selector. Specifically, the weight of the ID selector is 100, the weight of the class selector, attribute selector and pseudo-class selector is 10, and the weight value of the tag selector and pseudo-element selector is 1. When there is a styling conflict, the style with the higher weight value will override the one with the lower weight value.\nWhat are the CSS selectors and what attributes can be inherited? Common selectors include:\nid selector (#content), class selector (.content), tag selector (div, p, span, etc.), adjacent selector (h1+p), child selector (ul\u0026gt;li), descendants selector (li a), universal selector (*), attribute selector (a[rel = \u0026quot;external\u0026quot;]), and pseudo-class selector (a:hover, li:nth-child).\nInheritable style properties: font-size, font-family, color, ul, li, dl, dd, dt;\nNon-inheritable style properties: border, padding, margin, width, height.\nWhat are the points of origin for the ‘relative’ and ‘absolute’ values of the position property? First of all, when using position, one should bear in mind the rule of \u0026ldquo;child absolute, parent relative\u0026rdquo;.\nrelative (Relative positioning): establishes a relative positioning system, the positioning origin is the location of the element itself.\nabsolute (Absolute positioning): establishes an absolute positioning system, the positioning origin is the top-left corner of the nearest parent element that has a position value of absolute or relative.\nfixed (Not supported by older versions of IE): establishes an absolute positioning system, positioning is relative to the browser window.\nstatic: Default value. No positioning, elements appear in the regular flow (ignores top, bottom, left, right, z-index declarations).\ninherit: Specifies that the position property should be inherited from the parent element.\nNew Attribute Update\nsticky: (additional attribute, may not have ideal compatibility at the moment), can set position to be sticky by adding a value to one of the top, bottom, right, left properties.\nNote:\nWhen using sticky, one must specify at least one of top, bottom, left, right, otherwise the element will remain in relative positioning;\nsticky only works within its parent element, and the parent element\u0026rsquo;s height must be taller than the \u0026lsquo;sticky\u0026rsquo; height;\nThe parent element cannot contain the overflow:hidden or overflow:auto properties.\nWhat new features does CSS3 offer? Regarding the new features added in CSS, they include:\nSelectors;\nRounded corners border-radius;\nMulti-column layouts;\nShadows shadow and reflections reflect;\nText effects text-shadow;\nText rendering text-decoration;\nLinear gradients gradient;\nRotate rotate/Scale scale/Skew skew/Move translate;\nMedia queries @media;\nRGBA and transparency;\n@font-face property;\nMultiple background images;\nBox sizing;\nSpeech (aural style sheets).\nWhat’s the principle of creating a triangle with pure CSS? Implementation Steps: 1. Ensure that the element is a block-level element; 2. Set the borders of the element; 3. Use transparent color for the borders that do not need to be displayed.\ncss:\n1 2 3 4 5 6 7 8 * {margin: 0; padding: 0;} .content { width:0; height:0; margin:0 auto; border:50px solid transparent; border-top: 50px solid pink; } html:\n1 \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; What are the methods to hide an element? Using the display property: By setting the display property of an element to none, the element will not take up any space on the page and will not affect other elements.\nUsing the visibility property: By setting an element’s visibility property to hidden, the element will be invisible on the page but still take up space.\nUsing the opacity property: By setting an element’s opacity property to 0, the element will be invisible on the page but still take up space.\nUsing the position property: Set the element’s position property to absolute or fixed, then move the element off the screen or make it exceed the scope of the container. The element will be invisible on the page but still take up space.\nUsing the z-index property: If you set the z-index property of an element to a negative value, the element will be invisible on the page but still take up space.\nUsing the clip property: Set the clip property of an element to a rectangular area, then the element will only display the part within the rectangular area, the rest will be clipped off.\nSet height: 0: sets the height of an element to 0 and removes the border;\nSet filter: blur(0): is a CSS3 property. The larger the value in the parenthesis, the greater the degree of Gaussian blur of the image. When it reaches a certain level, the image can disappear.\nSet transform: scale(0): scales an element infinitely small, the element will be invisible, but the original position of the element will be preserved.\nThis is an HTML5 attribute which has the same effect as display: none;. However, this attribute is used to record the status of an element.\nWhat are the methods for CSS optimization and performance improvement? Combine multiple CSS files, and try to reduce HTTP requests\nDo not add a unit when the attribute value is 0\nPlace the CSS files at the top of the page\nAvoid descendant selectors, overly restrictive and chained selectors\nUse compact syntax\nAvoid unnecessary repetition\nUse semantic naming for easy maintenance\nTry to use !important as little as possible, choose other selectors instead\nSimplify the rules, merge repeated rules for different classes as much as possible\nAdhere to the box model rules\nHow to avoid conflicts if there are two identical class definitions in CSS? Priority: Each selector in CSS has a priority. You can determine which style definition will be applied by their priority. If the styles in two class definitions conflict with each other, you can resolve the conflict by adjusting the priority.\nParent Selector: You can use a parent selector to limit the scope of the style and thereby avoid conflicts. For example, if the styles in two class definitions are applied to different child elements of a certain parent element, you can use a parent selector to limit the scope of the style and thereby avoid conflicts.\nNamespaces: You can use namespaces to distinguish the style definitions of different modules or components to avoid conflicts. For example, you can add different namespace prefixes to the class definitions of different modules or components to distinguish them from each other.\nScoped Styles: You can use scoped styles to limit styles to specific components or modules to avoid conflicts with styles from other components or modules. Scoped styles are a special style provided by the Vue framework, which can be achieved by adding the scoped attribute in the style tag.\nWhat is margin collapse? What is the result of the collapse? Firstly, margin collapse is margin-collapse. The margins of two adjacent boxes (may be siblings or ancestors) can combine into a single margin. This manner of merging margins is called collapsing, and the combined margin is called a collapsed margin.\nThe result of the collapse follows these calculation principles:\nWhen the two adjacent outer margins are positive, the result of the collapse is the larger of the two;\nWhen the two adjacent outer margins are negative, the result of the collapse is the larger absolute value of the two;\nWhen one margin is positive and the other is negative, the result of the collapse is the sum of the two.\nHow to solve the 1px problem? The 1px problem refers to: on some Retina screen devices, the 1px of the mobile web page will become very thick, presenting more than 1px effect. The reason is simple — the 1px in CSS cannot be equated with the 1px on the mobile device. Their proportional relationship has a special property to describe:\n1 window.devicePixelRatio = physical pixel of the device / CSS pixel. Open the Chrome browser, start the mobile debugging mode, and output the value of this devicePixelRatio in the console. Select the iPhone6/7/8 series, and the output result is 2: which means that the set 1px CSS pixel will actually use 2 physical pixel units to render on this device, so the actual observation will definitely be thicker than 1px. Here are three ways to solve the 1px problem:\nApproach 1: Write 0.5px directly\nIf the 1px style is written like this before:\n1 border:1px solid #333 You can first get the value of window.devicePixelRatio in JS, and then give this value to the data in CSS through JSX or template syntax to achieve this effect (here it is demoed with JSX syntax):\n1 \u0026lt;div id=\u0026#34;container\u0026#34; data-device={{window.devicePixelRatio}}\u0026gt;\u0026lt;/div\u0026gt; Then you can hit the case where devicePixelRatio is a certain value with the attribute selector in CSS, such as trying to hit devicePixelRatio when it is 2:\n1 2 3 #container[data-device=\u0026#34;2\u0026#34;] { border: 0.5px solid #333 } Just change 1px to 1/devicePixelRatio, this is the simplest method so far. The disadvantage of this method is that its compatibility is not good, IOS system needs version 8 or above, and the Android system is just not compatible.\nApproach 2: Pseudo elements magnify first and then shrink\nThis method has higher feasibility and better compatibility. The only downside is that the code will increase.\nThe idea is to enlarge first and then shrink: a ::after pseudo-element is appended behind the target element, and after this element is layout as absolute and fully stretched on the target element, its width and height are both set to twice the target element, and the border value is set to 1px. We then take advantage of the ability to scale in CSS animation effects to shrink the entire pseudo-element to 50% of its original size. At this time, the width and height of the pseudo-element just match the original target element, and the border is also reduced to half of 1px, indirectly achieving the effect of 0.5px.\nThe code is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #container[data-device=\u0026#34;2\u0026#34;] { position: relative; } #container[data-device=\u0026#34;2\u0026#34;]::after{ position:absolute; top: 0; left: 0; width: 200%; height: 200%; content: \u0026#34;\u0026#34;; transform: scale(0.5); transform-origin: left top; box-sizing: border-box; border: 1px solid #333; } Approach 3: Solve it by viewport scaling\nThis idea is to target a few key attributes in the meta tag:\n1 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no\u0026#34;\u0026gt; For the pages with a pixel ratio of 2, the whole page is scaled to 1/2 of its original size. So the 1px style that originally occupied 2 physical pixels now occupies the standard one physical pixel. Depending on the pixel ratio, this scale can be calculated as a different value, implemented in js code as follows:\n1 2 3 const scale = 1 / window.devicePixelRatio; // Here metaEl refers to the Dom corresponding to the meta tag metaEl.setAttribute(\u0026#39;content\u0026#39;, `width=device-width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`); This solves the problem, but the side effects of doing so are also significant, as the entire page has been scaled down. The 1px has been processed to the size of the physical pixel, which is perfect for displaying the border on a mobile phone. However, some content that originally did not need to be shrunk, such as text, pictures, etc., has also been indiscriminately downsized.\nUnderstanding of the BFC Specification (Block Formatting Context) BFC dictates how the internal Block Box is laid out. A page is made up of many Boxes, and the type and display properties of the elements determine the type of this Box. Different types of boxes will participate in different Formatting Contexts (containers that decide how to render the document), therefore, elements within the Box will render in different ways, that is to say, elements inside the BFC and elements outside the BFC will not affect each other.\nPositioning scheme:\nThe internal boxes will be placed one after the other in the vertical direction;\nThe vertical distance of the box is determined by the margin, the margin of two adjacent Boxes belonging to the same BFC will overlap;\nThe left side of each element’s margin box is in contact with the left side of the containing block’s border box;\nThe BFC area does not overlap with float boxes;\nBFC is an isolated independent container on the page, and elements inside the container will not affect elements outside;\nWhen calculating the height of the BFC, floating elements will also participate.​\nMeeting any of the following conditions can trigger BFC:\nRoot element changes, i.e., html;\nThe float value is not none (default);\nThe overflow value is not visible` (default);\nThe display value is inline-block, table-cell, table-caption;\nThe position value is absolute or fixed.\nImplementation of the three-column layout The three-column layout generally refers to the layout where the left and right columns have a fixed width and the middle adapts automatically. The specific implementation of the three-column layout is as follows:\nUsing absolute positioning, the two columns on the left and right are set as absolute positioning, and the middle one is set with corresponding direction and size of margin values.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 .outer { position: relative; height: 100px; } .left { position: absolute; width: 100px; height: 100px; background: tomato; } .right { position: absolute; top: 0; right: 0; width: 200px; height: 100px; background: gold; } .center { margin-left: 100px; margin-right: 200px; height: 100px; background: lightgreen; } Using flex layout, the left and right columns are set with a fixed size and the middle one is set with flex:1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .outer { display: flex; height: 100px; } .left { width: 100px; background: tomato; } .right { width: 100px; background: gold; } .center { flex: 1; background: lightgreen; } Using floating, the left and right columns are set with a fixed size and corresponding direction for floating. The middle column is set with margin values for the left and right directions, note that in this method, the middle column must be placed last.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .outer { height: 100px; } .left { float: left; width: 100px; height: 100px; background: tomato; } .right { float: right; width: 200px; height: 100px; background: gold; } .center { height: 100px; margin-left: 100px; margin-right: 200px; background: lightgreen; } Holy Grail Layout, using floating and negative margins. The parent element sets padding on the left and right, all three columns are set to float left, and the middle column is placed at the front, the width is set to the width of the parent element, so the two columns behind are pushed to the next line, set a negative margin value to move them to the previous line, then use relative positioning to position them on either side.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 .outer { height: 100px; padding-left: 100px; padding-right: 200px; } .left { position: relative; left: -100px; float: left; margin-left: -100%; width: 100px; height: 100px; background: tomato; } .right { position: relative; left: 200px; float: right; margin-left: -200px; width: 200px; height: 100px; background: gold; } .center { float: left; width: 100%; height: 100px; background: lightgreen; } Double-wing layout, compared to the Holy Grail layout, the retention of the left and right positions is achieved through the margin value of the middle column, not through the padding of the parent element. Essentially, it’s also achieved through floating and negative outer margins.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 .outer { height: 100px; } .left { float: left; margin-left: -100%; width: 100px; height: 100px; background: tomato; } .right { float: left; margin-left: -200px; width: 200px; height: 100px; background: gold; } .wrapper { float: left; width: 100%; height: 100px; background: lightgreen; } .center { margin-left: 100px; margin-right: 200px; height: 100px; } How to make Chrome support text less than 12px? 1 2 3 4 5 .shrink { -webkit-transform: scale(0.8); -o-transform: scale(0.8); display: inline-block; } What is the execution order of :link, :visited, :hover, :active? It is L-V-H-A, representing l(link)ov(visited)e h(hover)a(active)te. This can be remembered by using the two words “like” and “hate” to summarize.\nHow does the CSS property ‘overflow’ handle a situation when the content of the content area of the element overflows? When the parameter is set to scroll, a scrollbar will always appear;\nWhen the parameter is set to auto, a scrollbar will appear when the content of the child element is larger than the parent element;\nWhen the parameter is set to visible, the overflow content will appear outside of the parent element;\nWhen the parameter is set to hidden, the overflow is hidden;\nComparison of the pros and cons of CSS style import methods. Embedded Style:\nPros: Convenient to write, high weight;\nCons: Does not separate structure and style;\nInline Style:\nPros: Separates structure and style;\nCons: Not completely separate;\nExternal Style:\nPros: Completely separates structure and style;\nCons: Needs to be imported before it can be used;\nWhat happens after position is stacked with display, overflow, float? The display property specifies the type of box that the element should generate;\nThe position property specifies the positioning type of the element;\nThe float property is a layout method that defines the direction in which the element floats;\nStacking Results: It’s a bit like a priority mechanism. The values of position — absolute/fixed have the highest priority. When they are present, float does not work, and the value of display needs to be adjusted. float or absolute positioned elements must be block elements or tables.\nWhat is reflow (rearrangement) and repaint and their differences? Reflow, reflow: A part (or all) of the render tree needs to be rebuilt due to changes in elements\u0026rsquo; dimensions, layout, hiding, etc.\nRepaint, repaint: When some elements in the render tree need to update attributes, and these attributes only affect the appearance, style, but do not affect the layout, it is called repaint, such as color changes, etc.\nAdding or deleting visible dom elements;\nThe position of the element has changed;\nThe size of the element has changed, such as the change of margin, width, height and other geometric properties;\nContent changes, such as image size, font size changes, etc.;\nPage rendering initialization;\nThe size of the browser window changes, such as when a resize event occurs, etc.;\nReflow (rearrangement) will definitely trigger repaint.\nWhy use transform to center? Transform is a composite property, animating a composite property through transition/animation will create a composite layer, allowing the animated elements to be animated in a separate layer. Typically, the browser will first render the content of a layer into a bitmap, then upload it as a texture to the GPU, and as long as the content of the layer does not change, there is no need for repaint. The browser will create a new frame through recomposition.\nTop/left are layout properties, changes to these properties will cause reflow/relayout. This so-called reflow refers to the process of CSS calculation -\u0026gt; layout -\u0026gt; repaint for these nodes and other nodes influenced by them. The browser needs to repaint the entire layer and re-upload it to the GPU, which causes a great deal of performance overhead.\n","date":"2024-02-09T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ge1I6ow4qwBbwv5A","permalink":"http://localhost:1313/p/part-3-100-front-end-questions-and-answers/","title":"Part 3: 100 Front-end Questions and Answers"},{"content":"Why is the data property a function instead of an object, and what is the specific reason? Whether it’s a function or not depends on the scenario. Also, there’s no need to worry about when to write data as a function or object, because vue has internally handled it and output error information in the console.\nScenario One: new Vue({data: ...})\nThis scenario is mainly for project entry or when each html page instantiates a Vue, the data here can be in the form of an object or a factory function returning an object. Because the data here only appears once, and there is no problem of data pollution caused by repeated references.\nScenario Two: Component scenario options\nIn the process of generating component vnode, the component will execute the merge strategy during the process of generating the constructor:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Data merge strategy strats.data = function ( parentVal, childVal, vm ) { if (!vm) { if (childVal \u0026amp;\u0026amp; typeof childVal !== \u0026#39;function\u0026#39;) { process.env.NODE_ENV !== \u0026#39;production\u0026#39; \u0026amp;\u0026amp; warn( \u0026#39;The \u0026#34;data\u0026#34; option should be a function \u0026#39; + \u0026#39;that returns a per-instance value in component \u0026#39; + \u0026#39;definitions.\u0026#39;, vm ); ​ return parentVal } return mergeDataOrFn(parentVal, childVal) } ​ return mergeDataOrFn(parentVal, childVal, vm) }; If the merging process finds that the data of a subcomponent is not a function, i.e., typeof childVal !== 'function' is true, it will output a warning in the console in the development environment and directly return parentVal. This suggests that no data information from childVal has been merged into options.\n​We have mentioned before that the data in the component must be a function. Have you ever wondered why?\nWhen we define a component, vue will eventually form a component instance through Vue.extend().\nHere we imitate the component constructor, defining the data property in the form of an object.\n1 2 3 4 5 6 function Component(){ } Component.prototype.data = { count : 0 } Create two component instances.\n1 2 const componentA = new Component() const componentB = new Component() Modify the value of the data property of the componentA, the value in the componentB also changes.\n1 2 3 console.log(componentB.data.count) // 0 componentA.data.count = 1 console.log(componentB.data.count) // 1 The reason for this is that the two share the same memory address. The content modified by componentA also affects componentB.\nIf we use the form of a function, this situation will not occur (the memory addresses of the objects returned by the function are not the same).\n1 2 3 4 5 6 7 8 function Component(){ this.data = this.data() } Component.prototype.data = function (){ return { count : 0 } } Modify the value of the data property of the componentA, the value in the componentB is not affected.\n1 2 3 console.log(componentB.data.count) // 0 componentA.data.count = 1 console.log(componentB.data.count) // 0 vue components may have many instances, using the function to return a new data form, so that the data of each instance object will not be polluted by other instance objects data.\nDo you know about the initialization process of Vue2, what has it done? When new Vue goes into Vue’s constructor in the src\\core\\instance\\index.js file.\n1 this._init(options) Then from the prototype method added by Mixin, initMixin(Vue), the one called is the _init prototype method added for Vue\nSource code location: src/core/instance/init.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 function initMixin (Vue) { Vue.prototype._init = function (options) { var vm = this; // create vm, ... // Merge options into vm.$options vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || {}, vm ); } ... initLifecycle(vm); // Initialize lifecycle initEvents(vm); // Initialize events initRender(vm); // Initialize render function callHook(vm, \u0026#39;beforeCreate\u0026#39;); // Execute beforeCreate lifecycle hook ... initState(vm); // Initialize data, props, methods computed, watch ... callHook(vm, \u0026#39;created\u0026#39;); // Execute created lifecycle hook if (vm.$options.el) { vm.$mount(vm.$options.el); // This is also the key point that will be used later } } Summary:\nTherefore, from the above functions, the things done by new vue unfold like a flow chart, which are:\nMerge configuration\nInitialize lifecycle\nInitialize events\nInitialize rendering\nCall the beforeCreate hook function\nInit injections and reactivity (at this stage, properties are all injected and bound, and they are transformed into reactivity by $watch, but $el is not yet generated, that is, the DOM is not generated yet)\nInitialize state state (initialize data, props, computed, watcher)\nCall the created hook function.\nAt the end of initialization, if the el attribute is detected, the vm.$mount method is called to mount vm. The target of the mount is to render the template into the final DOM.\nA rough process of Vue3 initialization Initial rough process\ncreateApp() =\u0026gt; mount() =\u0026gt; render() =\u0026gt; patch() =\u0026gt; processComponent() =\u0026gt; mountComponent()\nSimplified version of the process\nVue.createApp() actually executes renderer’s createApp()\nrenderer is created by the createRenderer method\nrenderer’s createApp() is returned by createAppAPI()\nAfter receiving render, createAppApi creates an app instance and defines the mount method\nmount will call the render function. Convert vnode to real dom\ncreateRenderer() =\u0026gt; renderer =\u0026gt; renderer.createApp() \u0026lt;= createAppApi()\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 3.createAppAPI const createAppAPI = render =\u0026gt; { return function createApp(rootComponent) { // return application instance const app = { mount(rootContainer) { // mount vnode =\u0026gt; dom const vnode = { tag: rootComponent } // Execute rendering render(vnode, rootContainer) } } return app; } } // 1. Create createApp const Vue = { createApp(options) { //What actually executed is renderer\u0026#39;s createApp() // Return app instance return renderer.createApp(options) } } // 2. Implement renderer factory function const createRenderer = options =\u0026gt; { // Implement patch const patch = (n1, n2, container) =\u0026gt; { // Get root component configuration const rootComponent = n2.tag; const ctx = { ...rootComponent.data()} // Execute render to get vnode const vnode = rootComponent.render.call(ctx); // Convert vnode =\u0026gt; dom const parent = options.querySelector(container) const child = options.createElement(vnode.tag) if (typeof vnode.children === \u0026#39;string\u0026#39;) { child.textContent = vnode.children } else { //array } // Append options.insert(child, parent) } // Implement render const render = (vnode, container) =\u0026gt; { patch(container._vnode || null, vnode, container) container._vnode = vnode; } // This object is renderer return { render, createApp: createAppAPI(render) } } const renderer = createRenderer({ querySelector(el) { return document.querySelector(el) }, createElement(tag) { return document.createElement(tag) }, insert(child, parent) { parent.appendChild(child) } }) Vue.createApp({ data() { return { bar: \u0026#39;hello,vue3\u0026#39; } }, render() { return { tag: \u0026#39;h1\u0026#39;, children: this.bar } } }).mount(\u0026#39;#app\u0026#39;) \u0026lt;/script\u0026gt; In Vue3, CreateApp() initializes, mount() is responsible for objectifying, render() transforms vnode into the real dom in the browser, you can understand patch() as a diff algorithm, processComponent() usually processes third-party components in vue, and finally mountComponent() will render our HTML.\nHow to write Vue3 responsive API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 var activeEffect = null; function effect(fn) { activeEffect = fn; activeEffect(); activeEffect = null; } var depsMap = new WeakMap(); function gather(target, key) { // void triggering gather when using console.log(obj1.name) if (!activeEffect) return; let depMap = depsMap.get(target); if (!depMap) { depsMap.set(target, (depMap = new Map())); } let dep = depMap.get(key); if (!dep) { depMap.set(key, (dep = new Set())); } dep.add(activeEffect) } function trigger(target, key) { let depMap = depsMap.get(target); if (depMap) { const dep = depMap.get(key); if (dep) { dep.forEach((effect) =\u0026gt; effect()); } } } function reactive(target) { const handle = { set(target, key, value, receiver) { Reflect.set(target, key, value, receiver); trigger(receiver, key); // Trigger automatic update when setting values }, get(target, key, receiver) { gather(receiver, key); // Collect dependencies when accessing return Reflect.get(target, key, receiver); }, }; return new Proxy(target, handle); } ​ function ref(name){ return reactive( { value: name } ) } How do you do SSR rendering in Vue projects Compared with the traditional SPA (Single-Page Application), the advantages of Server Side Rendering (SSR) mainly include:\nBetter SEO, as search engine crawlers can directly view the fully rendered page.\nFaster time-to-content, especially for slow network conditions or slow-running devices.\nVue.js is a framework for building client-side applications. By default, Vue components can be output in the browser to generate DOM and operate DOM. However, the same component can also be rendered as a server-side HTML string, send them directly to the browser, and finally “activate” these static markers into fully interactive applications on the client side.\nA server-rendered Vue.js app can also be considered “isomorphic” or “universal” because most of the application’s code can run on both the server and the client.\nVue SSR is a server-side rendering that has been improved on SPA.\nThe page rendered by Vue SSR needs to be activated on the client side to achieve interaction.\nVue SSR will include two parts: the first screen rendered by the server, and the SPA with interaction.\nUsing SSR does not have a singleton mode, and a new Vue instance will be created whenever a user makes a request.\nImplementing SSR requires implementing server-side first screen rendering and client-side activation.\nServer asynchronous data fetching asyncData can be divided into first screen asynchronous fetching and switching component fetching.\nThe first screen asynchronously fetches data, which should have been completed during server-side pre-rendering.\nSwitch components fetch data through mixin mixing, and complete data fetching in the beforeMount hook.\nHow do you view Vue’s diff algorithm The diff algorithm is an efficient algorithm for comparing tree nodes at the same level\nThe overall strategy of diff is: depth first, compare on the same level\nComparisons are only made at the same level, and will not compare across levels\nDuring the comparison process, the loop converges from both ends to the middle\nWhen the data changes, the subscriber watcher will call patch to patch the real DOM\nCall the patchVnode method if they are the same through the isSameVnode judgment\nPatchVnode does the following operations:\nFind the corresponding real dom, called el\nIf both have text nodes and are not equal, set the el text node to the text node of Vnode\nIf oldVnode has child nodes and VNode doesn’t, then delete the child nodes of el\nIf oldVnode has no child nodes and VNode has, then add the real child nodes of VNode to el\nIf both have child nodes, execute the updateChildren function to compare the child nodes\nUpdateChildren mainly does the following operations: Set the head and tail pointers of the new and old VNode\nCompare the head and tail pointers of the new and old, loop towards the middle, and call patchVnode to repeat the patch process according to the situation, call createElem to create a new node, and find the VNode node with the same key from the hash table and then operate according to the situation.\nWhat do you need to do to build a Vue project from scratch Scaffold: Choose the appropriate initialization scaffold (vue-cli2.0 or vue-cli3.0)\nRequest: Data axios request configuration\nLogin: Login registration system\nRouting: Route management page\nData: Vuex global data management\nPermission: Permission management system\nBuried point: Buried point system\nPlugin: The selection and introduction of third-party plugins\nError: Error page\nEntry: Front-end resources are used directly as static resources, or the server-side template is fetched\nSEO: If SEO is considered, the SSR scheme is recommended\nComponents: Base component/Business component\nStyle: style preprocessing, extraction of common styles\nMethod: Common method extraction\nWhat are the data types in js and how are the values stored JavaScript has a total of 8 data types, 7 of which are basic data types: Undefined, Null, Boolean, Number, String, Symbol (new in es6, representing a unique value) and BigInt (new in es10);\nThere is 1 reference data type — Object (Object is essentially a group of unordered name-value pairs). It contains function, Array, Date, etc. JavaScript does not support any mechanism for creating custom types, and all values will eventually be one of these 8 data types.\nPrimitive data types: Directly stored in the stack, occupying small space, fixed size, being frequently used data, so they are stored in the stack.\nReference data types: Both stored in the stack and heap, occupying large space, and the size is not fixed. The reference data type stores a pointer in the stack, which points to the starting address of the entity in the heap. When the interpreter is looking for a reference value, it will first search for its address in the stack, and then get the entity from the heap after obtaining the address.\nIn JS, Object.prototype.toString.call() is used to determine the data type 1 2 3 4 5 6 7 8 9 var a = Object.prototype.toString; console.log(a.call(2)); // [object Number] console.log(a.call(true)); // [object Boolean] console.log(a.call(\u0026#39;str\u0026#39;)); // [object String] console.log(a.call([])); // [object Array] console.log(a.call(function(){})); // [object Function] console.log(a.call({})); // [object Object] console.log(a.call(undefined)); // [object Undefined] console.log(a.call(null)); // [object Null] What’s the difference between null and undefined? Firstly, Undefined and Null are both basic data types, each of which has only one value, undefined and null.\nundefined represents undetermination, null represents a blank object (not really an object, please see the notes below!). Generally, when a variable is declared but not yet defined, it returns undefined; null is mainly used for initializing variables that may return objects.\nIn fact, null is not an object, although typeof null will output object, but this is just an long-standing bug in JS. In the earliest version of JS, it used a 32-bit system for performance reasons, used low bits to store variable type information, and 000 at the beginning represented an object. However, null is represented as all-zeros, so it was wrongly judged as an object. Although the code for judging the internal type has changed now, this bug has been passed down.\nundefined in js is not a reserved word, which means we can use undefined as a variable name, this practice is very dangerous, it will affect our judgment of the undefined value. However, we can get a safe undefined value through some methods, such as void 0.\nWhen we use typeof to judge the two types, the Null type will return “object”, which is a historical issue. When we use double equals to compare the values of the two types, it returns true, and using triple equals returns false.\nWhat are the results of valueOf and toString for {} and []? The valueOf result for {} is {}, and the toString result is [object Object].\nThe valueOf result for [] is [], and the toString result is “”.\nThe Scope and Scope Chain of Javascript Scope: Scope defines the region where variables are defined. It has a set of rules for accessing variables. These rules manage how the browser engine searches for variables (identifiers) in the current scope and nested scopes.\nScope Chain: The role of the scope chain is to ensure the orderly access to all variables and functions that the execution environment has the right to access. Through the scope chain, we can access the variables and functions of the outer environment.\nThe essence of the scope chain is a pointer list that points to variable objects. The variable object is an object that contains all the variables and functions in the execution environment. The front end of the scope chain is always the variable object of the current execution context. The variable object of the global execution context (that is, the global object) is always the last object of the scope chain.\nWhen we search for a variable, if it is not found in the current execution environment, we can search backward along the scope chain.\nThe creation of the scope chain is related to the establishment of the execution context.\nPlease discuss your understanding of this, call, apply, and bind In the browser, this in the global scope points to the window object;\nIn functions, this always points to the object that last called it;\nIn constructors, this points to the newly created object through new;\nIn call, apply, bind, this is strongly bound to the designated object;\nthis in arrow functions is special, the this in the arrow function is the this in the parent scope, not the this at the time of the call. You should know that the first four methods are determined at the time of the call, that is, dynamically, while the this of the arrow function is static and is determined at the time of the declaration;\napply, call, bind are some built-in APIs inside the functions, which can be used to specify the execution of this for the function. They can also pass parameters.\nWhat is JavaScript Prototype and Prototype Chain? What are its features? In js, we use the constructor to create a new object. Each constructor internally has a prototype attribute. This attribute is an object that contains all the properties and methods that can be shared by all instances of this constructor. After we use the constructor to create a new object, the object will internally contain a pointer. This pointer points to the value corresponding to the prototype property of the constructor. In ES5, this pointer is called the prototype of the object. Generally, we should not be able to get this value. However, current browsers have implemented the proto property to allow us to access this attribute. However, we should avoid using this attribute because it is not stipulated in the specification. ES5 added a Object.getPrototypeOf() method. We can use this method to get the prototype of the object.\nWhen we access an attribute of an object and if the attribute does not exist within the object, it will go to its prototype object to find that attribute. This prototype object will also have its own prototype, and it keeps looking this way. This is the concept of the prototype chain. The end of the prototype chain is usually Object.prototype, so this is why newly created objects can use the toString() method and other methods.\nFeatures:\nJavaScript objects are passed by reference, and each new object entity we create does not have a copy of its own prototype. When we modify the prototype, the corresponding object will also inherit this change.\nWhat is a closure, and why should we use it? A function that can access the internal variables of other functions is called a closure.\nA function that can access free variables is called a closure.\nScenarios\nAs for the use cases of closures, we often use them in daily development.\nThrottling and debouncing functions\nTimer callbacks\nAdvantages\nWhat problem does the closure help us solve?\nInternal variables are private, which can isolate scope and prevent data from being polluted\nDisadvantages\nAt the same time, closures also bring some downsides.\nAs its advantage has been discussed, ‘internal variables are private, it can isolate scope’, which means that the garbage collection mechanism cannot clean up internal variables in closures, resulting in memory leaks.\nWhat are the three event models? Events are interactive actions that occur when a user operates a web page or some operations of the web page itself. Modern browsers have three event models:\nDOM Level 0 model: This model does not propagate, so there is no concept of event flow, but now some browsers support implementation in a bubbling way. It allows direct definition of listener functions in web pages, or specification of listener functions through js properties. This method is compatible with all browsers.\nIE event model: In this event model, there are two processes for one event, the event handling phase, and the event bubbling phase. The event handling phase will first execute the listening event bound to the target element. Then is the event bubbling phase. Bubbling refers to the event bubbling from the target element to the document while checking whether the nodes passed have bound event listener functions. If there are, then they are executed. This type of model uses attachEvent to add listener functions. It can add multiple listener functions that are executed in the order they were added.\nDOM Level 2 event model: This event model has three processes for one event. The first process is the event capturing phase. Capturing is the event propagating from the document down to the target element, checking if the nodes passed have bound event listener functions. If there are, then they are executed. The next two phases are the same as in the IE event model. In this event model, the function bound to the event is addEventListener. Its third parameter can specify whether the event executes in the capture phase.\nJavaScript arrays and strings have a variety of native methods Array methods:\npush() — Add new items to the end of an array\npop() — Remove the last item of an array\nshift() — Remove the first item of an array\nunshift() — Add new items to the beginning of an array\nslice() — Returns a new array with a portion of the elements of the original array\nsplice() — Add/Remove items from an array\njoin() — Join all elements of the array into a string\nreverse() -Reverses the order of the elements in an array\nsort() — Sorts the elements of an array\nmap() — Creates a new array with the results of calling a provided function on every element in the array\nfilter() — Creates a new array with all elements that pass a test provided by a function\nreduce() — Apply a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.\nforEach() — Executes a provided function once for each array element\nString methods:\nlength() — Returns the length of a string\ncharAt() — Returns the character at a specified index in a string\ncharCodeAt() — Returns the Unicode of the character at a specified index\nconcat() — Concatenate two or more strings\nindexOf() — Returns the position of the first found occurrence of a specified value in a string\nlastIndexOf() — Returns the position of the last found occurrence of a specified value in a string\nmatch() — Searches a string for a match against a regular expression and returns the matches\nsearch() — Searches a string for a specified value or regular expression and returns the position of the match\nreplace() — Replaces some or all matches with a replacement\nslice() — Extracts a part of a string and returns a new string\nsplit() — Splits a string into an array of substrings\nsubstr() — Extracts parts of a string, beginning at the character at the specified position, and returns the specified number of characters\nsubstring() — Extracts characters from a string between two specified indices\ntoLowerCase() — Converts a string to lowercase letters\ntoUpperCase() — Converts a string to uppercase letters\nWhat are the ways to load JavaScript lazily? The loading, parsing, and execution of JavaScript can block the rendering of the page. Therefore, we hope that JavaScript scripts can be loaded as late as possible to improve the rendering speed of the page.\nut JavaScript scripts at the bottom of the document to load and execute them as late as possible.\nAdd the defer attribute to the JavaScript script. This attribute allows the script to load in parallel with the document’s parsing process. After the document has finished parsing, then this script file will be executed. This way, the rendering of the page is not blocked. Multiple scripts set with the defer attribute should be executed in order according to the standard, but in some browsers, it may not be the case.\nAdd the async attribute to the JavaScript script. This attribute allows the script to load asynchronously and will not block the parsing of the page. However, when the script loading is completed, the JavaScript script will be executed immediately. If the document has not finished parsing, it will also block. The execution order of multiple scripts with the async attribute is unpredictable and does not generally follow the order of the code.\nDynamic creation of DOM tags. We can listen to the loading events of the document. When the document has finished loading, we can dynamically create script tags to import JavaScript scripts.\nThere are four mature module loading schemes in JavaScript now The first one is the CommonJS scheme, which uses require to import modules and defines the module’s output interface through module.exports. This module loading solution is a server-side solution, it imports modules in a synchronous way because on the server-side all files are stored on the local disk, so the reading is very fast, so synchronous loading is not a problem. But if it is on the client-side, because the loading of modules uses network requests, using asynchronous loading is more appropriate.\nThe second is the AMD scheme, which uses asynchronous loading to load modules, the loading of modules does not affect the execution of subsequent statements, all statements that depend on this module are defined in a callback function, and the callback function is executed after the loading is completed. Require.js implements the AMD specification.\nThe third is the CMD scheme, this scheme and the AMD scheme are to solve the problem of asynchronous module loading, sea.js implements the CMD specification. It differs from require.js in the handling of dependencies when defining modules and the timing of executing dependent modules.\nThe fourth scheme is proposed by ES6, using import and export to import and export modules.\nThe difference between AMD and CMD specifications? There are two main differences between them.\nThe first aspect is the different handling of dependencies when defining modules. AMD advocates for dependency upfront, which means you need to declare its dependent modules when defining a module. CMD, on the other hand, advocates for just-in-time dependency, meaning that you only require a module when you need it.\nThe second aspect is the differing handling of when dependent modules are executed. Although AMD and CMD both load modules asynchronously, they are different when it comes to the execution timing of modules. Once AMD’s dependent modules are loaded, it starts executing them directly, and the execution order of these modules may not necessarily be the same as how we write them. CMD, on the other hand, does not execute the module immediately after it is loaded, it only downloads it. After all dependent modules have been loaded, it enters the callback function logic. It only executes the corresponding module when it encounters a require statement, so the execution order of the modules is consistent with the order in which we write them.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // CMD define(function(require, exports, module) { var a = require(\u0026#34;./a\u0026#34;); a.doSomething(); ... var b = require(\u0026#34;./b\u0026#34;); // Dependencies can be written nearby b.doSomething(); // ... }); // AMD define([\u0026#34;./a\u0026#34;, \u0026#34;./b\u0026#34;], function(a, b) { // Dependencies must be written from the beginning a.doSomething(); ... b.doSomething(); // ... }); ifferences between ES6 modules and CommonJS modules, AMD, and CMD. Syntax CommonJS uses module.exports = {} to export a module object, require(\u0026lsquo;file_path\u0026rsquo;) to import a module object; ES6 uses export to export specific data, import to import specific data.\nCommonJS module outputs a copy of a value, ES6 module outputs a reference to a value CommonJS module outputs a copy of a value, that is, once a value is output, changes inside the module cannot affect this value.\nThe operating mechanism of ES6 Modules is different from CommonJS. When the JS engine performs a static analysis of the script, it encounters the module loading command import, it will generate a read-only reference. When the script is actually executed, it will retrieve the value from the loaded module based on this read-only reference. In other words, ES6\u0026rsquo;s import is like Unix system\u0026rsquo;s \u0026ldquo;symbolic link\u0026rdquo;. If the original value changes, the value loaded by import will also change accordingly. Therefore, ES6 modules are dynamic references and do not cache values. The variables within the module are bound to the module where they are located.\nCommonJS modules are loaded at runtime, ES6 modules are loaded at compile time Runtime Loading: CommonJS modules are objects, i.e., modules are loaded in their entirety first to generate an object, and then methods are read from this object. This type of loading is called “runtime loading”.\nCompile-time loading: ES6 modules are not objects, they specify the code that is to output explicitly through the export command, and static commands are used when imports. At the time of import, you can specify to load some outputted values instead of loading the whole module. This type of loading is called \u0026ldquo;compile-time loading\u0026rdquo;.\nPS: The CommonJS loads an object (i.e., module.exports property), which is only generated after the script has finished running. ES6 modules, on the other hand, are not objects, their external interfaces are just static definitions that are generated during the static analysis phase of the code.\nJS operation mechanism Asynchronous task types: macro tasks, micro tasks\nSynchronous tasks and asynchronous tasks enter different execution “places”\nFirst, execute the macro tasks in the main thread execution stack\nIf a micro task is encountered during execution, it enters the Event Table and registers a function, after which it moves into the task queue of micro tasks\nAfter the macro task is executed, all micro tasks in the current micro task queue are immediately executed (in order)\nThe main thread will continuously retrieve tasks from the task queue, execute tasks, retrieve more, and execute more tasks. This is often referred to as the Event Loop.\nA brief introduction to the garbage collection mechanism of the V8 engine V8’s garbage collection mechanism is based on generational garbage collection, which is in turn based on the generational hypothesis. This hypothesis has two characteristics, one is that newly created objects easily die young, the other is that objects that do not die will live longer. Based on this hypothesis, the V8 engine divides memory into new generation and old generation.\nNewly created objects or objects that have only undergone garbage collection once are referred to as the new generation. Objects that have undergone garbage collection multiple times are referred to as the old generation.\nThe new generation is divided into ‘From’ and ‘To’ spaces, with ‘To’ typically being idle. When the ‘From’ space is full, the Scavenge algorithm executes garbage collection. When we execute the garbage collection algorithm, the application logic will stop and only continue after the garbage collection ends. This algorithm consists of three steps:\n(1) First, check the surviving objects in the ‘From’ space. If the object is alive, check if it meets the criteria for promotion to the old generation. If the conditions are met, it is promoted to the old generation. If the conditions are not met, it is moved to the ‘To’ space.\n(2) If the object is not alive, then the space of the object is freed.\n(3) Finally, the roles of the ‘From’ space and the ‘To’ space are swapped.\nThere are two conditions for promoting new generation objects to the old generation:\n(1) The first is to check if the object has already undergone a Scavenge recovery. If it has undergone one, the object will be copied from the ‘From’ space to the old generation. If it has not undergone one, it will be copied to the ‘To’ space.\n(2) The second is to check if the usage of the ‘To’ space exceeds the limit. When an object is copied from the ‘From’ space to the ‘To’ space, if the ‘To’ space usage is over 25%, the object is directly promoted to the old generation. The reason for setting ‘25%’ is mainly because after the algorithm ends, the two spaces will be swapped. If the memory of the ‘To’ space is too small, it will affect subsequent memory allocation.\nThe old generation uses the mark-sweep and mark-compact methods. The mark-sweep method first marks the surviving objects in memory and then removes the unmarked objects after the marking ends. Since mark-sweep can cause a lot of memory fragments, which is not conducive to subsequent memory allocation, the mark-compact method was introduced to solve the problem of memory fragmentation.\nSince the application logic is paused during garbage collection, the pause time is not too long for the new generation method because of the small memory. However, for the old generation, each garbage collection takes a long time, and the pause will have a significant impact. To solve this problem, V8 introduced an incremental marking method, dividing the pause process into multiple steps. After each small step, it lets the running logic execute for a while, alternating like this.\nWhat actions can cause a memory leak? Accidental Global Variables\nForgotten Timers or Callbacks\nOut-of-DOM References\nClosures\nWhat are the new features in ES6? Block Scoping\nClasses\nArrow Functions\nTemplate Strings\nEnhanced Object Literals\nObject Destructuring\nPromise\nModules\nSymbol\nProxy \u0026amp; Set\nDefault Function Parameters\nSpread\nWhat is an Arrow Function? What is an Arrow Function?\n1 2 3 4 5 6 //ES5 Version var getCurrentDate = function (){ return new Date(); } //ES6 Version const getCurrentDate = () =\u0026gt; new Date(); Arrow function expressions have a more concise syntax than function expressions and do not have their own this, arguments, super, or new.target. Arrow function expressions are best suited for places where anonymous functions are originally needed, and they cannot be used as constructors.\nAn arrow function does not have its own this value. It captures the this value of the lexical scope function. If we declare the arrow function in the global scope, the this value is the window object.\nWhat is a Higher Order Function? Higher order functions are simply functions that take functions as arguments or return them as results.\n1 2 3 function higherOrderFunction(param, callback){ return callback(param); } Handwritten call, apply, and bind functions Implementing the call Function Process the edge case:\nIf the object does not exist, the this points to window.\nAssign the “calling function” to the fn property of the object that this points to.\nExecute the fn function on the object that this points to, pass in the parameters, and return the results.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Function.prototype.mu_call = function (context, ...args) { // If the object does not exist, it points to window. if (!context || context === null) { context = window; } // Create a unique key value to be used as the internal method name of the context we construct. let fn = Symbol(); // The this points to the function that calls call. context[fn] = this; // Executing the function and returning the result is equivalent to calling itself as a method of the passed-in context. return context[fn](...args); }; // test var value = 2; var obj1 = { value: 1, }; function bar(name, age) { var myObj = { name: name, age: age, value: this.value, }; console.log(this.value, myObj); } bar.mu_call(null); // {name: undefined, age: undefined, value: 2} bar.mu_call(obj1, \u0026#39;tom\u0026#39;, \u0026#39;110\u0026#39;); // {name: \u0026#34;tom\u0026#34;, age: \u0026#34;110\u0026#34;, value: 1} Implementing the apply Function Similar to call, the difference lies in the form of parameters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 Function.prototype.mu_apply = function (context, args) { // If the object does not exist, it points to window. if (!context || context === null) { context = Window; } // Create a unique key value to be used as the internal method name of the context we construct. let fn = Symbol(); ​ // The this points to the function that calls call. context[fn] = this; ​ // Executing the function and returning the result is equivalent to calling itself as a method of the passed-in context. return context[fn](...args); }; ​ // test var value = 2; var obj1 = { value: 1, }; function bar(name, age) { var myObj = { name: name, age: age, value: this.value, }; console.log(this.value, myObj); } bar.mu_apply(obj1, [\u0026#34;tom\u0026#34;, \u0026#34;110\u0026#34;]); // {name: \u0026#34;tom\u0026#34;, age: \u0026#34;110\u0026#34;, value: 1} Implementing the bind Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 Function.prototype.mu_bind = function (context, ...args) { if (!context || context === null) { context = window; } // Create a unique key value as the method name inside our constructed context. let fn = Symbol(); context[fn] = this; let _this = this; const result = function (...innerArgs) { // First situation: If the function bound by bind is used as a constructor, // and used through the new operator, do not bind the passed-in this, // but point this to the object that has been instantiated. if (this instanceof _this === true) { // At this point, this points to the instance of result, // so there is no need to change the pointing of this. this[fn] = _this; this[fn](...[...args, ...innerArgs]); delete this[fn]; } else { // If it is called as a regular function, then just change this to point to the passed-in context. context[fn](...[...args, ...innerArgs]); delete context[fn]; } }; // If what is bound is a constructor, then we need to inherit the prototype\u0026#39;s attributes and methods of the constructor, // it can be done using Object.create. result.prototype = Object.create(this.prototype); return result; }; function Person(name, age) { console.log(name); //\u0026#39;The name passed in by the parameter\u0026#39; console.log(age); //\u0026#39;The age passed in by the parameter\u0026#39; console.log(this); } Person.prototype.say = function () { console.log(123); }; function normalFun(name, age) { console.log(name); //\u0026#39;The name passed in by the parameter\u0026#39; console.log(age); //\u0026#39;The age passed in by the parameter\u0026#39; console.log(this); console.log(this.objName); //\u0026#39;The name passed in by obj\u0026#39; console.log(this.objAge); //\u0026#39;The age passed in by obj\u0026#39; } let obj = { objName: \u0026#39;The name passed in by obj\u0026#39;, objAge: \u0026#39;The age passed in by obj\u0026#39;, }; let bindFun = normalFun.mu_bind(obj, \u0026#39;The name passed in by the parameter\u0026#39;); bindFun(\u0026#39;The age passed in by the parameter\u0026#39;); Implementation of Function Currying 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Function currying refers to a technique of converting a function that uses multiple parameters into a series of functions that use a single parameter. function curry(fn, args) { // Get the number of parameters required by the function let length = fn.length; args = args || []; return function() { let subArgs = args.slice(0); // Concatenate to get all the current arguments for (let i = 0; i \u0026lt; arguments.length; i++) { subArgs.push(arguments[i]); } // Determine whether the length of the argument already meets the length of the parameters required by the function if (subArgs.length \u0026gt;= length) { // If it meets the requirements, execute the function return fn.apply(this, subArgs); } else { // If it does not meet the requirements, recurse to return the curried function and wait for the argument to be passed in return curry.call(this, fn, subArgs); } }; } // es6 Implementation function curry(fn, ...args) { return fn.length \u0026lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args); } Implement a new operator First, we need to understand what the new operator does:\nFirstly, it creates an empty object.\nTo point the proto of the empty object to the prototype of the constructor.\nIt makes this point to the newly created object and execute the constructor.\nIf the execution result has a return value and it is an object, return the execution result, otherwise, return the newly created object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Code implementation function my_new(fn,...arg){ // Firstly, create an empty object const obj = {}; // To point the proto of the empty object to the prototype of the constructor Object.setPrototypeOf(obj, fn.prototype) // It makes this point to the newly created object and execute the constructor const result = fn.apply(obj,arg); // If the execution result has a return value and it is an object, return the execution result, otherwise, return the newly created object return result instanceof Object ? result : obj; } // Validate my_new function function Dog(name){ this.name = name; this.say = function(){ console.log(\u0026#39;my name is\u0026#39; + this.name); } } const dog = my_new(Dog, \u0026#34;Shawn\u0026#34;); dog.say() //my name is Shawn Can you talk about Promise, and can you implement it by handwriting? Promise is a solution to asynchronous programming, which is more reasonable and powerful than traditional solutions — callback functions and events. It was first proposed and implemented by the community, ES6 wrote it into the language standard, unified its usage, and provided Promise object natively.\nPromise, simply put, is a container that holds the result of an event (usually an asynchronous operation) that will only end in the future. From a syntactic point of view, Promise is an object from which you can get messages about asynchronous operations. Promise provides a unified API, and various asynchronous operations can be handled in the same way.\nLet’s look at the basic principles of the Promise we are familiar with\nFirst of all, when we call Promise, it will return a Promise object.\nWhen constructing a Promise object, you need to pass in an executor function. The main business process of Promise is executed in the executor function.\nIf the business running in the executor function is successful, it will call the resolve function; if it fails, it will call the reject function.\nThe status of Promise is irreversible. If you call the resolve function and the reject function at the same time, the result of the first call will be adopted by default.\nConsidering the Promise/A+ specification, we can also analyze some basic features\nThe Promise/A+ specification is quite extensive, here are a few key points for reference. Promise/A+ specification\nPromise has three states: pending, fulfilled, and rejected. The default state is pending.\nPromise has a value to save the successful state value and a reason to save the failed state value. It can be undefined/thenable/promise.\nPromises can only go from pending to rejected, or from pending to fulfilled. Once the state is confirmed, it will not change.\nPromise must have a then method, which accepts two parameters, one is the onFulfilled callback for success, and the other is the onRejected callback for failure.\nIf an exception is thrown in the then, it will pass this exception as a parameter to the next then’s onRejected callback.\nSo CustomPromise, can\u0026rsquo;t implement the basic principles of 3, 4. So let\u0026rsquo;s analyze what\u0026rsquo;s missing based on the basic principles and Promise/A+:\nPromise has three states: pending, fulfilled, and rejected.\nThe executor calls two methods: reject and resolve\nYou also need variables to save the values ​​of success or failure\nThen accepts two parameters, onFulfilled for successful callbacks and onRejected for failed callbacks.\nManually implement promise:\nconst PENDING = \u0026#34;pending\u0026#34;; const FULFILLED = \u0026#34;fulfilled\u0026#34;; const REJECTED = \u0026#34;rejected\u0026#34;; class CustomPromise { constructor(executor) { try { executor(this.resolve, this.reject); } catch (error) { // If there is an error, execute reject directly this.reject(error); } } // Why use arrow functions for resolve and reject? // If directly called, the this pointer of the regular function points to window or undefined // Using arrow function can let this point to the current object instance resolve = (value) =\u0026gt; { // Promise can only go from pending to rejected, or from pending to fulfilled if (this.status == PENDING) { this.status = FULFILLED; this.value = value; // In resolve, all successful callbacks are taken out and executed if (this.onResolvedCallbacks.length) { this.onResolvedCallbacks.forEach((fn) =\u0026gt; fn()); } } }; reject = (err) =\u0026gt; { // Promise can only go from pending to rejected, or from pending to fulfilled if (this.status == PENDING) { this.status = REJECTED; this.reason = err; // In reject, all failed callbacks are taken out and executed if (this.onFulfilledCallbacks.length) { this.onFulfilledCallbacks.forEach((fn) =\u0026gt; fn()); } } }; // Storing successful callback functions onResolvedCallbacks = []; // Storing failed callback functions onFulfilledCallbacks = []; status = PENDING; // Value after success value = undefined; // Value after failure reason = undefined; then(onFulfilled, onRejected) { // If not passed, the default function is used to ensure it is a function type onFulfilled = typeof onFulfilled === \u0026#34;function\u0026#34; ? onFulfilled : (value) =\u0026gt; value; onRejected = typeof onRejected === \u0026#34;function\u0026#34; ? onRejected : (reason) =\u0026gt; { throw reason; }; const thenCustomPromise = new CustomPromise((resolve, reject) =\u0026gt; { const resolveCustomPromise = (callBack, value) =\u0026gt; { try { const x = callBack(value); // If it is equal, it means that it returns itself, throws a type error and returns if (resolveCustomPromise === x) { return reject(new TypeError(\u0026#34;Type Error\u0026#34;)); } // Determine if x is a CustomPromise instance object if (x instanceof CustomPromise) { // Execute x and call the then method to make its state fulfilled or rejected // x.then(value =\u0026gt; resolve(value), error =\u0026gt; reject(reason)) // Simplified as x.then(resolve, reject); } else { // Ordinary value resolve(x); } } catch (error) { reject(error); } }; // Need to judge the status, choose the processing callback function according to the status if (this.status == FULFILLED) { resolveCustomPromise(onFulfilled, this.value); } else if (this.status == REJECTED) { resolveCustomPromise(onRejected, this.reason); } else if (this.status == PENDING) { // When the status is pending, push the then callback into the resolve/reject execution queue and wait for execution this.onResolvedCallbacks.push(() =\u0026gt; resolveCustomPromise(onFulfilled, this.value) ); this.onFulfilledCallbacks.push(() =\u0026gt; resolveCustomPromise(onRejected, this.reason) ); } }); return thenCustomPromise; } catch(onFulfilled) { return this.then(null, onFulfilled); } finally(callback) { return this.then( (value) =\u0026gt; CustomPromise.resolve(callback()).then(() =\u0026gt; value), (reason) =\u0026gt; CustomPromise.resolve(callback()).then(() =\u0026gt; reason) ); } //Static resolve method static resolve(value) { if (value instanceof CustomPromise) return value; return new CustomPromise((resolve) =\u0026gt; resolve(value)); } //Static reject method static reject(reason) { return new CustomPromise((resolve, reject) =\u0026gt; reject(reason)); } //Static all method static all(values) { // Used to record the number of successful promises let resolveCount = 0, // Used to save the results of successful promises resolveDataList = []; return new CustomPromise((resolve, reject) =\u0026gt; { function addPromise(key, value) { resolveDataList[key] = value; resolveCount++; if (resolveCount === values.length) { resolve(resolveDataList); } } for (let i = 0; i \u0026lt; values.length; i++) { let item = values[i]; if (item instanceof CustomPromise) { // The parameter is Promise item.then( (value) =\u0026gt; addPromise(i, value), (error) =\u0026gt; reject(error) ); } else { // The parameter is an ordinary value addPromise(i, item); } } }); } //Static race method static race(values) { return new CustomPromise((resolve, reject) =\u0026gt; { for (const p of values) { p.then(resolve, reject); } }); } //Static allSettled method static allSettled(values) { return new Promise((resolve, reject) =\u0026gt; { let resolveDataList = [], resolveCount = 0; const addPromise = (status, value, i) =\u0026gt; { resolveDataList[i] = { status, value, }; resolveCount++; if (resolveCount === values.length) { resolve(resolveDataList); } }; values.forEach((value, i) =\u0026gt; { if (value instanceof CustomPromise) { value.then( (res) =\u0026gt; { addPromise(\u0026#34;fulfilled\u0026#34;, res, i); }, (err) =\u0026gt; { addPromise(\u0026#34;rejected\u0026#34;, err, i); } ); } else { addPromise(\u0026#34;fulfilled\u0026#34;, value, i); } }); }); } //Static any method static any(values) { return new CustomPromise((resolve, reject) =\u0026gt; { let rejectCount = 0; values.forEach((value) =\u0026gt; { value.then( (val) =\u0026gt; resolve(val), (err) =\u0026gt; { rejectCount++; if (rejectCount === value.length) { reject(\u0026#34;All promises were rejected\u0026#34;); } } ); }); }); } } What is async/await and how does it work, can async be handwritten? Async — Declaration of an asynchronous function\nAutomatically converts regular functions to Promise, and the return value is also a Promise object.\nOnly after the asynchronous operation inside the async function is completed, then the callback function specified by the then method will be executed.\nYou can use await inside asynchronous functions.\nAwait — Pause the execution of asynchronous functions (var result = await someAsyncCall();)\nPlaced before Promise calls, await forces other codes to wait until the Promise is completed and returns a result.\nIt can only be used with Promise, not with callbacks.\nIt can only be used inside async functions.\nWhat are the advantages and disadvantages of instanceof, and how is it implemented? Advantages and disadvantages:\n「Advantages」: Able to distinguish between Array, Object and Function, suitable for judging custom class instance objects\n「Disadvantages」: Basic data types such as Number, Boolean, and String cannot be determined\nImplementation steps:\nPass in parameters as instance L on the left and constructor R on the right\nHandle the boundary. If the object to be detected is of a basic type, return false\nGet the prototype of the passed-in parameters separately\nDetermine whether the prototype on the left is null, if it is null, return false; if the prototype on both sides is equal, return true, otherwise continue to get the prototype of the prototype on the left.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // The parameters passed in are instance L on the left and constructor R on the right function my_instanceof(L, R) { // Handle boundary: check if the instance type is a primitive type const baseTypes = [\u0026#34;string\u0026#34;, \u0026#34;number\u0026#34;, \u0026#34;boolean\u0026#34;, \u0026#34;symbol\u0026#34;, \u0026#34;undefined\u0026#34;]; ​ if (baseTypes.includes(typeof L) || L === null) return false; ​ // Get the prototype of the passing parameters separately let Lp = L.__proto__; let Rp = R.prototype; // Only functions have the prototype property ​ // Judge the prototype while (true) { if (Lp === null) return false; if (Lp === Rp) return true; Lp = Lp.__proto__; } } // validate const isArray = mu_instanceof([],Array); console.log(isArray); //true const isDate = mu_instanceof(\u0026#39;2023-01-09\u0026#39;,Date); console.log(isDate); // false Throttling and Debounce in JavaScript Debounce Function debounce is to execute the callback after the event is triggered for n seconds. If it is ‘triggered within n seconds’, then ‘retime’.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function debounce(fn, wait) { let timeout; return function () { clearTimeout(timeout); timeout = setTimeout(() =\u0026gt; { fn.apply(this, arguments); }, wait); }; } // Test function handle() { console.log(Math.random()); } // When the window size changes, trigger the debounce function and execute the handle function window.addEventListener(\u0026#39;resize\u0026#39;, debounce(handle, 1000)); Throttle When an event is triggered, it ensures that the function is only called once within a certain time period. For example, when scrolling the page, send a request every once in a while.\nImplementation steps:\nPass in parameters for execute function fn and wait time wait.\nSave initial time now.\nReturn a function, if it exceeds the waiting time, execute the function and update now to the current time.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function throttle(fn, wait, ...args) { var pre = Date.now(); return function () { // The function may have parameters var context = this; var now = Date.now(); if (now - pre \u0026gt;= wait) { // Point the \u0026#39;this\u0026#39; of the execution function to the current scope fn.apply(context, args); pre = Date.now(); } }; } // Test var name = \u0026#39;mu\u0026#39;; function handle(val) { console.log(val + this.name); } // Scroll the mouse, trigger the throttle function and execute the handle function window.addEventListener(\u0026#39;scroll\u0026#39;, throttle(handle, 1000, \u0026#39;mu\u0026#39;)); ","date":"2024-02-08T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ge1I6ow4qwBbwv5A","permalink":"http://localhost:1313/p/part-2-100-front-end-questions-and-answers/","title":"Part 2: 100 Front-end Questions and Answers"},{"content":"In what aspects is the performance of Vue3.0 mainly improved? Reactive Systems The core of the reactive system in Vue.js 2.x relies on Object.defineProperty. The entire object is hijacked and then a deep traversal of all properties is carried out, with a getter and setter added to each attribute to achieve reactivity.\nIn Vue.js 3.x, the Proxy object is used to rewrite the reactive system.\nIt can monitor newly added dynamic properties.\nIt can monitor deleted properties.\nIt can monitor the index and length properties of the array.\nImplementation Principle:\nThrough the Proxy (Agent): Intercepts any changes in object properties, including changing property values, adding properties, and deleting properties.\nVia Reflect (Reflection): Operates on the properties of the source object.\nProxy and Reflect as Described in the MDN Documentation:\nProxy: Proxy — JavaScript | MDN\nReflect: Reflect — JavaScript | MDN\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 new Proxy(data, { // Intercept to read property values get (target, prop) { return Reflect.get(target, prop) }, // Intercept to set property values or add new properties set (target, prop, value) { return Reflect.set(target, prop, value) }, // Intercept to delete properties deleteProperty (target, prop) { return Reflect.deleteProperty(target, prop) } }) proxy.name = \u0026#39;tom\u0026#39; ![] Compilation Stage Vue.js 2.x optimizes the diff process by marking static nodes\nIn Vue.js 3.x\nVue.js 3.x marks and lifts all static root nodes, during diff only has to compare the content of dynamic nodes\nFragments (upgrade vetur plugin): No need for unique root node in the template, you can directly place text or peer tags\nStatic promotion (hoistStatic), when using hoistStatic, all static nodes are lifted outside the render method. Only need to be created once when the application starts, and then used, just need to apply the extracted static nodes, which will be reused with each rendering.\nPatch flag, add corresponding markings at the end of the dynamic tag, only the node with patchFlag is considered as a dynamic element, will track attribute modifications, can quickly find dynamic nodes, no need to traverse one by one, improved the performance of virtual dom diff.\nCache event handling function cacheHandler, avoid regenerating a new function every time it is triggered to update the previous function.\nSource Code Size Compared with Vue2, the overall size of Vue3 has been reduced, besides removing some infrequently used APIs.\nTree Shanking\nAny function, such as ref, reactive, computed, etc., is only packaged when it is used.\nThrough static analysis in the compilation stage, find the modules that have not been imported and mark them, and shake off these modules.\nWhat are the new components in Vue3? Fragment In Vue2: A component must have a root tag\nIn Vue3: A component can be without a root tag, multiple tags will be wrapped in a Fragment virtual element\nBenefits: Reduces tag level, reduces memory usage\nTeleport What is Teleport? — — Teleport is a technology that can move our component’s HTML structure to a specified location.\n1 2 3 4 5 6 7 8 \u0026lt;teleport to=\u0026#34;destination\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;isShow\u0026#34; class=\u0026#34;mask\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;dialog\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;I am a pop-up window\u0026lt;/h3\u0026gt; \u0026lt;button @click=\u0026#34;isShow = false\u0026#34;\u0026gt;Close Popup\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/teleport\u0026gt; Suspense Render some extra content while waiting for asynchronous components to provide a better user experience\nSteps to use:\nAsynchronously import components\n1 2 import {defineAsyncComponent} from \u0026#39;vue\u0026#39; const Child = defineAsyncComponent(()=\u0026gt;import(\u0026#39;./components/Child.vue\u0026#39;)) Wrap the component with Suspense and configure default and fallback\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;I am App component\u0026lt;/h3\u0026gt; \u0026lt;Suspense\u0026gt; \u0026lt;template v-slot:default\u0026gt; \u0026lt;Child/\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:fallback\u0026gt; \u0026lt;h3\u0026gt;Loading.....\u0026lt;/h3\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; What’s the difference between Vue2.0 and Vue3.0? The reconfiguration of the reactive system, replacing Object.defineProperty with proxy.\nTypeScript support.\nAddition of the Composition API for better logic reuse and code organization.\nThe priority of v-if and v-for.\nStatic element hoisting.\nStatic marking of virtual nodes.\nChanges in life cycle.\nPackage size optimization.\nImproved ssr rendering performance.\nSupports multiple root nodes.\nVue Life Cycle Life cycle of Vue2\nLife cycle of Vue3\nIn Vue 3.0, you can still use the life cycle hooks of Vue 2.x, but two of them have been renamed:\nbeforeDestroy has been renamed as beforeUnmount\ndestroyed has been renamed as unmounted\nVue 3.0 also provides life cycle hooks in the form of Composition API. The correspondence with hooks in Vue 2.x is as follows:\nbeforeCreate ===\u0026gt; setup()\ncreated =====\u0026gt; setup()\nbeforeMount ==\u0026gt; onBeforeMount\nmounted =====\u0026gt; onMounted\nbeforeUpdate ==\u0026gt; onBeforeUpdate\nupdated =====\u0026gt; onUpdated\nbeforeUnmount =\u0026gt; onBeforeUnmount\nunmounted ==\u0026gt; onUnmounted\nA Vue instance has a complete life cycle, which is a series of processes from starting to create, initializing data, compiling templates, mounting Dom to rendering, updating to rendering, and unmounting. This is called Vue’s life cycle.\nbeforeCreate (before creation): Data observation and initialization of events have not yet started, i.e., at this point, neither the reactive tracking of data nor the setting of events/watcher have been made. So, you cannot access the methods and data on data, computed, watch, and methods.\ncreated (after creation): After the instance is created, the options configured on the instance including data, computed, watch, methods are configured. But the rendered nodes haven\u0026rsquo;t been mounted on the DOM yet, so you cannot access the $el property.\nbeforeMount (before mounting): It\u0026rsquo;s called before the mounting starts, when the corresponding render function is called for the first time. At this stage, the instance has completed the following configurations: compiled the template, generated HTML by combining the data and the template. But the HTML has not been mounted on the page yet.\nmounted (after mounting): It\u0026rsquo;s called after the el is replaced by the newly created vm.$el, and the instance is mounted. At this stage, the instance has completed the following configurations: replaced the DOM object pointed by el attribute with the compiled HTML content. Completed rendering the HTML in the template to the HTML page. Ajax interactions would take place in this process.\nbeforeUpdate (before update): It\u0026rsquo;s called when the reactive data is updated. At this point, although the reactive data has been updated, the corresponding real DOM has not been rendered yet.\nupdated (after update): It\u0026rsquo;s called after the virtual DOM is re-rendered and patched due to data changes. At this time, the DOM has been updated according to the changes in the reactive data. You can perform operations dependent on the DOM when the hook is called because the component DOM has been updated. However, in most cases, you should avoid changing the state during this period, as this may result in an infinite update loop. This hook is not called during server-side rendering.\neforeDestroy (before destruction): This is called before the instance is destroyed. At this step, the instance is still fully available, this can still get the instance.\ndestroyed (after destruction): This is called after the instance is destroyed. After calling this hook, all things indicated by the Vue instance will be unbound, all event listeners will be removed, and all child instances will also be destroyed. This hook is not called during server-side rendering.\nWhat’s the difference between the Composition API and React Hook as they are said to be quite similar? From the perspective of React Hook’s implementation, React Hook is based on the call order of useState to determine the state of the next re-rendering. Therefore, there are a few restrictions:\nDo not use Hook in loops, conditionals, or nested function calls\nYou must ensure it’s always called at the top level of your React functions\nhe dependence of useEffect and useMemo must be manually determined\nOn the other hand, the Composition API is based on Vue’s reactive system. Comparing to React Hook:\nIn the setup function, a component instance only calls setup once. However, with React Hook, the Hook needs to be called every time it re-renders. This creates more GC pressure for React and relatively slower performance comparing to Vue.\nWith the Composition API, you do not have to worry about the order of calls. It can also be used in loops, conditionals, and nested functions.\nThe reactive system automatically implements dependency collection, and the performance optimization of the component is done internally by Vue. However, with React Hook, dependencies need to be manually passed and the order of dependencies must be ensured, otherwise, component performance will go down due to incorrect dependencies when using useEffect and useMemo, etc.\nEven though the Composition API is used in similar ways as the React Hook, its design concept is also a reference to the React Hook.\nWhat’s the difference between the Composition API and the Options API? Options API The Options API, often referred to as the options API, is found in files with the Vue extension. It deals with page logic by defining properties and methods such as methods, computed, watch, data, etc.\nFor instance, if with the Options code writing style, if it’s about component state, it’s written in the data property. If it’s a method, it’s written in the methods property…\nOrganizing logic with component options (data, computed, methods, watch) is effective in most cases.\nHowever, as components become more complex, resulting in a long list of corresponding properties, this can make the components hard to read and understand.\nComposition API In Vue3’s Composition API, components are organized based on logic functionality, with all APIs defined for a particular feature are grouped together (more high cohesion, low coupling).\nEven if the project is very large and has many features, we can quickly locate all the APIs used for a particular feature.\nComparison Below are two main comparisons between the Composition API and Options API:\nLogic Organization\nLogic Reuse\nLogic Organization Options API:\nSuppose a component is a large component with many logic concerns within it (corresponding to the different colors in the figure below).\nYou can see that this fragmentation makes it difficult to understand and maintain complex components.\nThe separation of options masks potential logic problems. In addition, when dealing with a single logic concern, we must continually “jump” to the relevant code’s option block.\nCompostion API:\nThe Composition API is used to address these issues by placing all the code related to a logic concern in one function. This way, when we need to modify a feature, we no longer need to jump around in the file.\nHere’s a simple example, putting all the code related to the count property in one function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function useCount() { let count = ref(10); let double = computed(() =\u0026gt; { return count.value * 2; }); ​ const handleConut = () =\u0026gt; { count.value = count.value * 2; }; ​ console.log(count); ​ return { count, double, handleConut, }; } Use count in the component\n1 2 3 4 5 6 7 8 9 10 export default defineComponent({ setup() { const { count, double, handleConut } = useCount(); return { count, double, handleConut } }, }); Here’s another figure for comparison. You can intuitively feel the advantage of Composition API in terms of logic organization. Later on, if you need to modify a property feature, just jump to the method controlling that property.\nLogic Reuse In Vue2, we used mixin to reuse the same logic.\nHere’s an example: we would create a separate mixin.js file\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 export const MoveMixin = { data() { return { x: 0, y: 0, }; }, ​ methods: { handleKeyup(e) { console.log(e.code); switch (e.code) { case \u0026#34;ArrowUp\u0026#34;: this.y--; break; case \u0026#34;ArrowDown\u0026#34;: this.y++; break; case \u0026#34;ArrowLeft\u0026#34;: this.x--; break; case \u0026#34;ArrowRight\u0026#34;: this.x++; break; } }, }, ​ mounted() { window.addEventListener(\u0026#34;keyup\u0026#34;, this.handleKeyup); }, ​ unmounted() { window.removeEventListener(\u0026#34;keyup\u0026#34;, this.handleKeyup); }, }; Then use it in the component\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; Mouse position: x {{ x }} / y {{ y }} \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import mousePositionMixin from \u0026#39;./mouse\u0026#39; export default { mixins: [mousePositionMixin] } \u0026lt;/script\u0026gt; The use of a single mixin doesn’t seem to be a problem, but when we mix a large amount of different mixins into one component\n1 mixins: [mousePositionMixin, fooMixin, barMixin, otherMixin] there are two very obvious issues:\nName conflicts\nUnclear data source\nNow let’s turn the code above into Composition API style.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import { onMounted, onUnmounted, reactive } from \u0026#34;vue\u0026#34;; export function useMove() { const position = reactive({ x: 0, y: 0, }); ​ const handleKeyup = (e) =\u0026gt; { console.log(e.code); // 上下左右 x y switch (e.code) { case \u0026#34;ArrowUp\u0026#34;: // y.value--; position.y--; break; case \u0026#34;ArrowDown\u0026#34;: // y.value++; position.y++; break; case \u0026#34;ArrowLeft\u0026#34;: // x.value--; position.x--; break; case \u0026#34;ArrowRight\u0026#34;: // x.value++; position.x++; break; } }; ​ onMounted(() =\u0026gt; { window.addEventListener(\u0026#34;keyup\u0026#34;, handleKeyup); }); ​ onUnmounted(() =\u0026gt; { window.removeEventListener(\u0026#34;keyup\u0026#34;, handleKeyup); }); ​ return { position }; } Use it in the component\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; Mouse position: x {{ x }} / y {{ y }} \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; ​ \u0026lt;script\u0026gt; import { useMove } from \u0026#34;./useMove\u0026#34;; import { toRefs } from \u0026#34;vue\u0026#34;; export default { setup() { const { position } = useMove(); const { x, y } = toRefs(position); return { x, y, }; ​ }, }; \u0026lt;/script\u0026gt; You can see that the whole data source is clear now. Even if you are going to write more hook functions, you won’t have name conflicts.\nConclusion In terms of logic organization and logic reuse, the Composition API is superior to the Options API.\nAs the Composition API is almost functional, it has better type inference.\nThe Composition API is tree-shaking friendly, and the code is more compressible.\nYou won’t see the use of ‘this’ in the Composition API, which reduces the ambiguity of this.\nIf it’s a small component, the continued use of Options API is also very friendly.\nWhat is a Single Page Application (SPA), and how do you optimize the loading of the first screen? A single page web application (SPA) is an application with only one web page. It is a web application that loads a single HTML page and dynamically updates that page as the user interacts with the application. Most of the Vue projects we develop are built quickly with official CLI scaffolding. We build an instance directly through new Vue and pass in el:#app as the mount parameter. After packaging with npm run build, we generate a single index.html, which is called a single page application.\nOf course, Vue can also be introduced like jq, as the basic framework for multi-page applications.\nSPA First Screen Optimization Methods:\nReduce entry file accumulation\nStatic resource local caching\nOn-demand loading of UI framework\nImage resource compression\nComponent repeated packaging\nActivate GZip compression\nUse SSR\nWhat performance optimizations have you done on a Vue project? v-if and v-show Use v-show for frequent switching, taking advantage of its caching feature.\nUse v-if for first screen rendering, it will not render if it\u0026rsquo;s false.\nv-for use key When the list changes, use a unique unchanging key in the loop to take advantage of its local reuse strategy.\nWhen the list is rendered only once, the key can use the loop\u0026rsquo;s index.\nListeners and computed properties The watch listener is used when data changes trigger other actions.\nMake more use of computed computed properties. As the name suggests, these are newly calculated properties that will not trigger recalculation if the dependent data has not changed.\nCorrect use of the lifecycle Destruction of events bound or the timer happens at the destroyed stage.\nWhen using dynamic components, you can cache them with keep-alive, and related operations can be activated in the activated stage.\nData response processing Data that does not need to be processed responsively can be handled with Object.freeze, or can be defined directly using this.xxx = xxx.\nProperties that need to be processed responsively can be handled using this.$set instead of JSON.parse(JSON.stringify(XXX)).\nRoute loading The page components can be loaded asynchronously. Plugin Import Third-party plugins can be loaded on-demand, such as element-ui. Reduce the volume of code Use mixin to extract common methods.\nExtract common components.\nDefine common methods in common js.\nExtract common css.\nCompilation If the template needs to be compiled online, the complete version of vue.esm.js can be used.\nIf the template does not need to be compiled online, the runtime version vue.runtime.esm.js can be adopted, which is about 30% smaller in volume than the complete version.\nRendering methods Server-side rendering; if the website requires SEO, you can use server-side rendering.\nFront-end rendering; some backend management systems used internally by companies can adopt front-end rendering.\nUse of font icons Some pictographic icons should use font icons as much as possible. Look at this article for more optimization content — What optimizations can be utilized for frontend performance?\nWhat are the ways of communication between Vue components? Ways of communication between Vue3 components:\nprops\n$emit\nexpose / ref\n$attrs\nv-model\nprovide / inject\nVuex\nmitt\nWays of communication between Vue2 components:\nprops\n$emit / v-on\n.sync\nv-model\nref\n$children / $parent\n$attrs / $listeners\nprovide / inject\nEventBus\nVuex\n$root\nslot\nWhat are the common modifiers in Vue? Form Modifiers (1) .lazy\nBy default, v-model synchronizes the value of the input box with the data after each input event. You can add the lazy modifier, so that it synchronizes after the change event:\n1 \u0026lt;input v-model.lazy=\u0026#34;msg\u0026#34;\u0026gt; (2) .number\nIf you want to automatically convert the user’s input into a numerical type, you can add the number modifier to v-model:\n1 \u0026lt;input v-model.number=\u0026#34;age\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt; (3) .trim\nTo automatically filter out the leading and trailing whitespace of the user’s input, you can add the trim modifier to v-model:\n1 \u0026lt;input v-model.trim=\u0026#34;msg\u0026#34;\u0026gt; Event Modifiers (1) .stop\nStops the click event propagation.\n1 2 \u0026lt;!-- Only the a is triggered here --\u0026gt; \u0026lt;div @click=\u0026#34;divClick\u0026#34;\u0026gt;\u0026lt;a v-on:click.stop=\u0026#34;aClick\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; (2) .prevent\nPrevents the tag\u0026rsquo;s default behavior.\n1 \u0026lt;a href=\u0026#34;http://www.baidu.com\u0026#34; v-on:click.prevent=\u0026#34;aClick\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt; (3) .capture\nThe event triggers first on the node with the .capture modifier, then triggers inside the enclosed nodes.\n1 2 \u0026lt;!-- The divClick event is first executed here, then the aClick event --\u0026gt; \u0026lt;div @click=\u0026#34;divClick\u0026#34;\u0026gt;\u0026lt;a v-on:click=\u0026#34;aClick\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; (4) .self\nTriggers handler only when the event.target is the current element itself. That is, the event is not triggered from inside elements.\n1 2 \u0026lt;!-- When clicking on the a tag, only the aClick event will be triggered. Only when clicking on phrase will the divClick event be triggered --\u0026gt; \u0026lt;div @click.self=\u0026#34;divClick\u0026#34;\u0026gt;phrase\u0026lt;a v-on:click=\u0026#34;aClick\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; (5) .once\nUnlike other modifiers that only work on native DOM events, the .once modifier can also be used on custom component events, meaning that the current event is triggered only once.\n1 \u0026lt;a v-on:click.once=\u0026#34;aClick\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt; (6) .passive\nThe .passive modifier can especially improve performance on mobile devices.\n1 2 3 4 \u0026lt;!-- The default behavior of the scroll event (i.e., scroll behavior) will be triggered immediately --\u0026gt; \u0026lt;!-- Instead of waiting for `onScroll` to complete --\u0026gt; \u0026lt;!-- This includes the case of `event.preventDefault()` --\u0026gt; \u0026lt;div v-on:scroll.passive=\u0026#34;onScroll\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt; What is the function of $nextTick in Vue? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const callbacks = [] let pending = false ​ /** * It does two things: * Wraps the flushSchedulerQueue function with try-catch and put it into the callbacks array. * If pending is false, it means there is no flushCallbacks function in the current browser task queue. * If pending is true, it means the flushCallbacks function has been inserted into the browser\u0026#39;s task queue. * When it executes the flushCallbacks function, pending will be set back to false, indicating that the next flushCallbacks function can be inserted into the queue. * The role of pending: only one flushCallbacks function is present in the browser\u0026#39;s task queue at the same time. *@param {*} cb Accepts a callback function =\u0026gt; flushSchedulerQueue *@param {*} ctx context * @returns */ export function nextTick (cb?: Function, ctx?: Object) { let _resolve // Store the wrapped function in callbacks array callbacks.push(() =\u0026gt; { if (cb) { // Wrap the callback function with try-catch for error capturing try { cb.call(ctx) } catch (e) { handleError(e, ctx, \u0026#39;nextTick\u0026#39;) } } else if (_resolve) { _resolve(ctx) } }) if (!pending) { pending = true // Execute timerFunc, putting the flushCallbacks function on the browser\u0026#39;s task queue timerFunc() } // $flow-disable-line if (!cb \u0026amp;\u0026amp; typeof Promise !== \u0026#39;undefined\u0026#39;) { return new Promise(resolve =\u0026gt; { _resolve = resolve }) } } Official definition of its function:\nExecute the deferred callback after the next DOM update cycle. Use this method immediately after changing data to get the updated DOM. ​ What does that mean? ​ We can understand it as follows: Vue updates the DOM asynchronously. When data changes, Vue will start an asynchronous update queue. The view needs to wait for all data changes in the queue to complete before updating it collectively. ​ The core of Vue’s asynchronous update mechanism is that it leverages the browser’s asynchronous task queue. The micro task queue is preferred and the macro task queue is secondary. ​ When reactive data is updated, it calls the dep.notify method, notifying the watcher collected in dep to execute the update method. watcher.update will put watcher itself into a watcher queue (global queue array). ​ Then the nextTick method will put a flushSchedulerQueue method (a method that refreshes the watcher queue) into a global callbacks array. ​ If there is no flushCallbacks function in the browser’s asynchronous task queue, it will execute the timerFunc function and put the flushCallbacks function into the asynchronous task queue. If there is a flushCallbacks function in the async task queue, wait for it to finish and then put the next flushCallbacks function in. ​ The flushCallbacks function is responsible for executing all flushSchedulerQueue functions in the callbacks array. ​ The flushSchedulerQueue function is responsible for updating the watcher queue, i.e. executing the run method for each watcher in the queue array, thus entering the update phase, such as executing component update functions or user’s watch callback functions.\nHow to understand two-way data binding As we all know, Vue is a framework for two-way data binding, which consists of three important parts:\nData layer (Model): The data and business logic of the application\nView layer (View): The display effect of the application, various UI components.\nBusiness logic layer (ViewModel): The core part encapsulated by the framework, which is responsible for associating data with the view.\nThis layered architecture can be professionally referred to as: MVVM. The core functionality of the control layer here is “two-way data binding”.\nNaturally, we just need to understand what it is, and then we can further understand the principle of data binding.\nUnderstanding ViewModel\nIts main responsibilities are:\nUpdate the view after data changes\nUpdate data after view changes\nOf course, it also consists of two main parts:\nObserver: Listens to all data properties\nCompiler: Scans and parses the instructions of each element node, replaces data according to the instruction template, and binds the corresponding update function.\nWhat is the difference between v-show and v-if? Can you explain it? The effect of v-show and v-if is the same (not including v-else), both can control whether the element is displayed on the page, and they are used the same way.\nDifferences:\nDifferent control methods\nDifferent compilation processes\nDifferent compilation conditions\nControl method: If v-show hides, css — display:none is added to the element, and the dom element is still there. If v-if shows or hides, the dom element is entirely added or deleted.\nCompilation process: v-if switch has a process of local compilation/unloading. During the switch, event listeners and subcomponents inside the conditional block are properly destroyed and recreated; v-show just simply switches based on css.\nCompilation condition: v-if is true conditional rendering. It will ensure that event listeners and subcomponents in the conditional block are appropriately destroyed and recreated during the switch. When the rendering condition is false, no operation is performed until it is true to render.\nWhen v-show changes from false to true, it will not trigger the lifecycle of the component.\nWhen v-if changes from false to true, it triggers the beforeCreate, create, beforeMount, mounted hooks of the component. When it changes from true to false, it triggers the beforeDestory, destoryed methods of the component.\nPerformance consumption: v-if has higher switching costs; v-show has higher initial rendering costs.\nHave you ever used keep-alive? What is it for? Vue supports components and also has a built-in component keep-alive for caching that can be used directly. The usage scenarios are for route components and dynamic components.\nactivated represents the lifecycle of entering the component, deactivated represents the lifecycle of leaving the component\ninclude represents that only matched components will be cached, exclude represents that matched components will not be cached\nmax represents how many components can be cached at most\nBasic usage of keep-alive:\n1 2 3 \u0026lt;keep-alive\u0026gt; \u0026lt;component :is=\u0026#34;view\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/keep-alive\u0026gt; Using includes and exclude:\n1 2 3 \u0026lt;keep-alive include=\u0026#34;a,b\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;view\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/keep-alive\u0026gt; Using RegExp(v-bing)\n1 2 3 \u0026lt;keep-alive :include=\u0026#34;/a|b/\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;view\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/keep-alive\u0026gt; Using Array(v-bing)\n1 2 3 \u0026lt;keep-alive :include=\u0026#34;[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;]\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;view\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/keep-alive\u0026gt; The match first checks the component’s own name option. If the name option is not available, the match checks its local registration name (the key value of the parent component’s components option). Anonymous components cannot be matched.\nTwo more lifecycle hooks (activated and deactivated) will be created for the components with keep-alive cache settings:\nWhen first entering the component: beforeRouteEnter \u0026gt; beforeCreate \u0026gt; created \u0026gt; mounted \u0026gt; activated \u0026gt; … … \u0026gt; beforeRouteLeave \u0026gt; deactivated\nWhen entering the component again: beforeRouteEnter \u0026gt;activated \u0026gt; … … \u0026gt; beforeRouteLeave \u0026gt; deactivated\nCan you implement a Virtual DOM? First, let’s see how the browser understands HTML: 1 2 3 4 5 \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;My title\u0026lt;/h1\u0026gt; Some text content \u0026lt;!-- TODO: Add tagline --\u0026gt; \u0026lt;/div\u0026gt; When the browser reads these codes, it constructs a DOM tree to keep track of everything, as you would draw a family tree to track the development of family members. The above HTML corresponds to the DOM node tree as shown in the following figure:\nEach element is a node. Every piece of text is also a node. Even comments are nodes. A node is a part of a page. Just like a family tree, each node can have child nodes (that is, each part can contain some other parts).\nNext, see how Vue understands HTML template Vue constructs a Virtual DOM to keep track of how it will change the real DOM. Because the information it contains will tell Vue what kind of nodes need to be rendered on the page, including the description information of its child nodes. We describe such nodes as “Virtual Node(VNode)”. “Virtual DOM” is our name for the entire VNode tree built up by the Vue component tree.\nIn other words, the browser’s understanding of HTML is the DOM tree, Vue’s understanding of HTML is the virtual DOM, and finally in the patch stage, it is rendered into real DOM nodes through DOM operation APIs. How to implement Virtual DOM First, let\u0026rsquo;s look at the structure of VNode in vue\nSource code location: src/core/vdom/vnode.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 export default class VNode { tag: string | void; data: VNodeData | void; children: ?Array\u0026lt;VNode\u0026gt;; text: string | void; elm: Node | void; ns: string | void; context: Component | void; // rendered in this component\u0026#39;s scope functionalContext: Component | void; // only for functional component root nodes key: string | number | void; componentOptions: VNodeComponentOptions | void; componentInstance: Component | void; // component instance parent: VNode | void; // component placeholder node raw: boolean; // contains raw HTML? (server only) isStatic: boolean; // hoisted static node isRootInsert: boolean; // necessary for enter transition check isComment: boolean; // empty comment placeholder? isCloned: boolean; // is a cloned node? isOnce: boolean; // is a v-once node? ​ constructor ( tag?: string, data?: VNodeData, children?: ?Array\u0026lt;VNode\u0026gt;, text?: string, elm?: Node, context?: Component, componentOptions?: VNodeComponentOptions ) { /* The tag name of the current node */ this.tag = tag /* The corresponding object of the current node, which contains some specific data information, is a VNodeData type, you can refer to the data information in VNodeData type */ this.data = data /* The child nodes of the current node, which is an array */ this.children = children /* The text of the current node */ this.text = text /* The real DOM node corresponding to the current virtual node */ this.elm = elm /* The namespace of the current node */ this.ns = undefined /* Compilation scope */ this.context = context /* Functional component scope */ this.functionalContext = undefined /* The key attribute of the node, used as the marker of the node for optimization */ this.key = data \u0026amp;\u0026amp; data.key /* The options of the component */ this.componentOptions = componentOptions /* The instance of the component corresponding to the current node */ this.componentInstance = undefined /* The parent node of the current node */ this.parent = undefined /* In short, whether it is raw HTML or just plain text. When it\u0026#39;s innerHTML, it\u0026#39;s true. When it\u0026#39;s textContent, it\u0026#39;s false. */ this.raw = false /* Static node flag */ this.isStatic = false /* Whether to insert as root node */ this.isRootInsert = true /* Whether it\u0026#39;s a comment node */ this.isComment = false /* Whether it\u0026#39;s a cloned node */ this.isCloned = false /* Whether there\u0026#39;s a v-once directive */ this.isOnce = false } ​ // DEPRECATED: alias for componentInstance for backwards compat. /* istanbul ignore next https://github.com/answershuto/learnVue*/ get child (): Component | void { return this.componentInstance } } Here, a brief explanation of VNode:\nThe context option of all objects points to the Vue instance\nThe elm property points to the corresponding real DOM node\nvue generates VNode via createElement\nSource code location: src/core/vdom/create-element.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 export function createElement ( context: Component, tag: any, data: any, children: any, normalizationType: any, alwaysNormalize: boolean ): VNode | Array\u0026lt;VNode\u0026gt; { if (Array.isArray(data) || isPrimitive(data)) { normalizationType = children children = data data = undefined } if (isTrue(alwaysNormalize)) { normalizationType = ALWAYS_NORMALIZE } return _createElement(context, tag, data, children, normalizationType) } As you can see above, the createElement method is actually a wrapper for the _createElement method, and it judges the parameters that are passed in\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 export function _createElement( context: Component, tag?: string | Class\u0026lt;Component\u0026gt; | Function | Object, data?: VNodeData, children?: any, normalizationType?: number ): VNode | Array\u0026lt;VNode\u0026gt; { if (isDef(data) \u0026amp;\u0026amp; isDef((data: any).__ob__)) { process.env.NODE_ENV !== \u0026#39;production\u0026#39; \u0026amp;\u0026amp; warn( `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` + \u0026#39;Always create fresh vnode data objects in each render!\u0026#39;, context` ) return createEmptyVNode() } // object syntax in v-bind if (isDef(data) \u0026amp;\u0026amp; isDef(data.is)) { tag = data.is } if (!tag) { // in case of component :is set to falsy value return createEmptyVNode() } ... // support single function children as default scoped slot if (Array.isArray(children) \u0026amp;\u0026amp; typeof children[0] === \u0026#39;function\u0026#39; ) { data = data || {} data.scopedSlots = { default: children[0] } children.length = 0 } if (normalizationType === ALWAYS_NORMALIZE) { children = normalizeChildren(children) } else if ( === SIMPLE_NORMALIZE) { children = simpleNormalizeChildren(children) } // create VNode ... } We can see that _createElement receives 5 parameters:\ncontext represents the context environment of VNode, which is of the Component type\ntag represents the tag, it could be a string, or it could be a Component\ndata represents the data of VNode, it’s a VNodeData type\nchildren represents the current child nodes of VNode, it can be of any type\nnormalizationType represents the type of child node normalization, different types have different normalization methods, it mainly refers to whether the render function is generated by compilation or written by the user\nAccording to the type of normalizationType, children will have different definitions\n1 2 3 4 5 if (normalizationType === ALWAYS_NORMALIZE) { children = normalizeChildren(children) } else if ( === SIMPLE_NORMALIZE) { children = simpleNormalizeChildren(children) } The simpleNormalizeChildren method is called when the render function is generated by compilation\nThe normalizeChildren method is called in the following two scenarios:\nThe render function is written by the user\nCompilation of slot, v-for will generate a nested array\nWhether it’s simpleNormalizeChildren or normalizeChildren, both are for normalizing children (turning children into an array of VNodes), but I won’t go into the details here.\nThe source code location for normalizing children is: src/core/vdom/helpers/normalize-children.js\nAfter normalizing children, VNode is being created.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 let vnode, ns // Judging the tag if (typeof tag === \u0026#39;string\u0026#39;) { let Ctor ns = (context.$vnode \u0026amp;\u0026amp; context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) { // If it\u0026#39;s a built-in node, then directly create a plain VNode vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) } else if (isDef(Ctor = resolveAsset(context.$options, \u0026#39;components\u0026#39;, tag))) { // component // If it\u0026#39;s of component type, then VNode node will be created by createComponent vnode = createComponent(Ctor, data, context, children, tag) } else { vnode = new VNode( tag, data, children, undefined, undefined, context ) } } else { // direct component options / constructor vnode = createComponent(tag, data, context, children) } createComponent is also used to create VNode.\nSource code location: src/core/vdom/create-component.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 export function createComponent ( Ctor: Class\u0026lt;Component\u0026gt; | Function | Object | void, data: ?VNodeData, context: Component, children: ?Array\u0026lt;VNode\u0026gt;, tag?: string ): VNode | Array\u0026lt;VNode\u0026gt; | void { if (isUndef(Ctor)) { return } // Build subclass constructor const baseCtor = context.$options._base ​ // plain options object: turn it into a constructor if (isObject(Ctor)) { Ctor = baseCtor.extend(Ctor) } ​ // if at this stage it\u0026#39;s not a constructor or an async component factory, // reject. if (typeof Ctor !== \u0026#39;function\u0026#39;) { if (process.env.NODE_ENV !== \u0026#39;production\u0026#39;) { warn(`Invalid Component definition: ${String(Ctor)}`, context) } return } ​ // async component let asyncFactory if (isUndef(Ctor.cid)) { asyncFactory = Ctor Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context) if (Ctor === undefined) { return createAsyncPlaceholder( asyncFactory, data, context, children, tag ) } } ​ data = data || {} ​ // resolve constructor options in case global mixins are applied after // component constructor creation resolveConstructorOptions(Ctor) ​ // transform component v-model data into props \u0026amp; events if (isDef(data.model)) { transformModel(Ctor.options, data) } ​ // extract props const propsData = extractPropsFromVNodeData(data, Ctor, tag) ​ // functional component if (isTrue(Ctor.options.functional)) { return createFunctionalComponent(Ctor, propsData, data, context, children) } ​ // extract listeners, since these needs to be treated as // child component listeners instead of DOM listeners const listeners = data.on // replace with listeners with .native modifier // so it gets processed during parent component patch. data.on = data.nativeOn ​ if (isTrue(Ctor.options.abstract)) { const slot = data.slot data = {} if (slot) { data.slot = slot } } ​ // Install component hook function, merge the hook function into data.hook installComponentHooks(data) ​ //Instantiate a VNode and return. The VNode of a component doesn\u0026#39;t have children. const name = Ctor.options.name || tag const vnode = new VNode( `vue-component-${Ctor.cid}${name ? `-${name}` : \u0026#39;\u0026#39;}`, data, undefined, undefined, undefined, context, { Ctor, propsData, listeners, tag, children }, asyncFactory ) if (__WEEX__ \u0026amp;\u0026amp; isRecyclableComponent(vnode)) { return renderRecyclableComponentTemplate(vnode) } ​ return vnode } Let me mention the three key steps in creating VNode through createComponent:\nConstruct subclass constructor Ctor\ninstallComponentHooks installs the component hook function\nInstantiate vnode\nSummary The process of createElement creating VNode, each VNode has children, and each element of children is also a VNode. This forms a virtual tree structure, which is used to describe the real DOM tree structure.\n","date":"2024-02-07T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ge1I6ow4qwBbwv5A","permalink":"http://localhost:1313/p/part-1-100-front-end-questions-and-answers/","title":"Part 1: 100 Front-end Questions and Answers"},{"content":"In front end development, front end engineering is always accompanied by the whole development process. In our commonly used project packaging tools, whether it’s webpack or rollup, they all have a very powerful capability — tree-shaking. So, what is the principle of tree-shaking? The core principle is actually AST.\nIn fact, there are many applications of AST in front end development, such as webpack, a packing tool we frequently use in front-end projects, Eslint, a code inspection tool, and Babel, a code conversion tool all rely on the syntax analysis and conversion capabilities of AST.\nAST Simple Introduction AST is the abbreviation of Abstract Syntax Tree, which can be used to describe the syntax structure of our code.\nHere’s an example:\n1 2 3 // ast.js let a = 1; function add() {} I created a file ast.js here, which can be understood as a File node to store the program body, and inside it are our JavaScript syntax nodes. The root node of our JavaScript syntax nodes is Program, and we have defined two nodes in it. The first node is let a = 1, which is parsed as AST is VariableDeclaration, that is a variable declaration node. The second node is function add() {}, which is parsed as AST is FunctionDeclaration, that is, a function declaration node.\nHere I recommend a platform: AST Explorer, where you can clearly see the result of JavaScript code translated into AST. If you look at the picture below, you’ll understand it at a glance:\nRole of AST What can we do with the ast information of the code?\nCode analysis and conversion. AST can parse our code into an ast tree, naturally we can process and convert this tree, the most classic application of which has to be babel, which converts our high-level syntax ES6 into ES5, and then transforms the ast tree into code output. In addition, the processing of ES6’s import and export by webpack also depends on the capabilities of ast, as well as the syntax conversion of our jsx, etc.\nSyntax checking and error hinting. After parsing the syntax into an ast tree, we can naturally check its syntax for correctness according to certain syntactic rules, and if there is an error, we can throw it out and remind the developer to correct it. For example, vscode that we use is using AST to provide real-time syntax checking and error hinting. In front-end projects, the most widely used syntax checking tool is ESLint, which is basically essential for front-end projects.\nStatic type checking. This is a bit like the second point, but the second point is focused on syntax checking, while this is for type checking, for example, our Typescript will use ast for type checking and inference.\nCode refactoring. Based on the AST tree, we can automatically refactor the code, such as extracting functions, renaming variables, upgrading syntax, moving functions, etc.\nIn fact, in practical development, we can use it to do a lot of things, such as automatic burying, automatic internationalization, dependency analysis and governance, etc. Interested partners can explore on their own.\nAnd today I am mainly introducing a major application of AST, which is the powerful Tree-Shaking capability of our webpack.\nTree-shaking The translation of Tree-shaking is shaking the tree. This tree can be metaphorically a tree in reality, and can be understood as such, shaking the tree is to shake off the leaves that are yellowing, serving no function and still absorbing nutrients. To move this into the JavaScript program is to remove the unused code (dead-code) in the JavaScript context.\nWithout further ado, let’s look at the example:\n1 2 3 4 5 6 7 8 9 // test.js function add(a, b) { return a + b; } function multiple(a, b) { return a * b; } let firstNum = 3, secondNum = 4; add(firstNum, secondNum); In this code, we define two functions, add and multiple, two variables firstNum and secondNum, and then call the add method and pass firstNum and secondNum as parameters.\nClearly, the multiple method is not called, and can actually be deleted during packaging to reduce the size of our packaged code.\nSo, how to delete multiple? It’s time for our ast to come on stage! To achieve this function, there are three steps.\nStep 1: Parse source code to generate AST Look at this example:\n1 2 3 4 5 6 7 const acorn = require(\u0026#39;acorn\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); const buffer = fs.readFileSync(path.resolve(process.cwd(), \u0026#39;test.js\u0026#39;)).toString(); const body = acorn.parse(buffer, { ecmaVersion: \u0026#39;latest\u0026#39;, }).body; We choose acorn to parse our code (babel is actually based on acorn for implementing parsers). Before executing, we need to install acorn by running npm install acorn, then read the file content and pass it into acorn to get AST.\nWe can use AST Explorer to view our current AST.\nStep 2: Traverse AST, record relevant information What information do we need to record?\nOur main goal is to collect unused code and then delete it. Thus the two pieces of information we would primarily think to collect are:\nCollect all function nodes or variable type nodes\nCollect all used function nodes or variable type nodes\nLet’s try:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const acorn = require(\u0026#39;acorn\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); const buffer = fs.readFileSync(path.resolve(process.cwd(), \u0026#39;./src/index.js\u0026#39;)).toString(); const body = acorn.parse(buffer, { ecmaVersion: \u0026#39;latest\u0026#39;, }).body; // Reference a Generator class to generate corresponding code for AST const Generator = require(\u0026#39;./generator\u0026#39;); // Create a Generator instance const gen = new Generator(); // Define a variable \u0026#34;decls\u0026#34; to store all function or variable type nodes (Map type) const decls = new Map(); // Define a variable \u0026#34;calledDecls\u0026#34; to store used function or variable type nodes (Array type) const calledDecls = []; I’ve introduced a Generator here whose function is to transform each AST node into the corresponding code. Let’s look at the implementation of Generator:\nFirst, define the Generator class and export it. 1 2 3 4 5 // generator.js class Generator { } module.exports = Generator; Then, define the run method and the visitNode and visitNodes methods. run: calls the visitNodes method to generate code.\nvisitNode: based on the node type, calls the corresponding method for the corresponding processing.\nvisitNodes: handles array type nodes. Internally, it loops and calls the visitNode method.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // generator.js class Generator { run(body) { let str = \u0026#39;\u0026#39;; str += this.visitNodes(body); return str; } visitNodes(nodes) { let str = \u0026#39;\u0026#39;; for (const node of nodes) { str += this.visitNode(node); } return str; } visitNode(node) { let str = \u0026#39;\u0026#39;; switch (node.type) { case \u0026#39;VariableDeclaration\u0026#39;: str += this.visitVariableDeclaration(node); break; case \u0026#39;VariableDeclarator\u0026#39;: str += this.visitVariableDeclarator(node); break; case \u0026#39;Literal\u0026#39;: str += this.visitLiteral(node); break; case \u0026#39;Identifier\u0026#39;: str += this.visitIdentifier(node); break; case \u0026#39;BinaryExpression\u0026#39;: str += this.visitBinaryExpression(node); break; case \u0026#39;FunctionDeclaration\u0026#39;: str += this.visitFunctionDeclaration(node); break; case \u0026#39;BlockStatement\u0026#39;: str += this.visitBlockStatement(node); break; case \u0026#39;CallExpression\u0026#39;: str += this.visitCallExpression(node); break; case \u0026#39;ReturnStatement\u0026#39;: str += this.visitReturnStatement(node); break; case \u0026#39;ExpressionStatement\u0026#39;: str += this.visitExpressionStatement(node); break; } return str; } } Next, we’ll discuss how each method that processes a node type is implemented:\nImplement the visitVariableDeclaration method\n1 2 3 4 5 6 7 8 9 10 class Generator { ... visitVariableDeclaration(node) { let str = \u0026#39;\u0026#39;; str += node.kind + \u0026#39; \u0026#39;; str += this.visitNodes(node.declarations); return str + \u0026#39;\\n\u0026#39;; } ... } visitVariableDeclaration processes nodes such as let firstNum = 3 in variable declarations. node.kind represents let/const/var. Then, multiple variables can be declared at once, such as let firstNum = 3, secondNum = 4; in our test.js, which gives us two nodes in node.declarations.\nImplement the visitVariableDeclarator method\n1 2 3 4 5 6 7 8 9 10 11 class Generator { ... visitVariableDeclarator(node, kind) { let str = kind ? (kind + \u0026#39; \u0026#39;) : \u0026#39;\u0026#39;; str += this.visitNode(node.id); str += \u0026#39;=\u0026#39;; str += this.visitNode(node.init); return str + \u0026#39;;\u0026#39; + \u0026#39;\\n\u0026#39;; } ... } visitVariableDeclarator is a child node of the above VariableDeclaration, which can receive the kind of the parent node. For example, let firstNum = 3, here id is the variable name firstNum, and init is the initial value 3.\nImplement the visitLiteral method\n1 2 3 4 5 class Generator { visitLiteral(node) { return node.raw; } } In Literal we have literals, like the 3 in let firstNum = 3, which is a string literal. In addition to this, there are numeric literals, boolean literals, etc., we just need to return its raw attribute.\nImplement the visitIdentifier method\n1 2 3 4 5 class Generator { visitIdentifier(node) { return node.name; } } Identifier refers to identifiers, such as variable names, attribute names, parameter names, etc. For example, for let firstNum = 3, the firstNum. We just need to return its name attribute directly.\nImplement the visitBinaryExpression method\nBinaryExpression refers to binary expressions, like addition, subtraction, multiplication, and division operations in our case. For instance, the AST for \u0026ldquo;a + b\u0026rdquo; is like this:\nWe need to join its left and right nodes and the middle identifier.\n1 2 3 4 5 6 7 8 9 class Generator { visitBinaryExpression(node) { let str = \u0026#39;\u0026#39;; str += this.visitNode(node.left); str += node.operator; str += this.visitNode(node.right); return str + \u0026#39;\\n\u0026#39;; } } Implement the visitFunctionDeclaration method\nFunctionDeclaration refers to function declaration nodes. It\u0026rsquo;s a bit more complex as we need to join a function together.\n1 2 3 function add(a, b) { return a + b; } For example, the AST for our add function is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Generator { visitFunctionDeclaration(node) { let str = \u0026#39;function \u0026#39;; str += this.visitNode(node.id); str += \u0026#39;(\u0026#39;; for (let paramIndex = 0; paramIndex \u0026lt; node.params.length; paramIndex++) { str += this.visitNode(node.params[paramIndex]); str += ((node.params[paramIndex] === undefined) ? \u0026#39;\u0026#39; : \u0026#39;,\u0026#39;) } str = str.slice(0, str.length - 1); str += \u0026#39;){\\n\u0026#39;; str += this.visitNode(node.body); str += \u0026#39;}\u0026#39;; return str + \u0026#39;\\n\u0026#39;; } } First get node.id, which is add. Then, process the arguments (params) of the function. Because there may be multiple params, we need to loop through and join them with commas. Finally, call the visitNode method to join the node.body function body.\nImplement the visitBlockStatement method\nBlockStatement refers to block statements, which is the part enclosed by braces. For example, the AST for the block statement in our add function is:\n1 2 3 4 5 6 7 class Generator { visitBlockStatement(node) { let str = \u0026#39;\u0026#39;; str += this.visitNodes(node.body); return str; } } We just need to use the visitNodes function to join its node.body.\nImplement the visitCallExpression method\nCallExpression refers to function calls, for example, add(firstNum, secondNum). Its important attributes are:\ncallee: which is add\narguments: which are the parameters firstNum and secondNum passed when calling.\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Generator { visitCallExpression(node) { let str = \u0026#39;\u0026#39;; str += this.visitIdentifier(node.callee); str += \u0026#39;(\u0026#39;; for (const arg of node.arguments) { str += this.visitNode(arg) + \u0026#39;,\u0026#39;; } str = str.slice(0, -1); str += \u0026#39;);\u0026#39;; return str + \u0026#39;\\n\u0026#39;; } } We just need to join its callee and the arguments in parentheses ().\nImplement the visitReturnStatement method\nReturnStatement refers to return statements, like return a + b. Its AST is:\nIt’s also relatively simple to implement, just joining node.argument directly:\n1 2 3 4 5 6 7 class Generator { visitReturnStatement(node) { let str = \u0026#39;\u0026#39;; str = str + \u0026#39; return \u0026#39; + this.visitNode(node.argument); return str + \u0026#39;\\n\u0026#39;; } } Implement the visitExpressionStatement method\nExpressionStatement refers to expression statements, that have return values when executed, such as add(firstNum, secondNum);. This is wrapped around CallExpression with an ExpressionStatement, and returns the result of the function call after execution. The AST is as followed:\nSo the implementation is simple, we just need to process and return its expression.\n1 2 3 class Generator { return this.visitNode(node.expression); } This way, we have fully implemented the Generator. Now we can start traversing the AST.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // tree-shaking.js const acorn = require(\u0026#39;acorn\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); const buffer = fs.readFileSync(path.resolve(process.cwd(), \u0026#39;./src/index.js\u0026#39;)).toString(); const body = acorn.parse(buffer, { ecmaVersion: \u0026#39;latest\u0026#39;, }).body; // Reference a Generator class to generate corresponding code for AST const Generator = require(\u0026#39;./generator\u0026#39;); // Create a Generator instance const gen = new Generator(); // Define a variable \u0026#34;decls\u0026#34; to store all function or variable type nodes (Map type) const decls = new Map(); // Define a variable \u0026#34;calledDecls\u0026#34; to store used function or variable type nodes (Array type) const calledDecls = []; // Start traversing AST body.forEach(node =\u0026gt; { if (node.type === \u0026#39;FunctionDeclaration\u0026#39;) { const code = gen.run([node]); decls.set(gen.visitNode(node.id), code); return; } if (node.type === \u0026#39;VariableDeclaration\u0026#39;) { for (const decl of node.declarations) { decls.set(gen.visitNode(decl.id), gen.visitVariableDeclarator(decl, node.kind)); } return; } if (node.type === \u0026#39;ExpressionStatement\u0026#39;) { if (node.expression.type === \u0026#39;CallExpression\u0026#39;) { const callNode = node.expression; calledDecls.push(gen.visitIdentifier(callNode.callee)); for (const arg of callNode.arguments) { if (arg.type === \u0026#39;Identifier\u0026#39;) { calledDecls.push(arg.name); } } } } if (node.type === \u0026#39;Identifier\u0026#39;) { calledDecls.push(node.name); } }) console.log(\u0026#39;decls\u0026#39;, decls); console.log(\u0026#39;calledDecls\u0026#39;, decls);` Run it with node tree-shaking.js, the result is:\nIt’s obvious that we have four nodes, function or variable type nodes in decls, and only three have been called in calledDecls. Notably, the multiple function has not been called and can be tree-shaken. After getting this information, we can now start generating the code after tree-shaking.\nStep 3: Generate new code based on the information obtained in Step 2 1 2 3 ... code = calledDecls.map(c =\u0026gt; decls.get(c)).join(\u0026#39;\u0026#39;); console.log(code); We directly traverse calledDecls to generate new source code, and the print result is as follows:\nHmm! When comparing it with our original file, although multiple has been removed, our function call statement add(firstNum, secondNum); is missing. Let\u0026rsquo;s handle this situation simply.\nWe declare a code array:\n1 2 3 4 5 // ... const calledDecls = []; // Save code information const code = []; // ... We store the information that doesn\u0026rsquo;t belong to FunctionDeclaration and VariableDeclaration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // tree-shaking.js body.forEach(node =\u0026gt; { if (node.type === \u0026#39;FunctionDeclaration\u0026#39;) { const code = gen.run([node]); decls.set(gen.visitNode(node.id), code); return; } if (node.type === \u0026#39;VariableDeclaration\u0026#39;) { for (const decl of node.declarations) { decls.set(gen.visitNode(decl.id), gen.visitVariableDeclarator(decl, node.kind)); } return; } if (node.type === \u0026#39;ExpressionStatement\u0026#39;) { if (node.expression.type === \u0026#39;CallExpression\u0026#39;) { const callNode = node.expression; calledDecls.push(gen.visitIdentifier(callNode.callee)); for (const arg of callNode.arguments) { if (arg.type === \u0026#39;Identifier\u0026#39;) { calledDecls.push(arg.name); } } } } if (node.type === \u0026#39;Identifier\u0026#39;) { calledDecls.push(node.name); } // Save code information code.push(gen.run([node])); }) When printing the output, make sure to include the information from the code array:\n1 2 3 // tree-shaking.js code = calledDecls.map(c =\u0026gt; decls.get(c)).concat(code).join(\u0026#39;\u0026#39;); console.log(code); Then, we run it and print the result:\nNow, we have completed a simple version of tree-shaking. Of course, webpack\u0026rsquo;s tree-shaking capability is much stronger. We just wrote the simplest version, and real projects are much more complicated.\nProcesses file dependencies (import/export)\nHandles scopes\nRecursive tree-shaking. As it’s possible that removing some code will produce new unused code, it needs to be handled recursively.\nAnd much more…\n","date":"2024-02-06T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1064/format:webp/1*XEPhAkPmVOo57T4HHxIsUA.jpeg","permalink":"http://localhost:1313/p/what-is-the-principle-of-tree-shaking/","title":"What is the principle of tree-shaking?"},{"content":"In an interview, I was asked about frontend performance optimizations. After a series of answers, the interviewer further asked: What performance optimizations can be done on the frontend?\nFrontend optimizations can be approached in several directions:\nNetwork Optimization\nPage Rendering Optimization\nJS Optimization\nImage Optimization\nwebpack Packaging Optimization\nReact Optimization\nVue Optimization\nNetwork Optimization DNS Pre-fetching Use the rel attribute of the link tag to set dns-prefetch and get the IP address corresponding to the domain name in advance.\nUse Cache educe server pressure and quickly get data (see here for strong cache and negotiated cache).\nUse the CDN (Content Distribution Network) The physical distance between the user and the server also affects the response time.\nCompress Responses Reduce the size of the response package generated by HTTP requests to improve performance by decreasing transmission time.\nUse Multiple Domains Modern browsers such as Chrome will have the same domain name limit and concurrent download number. Using different domain names can maximize download threads, but try to keep within 2~4 domain names to avoid DNS query loss.\nAvoid Null Image src Empty string for src attribute still makes the browser issue an HTTP request to the server.\nIE sends a request to the directory where the page is located; Safari, Chrome, and Firefox send a request to the page itself; Opera does not perform any operation.\nPage Rendering Optimization Process of Webkit rendering engine Handles HTML and builds a DOM tree\nHandles CSS and builds a CSS rules tree (CSSOM)\nMerges the DOM Tree and CSSOM Tree to form a Render Tree.\nLayouts according to the Render Tree and calculates the position of each node\nCalls GPU drawing, composites layers, and displays on the screen\nAvoid CSS blocking CSS affects the construction of the Render Tree and may block page rendering. Therefore, you should try to load the CSS resource as early (put the CSS in the head tag) and as fast (use CDN to optimize the loading speed of static resources) as possible.\nReduce the complexity of CSS selectors Browsers read selectors from right to left.\nReduce nesting: Don’t exceed three levels, and be cautious about using descendant selectors, which have high costs.\nAvoid using universal selectors, match only the elements needed\nTake advantage of inheritance, avoid repetitive matches and definitions\nUse class selectors and id selectors correctly\nAvoid using CSS expressions CSS expressions are calculated frequently.\nAvoid JS blocking JS can modify CSSOM and DOM, so JS can block the parsing and rendering of pages, and it will wait for the loading of CSS resources. In other words, JS will take over control of the rendering engine. Therefore, we need to add defer or async to our JS resources to delay the execution of JS scripts.\nUse externally linked JS and CSS In real environments, using external files generally leads to faster pages because JavaScript and CSS have a chance to be cached by the browser. For inline situations, HTML documents usually aren’t configured to be cacheable, so for every HTML document request, JavaScript and CSS need to be downloaded. Therefore, if JavaScript and CSS are in external files, the browser can cache them, the size of HTML documents will be reduced without increasing the number of HTTP requests.\nUse font icons (Iconfont) instead of image icons Images increase the number of network requests, thereby slowing down page load time.\nIconfont can scale well and won’t add extra requests.\nFirst Screen Load Optimization Use a skeleton screen or animation to optimize user experience\nLoad resources on demand; delay loading of resources not needed on the homepage\nReduce Repaint and Reflow Add multiple nodes using documentFragment: This is not part of the actual DOM, and will not cause repaint and reflow\nUse translate instead of top because top will trigger reflow, but translate will not. So translate saves one layout time compared to top\nReplace display: none with visibility, because the former will only cause repaint, while the latter will trigger reflow (changing the layout); replace visibility with opacity, visibility will trigger repaint (paint), but opacity won’t.\nModify the DOM offline, for example: First set the DOM to display:none (causing one reflow), then you modify it 100 times, and then display it again\nDon’t put the property values of DOM nodes in a loop as variables of the loop.\nFor example in Javascript:\n1 2 3 4 for (let i = 0; i \u0026lt; 1000; i++) { // Getting offsetTop will cause a reflow because you need to get the correct value console.log(document.querySelector(\u0026#39;.test\u0026#39;).style.offsetTop) } Try to use table layout less, because every time a cell’s layout changes, the entire table will go through reflow and repaint.\nDon’t frequently manipulate DOM nodes. It’s better to write the styles that need to be manipulated into classes in advance, and then modify them when needed. A single reflow and repaint is much less costly than multiple reflows and repaints.\nChoose the speed of animation implementation. The faster the animation speed, the more reflows, you can also choose to use requestAnimationFrame.\nEvery time you access the offset attributes of the DOM, such as getting an element’s scrollTop, scrollLeft, scrollWidth, offsetTop, offsetLeft, offsetWidth, offsetHeight, etc., the browser will reflow to get the latest value in order to ensure the correctness of the value. Therefore, if you need to operate multiple times, take a cache after the extraction. And don’t access DOM offset attributes in a for loop. When used, it is best to define a variable and assign the needed value to it, cache the value, and reduce the number of reflows and repaints.\nConvert frequently running animations to layers. Layers can prevent this node’s reflow from affecting other elements. For example, for the video tag, the browser will automatically turn this node into a layer.\nPerformance Optimization in JS Use event delegation Implement debounce and throttle Try not to use JS animations. CSS3 animations and canvas animations perform better than JS animations.\nMultithreading Start a webWorker for complex calculations to avoid page freezing.\nCache Calculation Results Reduce the number of calculations, such as using computed in Vue.\nImage Optimization Using Sprites Optimize by reducing the number of HTTP requests.\nLazy Loading Images Load the image as it is about to enter the viewport (For how to judge whether the image enters the viewport, please refer to here)\nUse CSS3 Instead of Images There are many images that can be drawn with CSS effects (gradients, shadows, etc.). In this case, choosing CSS3 effects is better.\nImage Compression There are two ways to compress images. One is to compress them through an online website. The other is to use the webpack plugin image-webpack-loader, which is based on the Node library imagemin for image compression.\nUse Progressive JPEG Using progressive JPEG will improve the user experience.\nUse WebP Format Images WebP is a new image file format that provides both lossy and lossless compression. With the same image quality, the volume of WebP is smaller than PNG and JPG.\nWebpack Packaging Optimization Narrow Down the Range of Loader Matches Optimize loader configuration\nUse the three configuration items test, include, exclude to narrow down the processing range of the loader.\nIt’s recommended to use include.\n1 include: path.resolve(__dirname, \u0026#34;./src\u0026#34;), Resolve.Modules resolve.modules is used to configure which directories webpack goes to look for third-party modules, by default it’s node_modules.\nBy default, it looks for third-party modules in the node_modules directory under the current project directory. If it doesn’t find them, it will go to the ../node_modules directory above. If it doesn’t find them there, it will go to the ../../node_modules directory, and so on. This is similar to Node.js module search mechanism.\nIf we install all third-party modules in the root directory of the project, we can specify this path directly.\n1 2 3 4 5 module.exports={ resolve:{ modules: [path.resolve(__dirname, \u0026#34;./node_modules\u0026#34;)] } } Resolve.Extensions If the import statement does not have a file suffix, webpack will automatically add the suffix and then try to find out whether the file exists or not.\nKeep the list of suffixes as small as possible\nTry to put a suffix in the import statement as much as possible.\nIf you want to optimize to the extreme, it’s not recommended to use extensionx, because it will consume some performance, even though it can bring some convenience.\nExtract CSS With the help of mini-css-extract-plugin: this plugin extracts CSS to a separate file, creates a CSS file for each JS file containing CSS, and supports on-demand loading of CSS and SourceMaps.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const MiniCssExtractPlugin = require(\u0026#34;mini-css-extract-plugin\u0026#34;); { test: /\\.less$/, use: [ // \u0026#34;style-loader\u0026#34;, // No need for style-loader anymore, use MiniCssExtractPlugin.loader instead MiniCssExtractPlugin.loader, \u0026#34;css-loader\u0026#34;, // Compile css \u0026#34;postcss-loader\u0026#34;, \u0026#34;less-loader\u0026#34; // Compile less ] }, plugins: [ new MiniCssExtractPlugin({ filename: \u0026#34;css/[name]_[contenthash:6].css\u0026#34;, chunkFilename: \u0026#34;[id].css\u0026#34; }) ] Code Compression JS Code Compression With mode:production, terser-webpack-plugin is used.\n1 2 3 4 5 6 7 8 9 module.exports = { // ... optimization: { minimize: true, minimizer: [ new TerserPlugin({}), ] } } CSS Code Compression Using css-minimizer-webpack-plugin\n1 2 3 4 5 6 7 8 9 module.exports = { // ... optimization: { minimize: true, minimizer: [ new CssMinimizerPlugin({}) ] } } HTML File Code Compression 1 2 3 4 5 6 7 8 9 10 11 12 13 module.exports = { ... plugin:[ new HtmlwebpackPlugin({ ... minify:{ minifyCSS:false, // Whether to compress css collapseWhitespace:false, // Whether to collapse whitespace removeComments:true // Whether to remove comments } }) ] } When you set minify, it will actually use another plugin html-minifier-terser.\nFile Size Compression Compress the size of the file to reduce the bandwidth loss during HTTP transmission.\n1 2 3 4 5 6 7 npm install compression-webpack-plugin -D new ComepressionPlugin({ test:/.(css|js)$/, // files that need to be compressed threshold:500, // Set filesize for compression to start minRatio:0.7, // minimum compression ratio algorithm:\u0026#34;gzip\u0026#34;, // compression algorithm to be used }) Image Compression Normally, after packaging, the size of some image files is far larger than that of js or css files, so image compression is quite important.\nThe configuration method is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 module: { rules: [ { test: /.(png|jpg|gif)$/, use: [ { loader: \u0026#39;file-loader\u0026#39;, options: { name: \u0026#39;[name]_[hash].[ext]\u0026#39;, outputPath: \u0026#39;images/\u0026#39;, } }, { loader: \u0026#39;image-webpack-loader\u0026#39;, options: { // Configuration for compressing jpeg mozjpeg: { progressive: true, quality: 65 }, // Using imagemin**-optipng to compress png, with enabled: false to turn it off optipng: { enabled: false, }, // Using imagemin-pngquant to compress png pngquant: { quality: \u0026#39;65-90\u0026#39;, speed: 4 }, // Configuration for compressing gif gifsicle: { interlaced: false, }, // Enable webp, will compress jpg and png images into webp format webp: { quality: 75 } } } ] }, ] } Tree Shaking to Remove Dead Code Tree Shaking is a term in computing that means eliminating dead code, or code that is no longer being used. It relies on the static syntax analysis of ES Module (without executing any code, we can clearly understand the dependency relationship of the module)\nWebpack provides two different approaches to implementing Tree Shaking:\nusedExports: By marking whether certain functions are used and then optimizing them through Terser\nsideEffects: It skips the entire module/file and directly checks if the file has side effects\nDifferent configuration plans have different effects.\nusedExports\nThe configuration method is very simple, you just need to set usedExports to true.\n1 2 3 4 5 6 module.exports = { ... optimization:{ usedExports } } After using, the unused code in webpack packaging will have an “unused harmony export mul” comment added to notify Terser that this section of code can be deleted when optimizing.\nsideEffects\nsideEffects is used to inform the webpack compiler which modules have side effects. The configuration method is to set the sideEffects attribute in the package.json.\nIf sideEffects is set to false, it informs webpack that it can safely delete unused exports.\nIf some files need to be retained, it can be set in an array form.\n1 2 3 4 \u0026#34;sideEffecis\u0026#34;:[ \u0026#34;./src/util/format.js\u0026#34;, \u0026#34;*.css\u0026#34; // All CSS files ] The above are all about the tree shaking of javascript. CSS can also achieve tree shaking.\ncss tree shaking\nYou can install the PurgeCss plugin for CSS optimization.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 npm install purgecss-plugin-webpack -D const PurgeCssPlugin = require(\u0026#39;purgecss-webpack-plugin\u0026#39;) module.exports = { ... plugins:[ new PurgeCssPlugin({ path:glob.sync(`${path.resolve(\u0026#39;./src\u0026#39;)}/**/*`), {nodir:true}// all files in src satelist:function(){ return { standard:[\u0026#34;html\u0026#34;] } } }) ] } paths: Represents which directories need to be analyzed. It is used in conjunction with glob.\nBy default, Purgecss will remove the style of our HTML tags. If we want to keep it, we can add a safelist attribute.\nCode Splitting This is the process of dividing code into different bundles, which can then be loaded on demand or in parallel.\nBy default, all the JavaScript code (business code, third-party dependencies, currently unused modules) is loaded on the homepage, which may impact the page load speed.\nCode splitting can break the code into smaller bundles and control the load priority of resources to improve the performance of code loading.\nThis can be achieved by using the SplitChunksPlugin, which is already integrated in webpack by default, and only needs configuration.\n1 2 3 4 5 6 7 8 module.exports = { ... optimization:{ splitChunks:{ chunks:\u0026#34;all\u0026#34; } } } The main attributes of splitChunks are as follows:\nChunks: This handles synchronous or asynchronous code.\nminSize: The size of the split package. It must be at least minSize. If the package size does not exceed minSize, this package will not be split.\nmaxSize: Packages larger than maxSize will be split into packages that are not smaller than minSize.\nminChunks: The number of times it is quoted, the default is 1.\nMulti-threaded Packaging to Improve Packaging Speed.\nVue Add a key in v-for\nLazy load routes\nUse third-party plugins on demand\nMake reasonable use of computed and watch\nAvoid using v-if while using v-for\nDestroy events when destroy, such as events added by addEventListener, setTimeout, setInterval, etc.\nWhen rendering large lists, optimize by using virtual lists.\nUse Keep-Alive to cache components and avoid repeated rendering of components.\nUse Teleport to render the component’s DOM into a designated container, thus avoiding unnecessary DOM operations.\nUse Suspense to display a placeholder while the component is not yet loaded, thus avoiding repeated rendering of components.\nUse Fragments to avoid unnecessary DOM operations.\nUse Memoization to avoid unnecessary calculations.\nReact Add a key when looping with map\nLazy load routes\nUse third-party plugins on demand\nUse scu, memo or PureComponent to avoid unnecessary rendering\nMake reasonable use of useMemo, memo, useCallback\nThese three are all applied in caching results to avoid unnecessary calculations or rendering when the dependent value has not changed.\nuseCallback is used to “remember” a function. When its dependent item does not change, the reference of the function will not be reassigned with the refresh of the component. We can use useCallback to modify it when we think a function does not need to update its reference address with the update of the component.\nReact.memo is used to “remember” a component. When it receives props that have not changed, it will return the result of the last rendering, and will not re-execute the function to return a new rendering result.\nReact.useMemo is a kind of “memory” for value calculation. When the dependent item does not change, there is no need to calculate it again, just use the previous value. For the component, one of the benefits is that it can reduce some calculations and avoid some unnecessary rendering. When we encounter some data that needs to be calculated within the component, we can consider React.useMemo.\n","date":"2024-02-05T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vM6ivAKAsNWxg9akN3MLSA.jpeg","permalink":"http://localhost:1313/p/what-optimizations-can-be-utilized-for-frontend-performance/","title":"What optimizations can be utilized for frontend performance?"},{"content":"What are hooks? In Vue3, hooks are a kind of function writing style, which essentially encapsulates certain independent functional Javascript code from a file.\nThe main purpose of it is that Vue3 draws from a mechanism in React, which is used to share state logic and side effects in function-based components, thereby improving code reusability.\nNote: Hooks are somewhat similar to mixins in Vue2, but compared to mixins, hooks make it clearer where the reused code originates from, making it easier to understand.\nAdvantages of hooks Hooks encapsulate components as independent logic. Its internal attributes, functions, etc. have a reactive effect that’s associated to external components.\nThe function of custom hooks is similar to the mixin technology used in Vue2, which is convenient and easy to use.\nIt is highly cohesive and loosely coupled, and it is reusable when encapsulated with Vue3’s combination API.\nStandards that custom hooks must meet They should have reusable functionality, only then they need to be extracted as independent hooks files.\nThe function name or file name should start with ‘use’, such as: useXX.\nWhen importing, reactive variables or methods should be explicitly destructured and exposed.\nExamples are as follows:\n1 const { nameRef,Fn }= useXX() Difference between hooks and utils Similarities: Through encapsulation with hooks and utils functions, code sharing and reuse can be achieved between components, which improves the reusability and maintainability of code.\nDifferences: Different presentations: Hooks wrap things at the component level (hook functions, etc.) based on utils; utils are generally used to encapsulate logic functions, without component-related stuff.\nReactions to data: If ref, reactive, computed, these APIs in hooks are involved, the data is reactive; while utils are just plain extraction of common methods and thus are not reactive.\nDifferent scopes of application: Hooks encapsulation can extract component status and lifecycle methods, which can be shared and reused across multiple components; utils generally refer to auxiliary functions or tool methods used to implement common operations or provide specific functionality.\nSummary: Utils are general-purpose utility functions, while hooks are a kind of encapsulation of utils, used to share state logic and side effects in components.\nBy using hooks, you can simplify your code and make it more readable and maintainable.\nDifference between hooks and mixin Similarities: Hooks and Mixins are both common means to extract code logic, convenient for code reuse;\nDifferences:\nDifferent syntax and usage: Hooks are a way of functional programming introduced in the Composition API in Vue3, while Mixins are an object mixing mechanism in Vue2. Hooks are defined and used as functions, while Mixins are defined and applied by objects.\nDifferent combinations and flexibility: Hooks allow developers to combine code according to logic, encapsulate it as a custom Hook function, and improve the reuse rate of code. Meanwhile, the properties and methods of Mixins in components will be merged with the properties and methods of components, and may cause naming conflicts or unpredictable behaviors.\nDifferent reactive systems: Upgrading to Vue 3 comes with a new reactive system from Composition API that creates reactive data through reactive and ref and can more accurately control component updates and dependency tracking. Mixins use Vue 2’s reactive system, which keeps tracking and updating data more simple, but there may be some performance problems.\nDifferent Lifecycle Hooks: Instead of lifecycle hooks in Vue 2, you can use hook functions like onMounted, onUpdated, etc. in Vue 3’s Composition API to manage the lifecycle of components more flexibly.\nAdvantages and disadvantages of mixins Advantages: Code logic reuse in components;\nDisadvantages:\nSource of variables is unclear: The source of variables is not clear (implicitly passed in), which is not conducive to reading and makes the code hard to maintain.\nNaming conflicts: The lifecycles of multiple mixins will fuse and run together, but properties and methods with the same name cannot be fused and may cause conflicts.\nOveruse leads to maintenance problems: Many-to-many relationships can exist between mixins and components, and the complexity is higher (i.e., a component can reference multiple mixins, and a mixin can be referenced by multiple components).\nNote: The Composition API proposed by VUE3 is aimed at solving these problems. The disadvantages of mixins are one of the main motivations behind the Composition API, which is inspired by React Hooks.\nHooks code: Example of useCount.ts function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { ref, onMounted, computed } from \u0026#39;vue\u0026#39;; export default function useCount { const count = ref(0); const doubleCount = computed( () =\u0026gt; count.value * 2 ); const increase = (delta) =\u0026gt; { return count.value + delta; } return { count, doubleCount, increase }; } useCount invoked in component:\n1 2 3 4 5 \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import useCount from \u0026#34;@/hooks/useCount\u0026#34;; const { count,doubleCount,increase } = useCount; const newCount = increase(10); // output: 10 \u0026lt;/script\u0026gt; Mixins code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 export default const countMixin = { data() { return { count: 0 }; }, computed: { doubleCount() { return this.count * 2; } }, methods: { increase(delta){ return this.count + delta; } }; Mixins invoked in component:\n1 2 3 4 5 6 7 8 9 10 11 12 13 import countMixin from \u0026#39;@/mixin/countMixin\u0026#39;; export default { mixins: [countMixin], mounted() { console.log(this.doubleCount);// output: 0 const newCount = this.setIncrease(10); // output: 10 }, methods: { setIncrease(count){ this.increase(count) } } } These two examples display the difference in the code style and organization between using Hooks and Mixins. Hooks apply functional programming logic and states, while Mixins combine and share codes in an object-oriented way.\nVue3 custom Hooks apply at the function scope under components, while in Vue2 era, Mixins apply at a global scope under components. The global scope can sometimes be uncontrolled. Just like the var and let variable declaration keywords, const and let are corrections of var. Composition API indeed corrects the high coupling issue and the ubiquitous black box of ‘this’ in Vue2 era Option API. Vue3 custom Hooks are a step forward.\nHooks function encapsulation example Example 1: Data Exporting (useDownload) useDownload function encapsulation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import { ElNotification } from \u0026#34;element-plus\u0026#34;; /** @description Receive data stream to generate a blob, create a link, download file @param {any} data Exported file blob data (Required) @param {String} tempName Exported file name (Required) @param {Boolean} isNotify Whether export message is prompted (Default is true) @param {String} fileType Exported file format (Default is .xlsx) */ interface useDownloadParam { data: any; tempName: string; isNotify?: boolean; fileType?: string; } export const useDownload = async ({ data, tempName, isNotify = true, fileType = \u0026#34;.xlsx\u0026#34; }: useDownloadParam) =\u0026gt; { if (isNotify) { ElNotification({ title: \u0026#34;Kind reminder\u0026#34;, message: \u0026#34;Large data size might slow down the downloading process, please be patient!\u0026#34;, type: \u0026#34;info\u0026#34;, duration: 3000 }); } try { const blob = new Blob([data]); // Combat edge not supporting createObjectURL method if (\u0026#34;msSaveOrOpenBlob\u0026#34; in navigator) return window.navigator.msSaveOrOpenBlob(blob, tempName + fileType); const blobUrl = window.URL.createObjectURL(blob); const exportFile = document.createElement(\u0026#34;a\u0026#34;); exportFile.style.display = \u0026#34;none\u0026#34;; exportFile.download = ${tempName}${fileType}; exportFile.href = blobUrl; document.body.appendChild(exportFile); exportFile.click(); // Eliminate url\u0026#39;s impact on download document.body.removeChild(exportFile); window.URL.revokeObjectURL(blobUrl); } catch (error) { console.log(error); } }; useDownload used in component:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { useDownload } from \u0026#34;@/hooks/useDownload\u0026#34;; const userForm = reactive({}) const userListExport = () =\u0026gt; { new Promise(resolve =\u0026gt; { $Request({ url: $Urls.userListExport, method: \u0026#34;post\u0026#34;, data: userForm, responseType: \u0026#34;blob\u0026#34; }).then((res: any) =\u0026gt; { useDownload({ data: res.data, tempName：\u0026#34;User List\u0026#34; }); resolve(res); }); }); }; \u0026lt;/script\u0026gt; Example 2: Addition and Subtraction Count (useCount) useCount function encapsulation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import { computed, ref, Ref } from \u0026#34;vue\u0026#34; // Define hook methods type CountResultProps = { count:Ref\u0026lt;number\u0026gt;; multiple:Ref\u0026lt;number\u0026gt;; // Computed properties increase:(delta?:number)=\u0026gt;void; decrease:(delta?:number)=\u0026gt; void; } export default function useCount(initValue = 1):CountResultProps{ const count = ref(initValue) const multiple = computed( ()=\u0026gt;count.value * 2 ) const increase = (delta?:number):void =\u0026gt;{ if(typeof delta !== \u0026#39;undefined\u0026#39;){ count.value += delta }else{ count.value += 1 } } const decrease = (delta?:number):void=\u0026gt;{ if(typeof delta !== \u0026#34;undefined\u0026#34;){ count.value -= delta }else{ count.value -= 1 } } return { count, increase, decrease, multiple } } useCount function used in the component:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;count:{{count}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;times:{{multiple}}\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;increase(1)\u0026#34;\u0026gt;Increase by one\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;decrease(1)\u0026#34;\u0026gt;Decrease by one\u0026lt;/button\u0026gt; // Use the method in hooks directly as a callback function in the template \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import useCount from \u0026#34;@/hooks/useCount\u0026#34; const {count,multiple,increase,decrease} = useCount(10) \u0026lt;/script\u0026gt; Example 3: Obtain Mouse Trigger Point Coordinate (useMousePosition) useMousePosition function encapsulation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import { ref, onMounted, onUnmounted, Ref } from \u0026#39;vue\u0026#39; interface MousePosition { x: Ref\u0026lt;number\u0026gt;, y: Ref\u0026lt;number\u0026gt; } export default function useMousePosition(): MousePosition { const x = ref(0) const y = ref(0) const updateMouse = (e: MouseEvent) =\u0026gt; { x.value = e.pageX y.value = e.pageY } onMounted(() =\u0026gt; { document.addEventListener(\u0026#39;click\u0026#39;, updateMouse) }) onUnmounted(() =\u0026gt; { document.removeEventListener(\u0026#39;click\u0026#39;, updateMouse) }) return { x, y } } useMousePosition used in component:\n1 2 3 4 5 6 7 8 9 10 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;X: {{ x }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Y: {{ y }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; import useMousePosition from \u0026#39;@/hooks/useMousePosition\u0026#39; const { x, y } = useMousePosition(); \u0026lt;/script\u0026gt; Hooks function encapsulation details are summarized How Hook functions receive parameters: Hooks function receives parameters via props, first define parameter type, then destructure internally. 1 2 3 4 5 6 7 8 export function commonRequest(params: Axios.AxiosParams) { let { url, method, data, responseType = \u0026#34;json\u0026#34;, } = params; } Receives parameters object, first set default values, then define parameter type. 1 2 3 4 5 6 7 8 interface DeprecationParam { from:string; replacement:string; type:string; } export const useDeprecated = ( { from, replacement,type = \u0026#39;API\u0026#39; }: DeprecationParam, ) =\u0026gt; {} Destructuring rename method. 1 2 3 4 5 6 7 8 // setup const { list: goodsList, getList: getGoodsList } = useList( axios.get(\u0026#39;/url/get/goods\u0026#39;) ) const { list: recommendList, getList: getRecommendList } = useList( axios.get(\u0026#39;/url/get/recommendGoods\u0026#39;) ) KeyboardEvent is the type for mouse key event. 1 export const useEscapeKeydown = (handler: (e: KeyboardEvent) =\u0026gt; void) =\u0026gt; {} Summary In the Vue2 era with Option API, data, methods, watch etc. are written separately, which makes the code fragmented and scattered. Once the code becomes complicated, it can easily lead to high coupling, making the code switching back and forth during maintenance cumbersome!\nIn the Vue3 era with Composition API, through the use of various Hooks and custom Hooks, fragmented reactive variables and methods are written in blocks according to functionality, achieving high cohesion and low coupling.\n","date":"2024-02-04T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*B-rRsR1EO03Ui8Dn7a9XsQ.png","permalink":"http://localhost:1313/p/use-and-encapsulation-concept-of-custom-hooks-functions/","title":"Use and Encapsulation Concept of Custom Hooks Functions"},{"content":"Prerequisite Knowledge What is a mixin? Mixin, translated, means mixing in. It’s not just in the Vue framework that mixin exists, to be precise, mixin is a concept, the concept of mixing in. The content of the mix can be used where it is mixed in, and it will automatically distribute the mixed elements accurately to the specified components. In Vue, mixin is equivalent to putting the specified variables \u0026amp; functions where they would be if they were not mixed in. It can be considered that mixin in Vue is equivalent to a component within a component.\nFor example: Currently, the logic that needs to be handled in the watch in component A is hanldleParams, and the watch in component B also needs such logic — hanldleParams. So how should we abstract these two same logics for reuse?\nThere are two methods: (The difference between these two methods represents the difference between mixin and utils)\nExtract Function: The first method is to extract hanldleParams as a function and call hanldleParams in the watch;\nMixin: Although the previous method of extracting functions can solve some reuse problems, we still need to write watch in the component, after all, both components are calling in the watch hook. If every component writes watch, then watch is also something repeated, so mixin is the component that can extract all the watch hooks, that is to say, mixin can extract not only pure function logic, but also can extract the unique hooks of Vue components and other logic, achieving further reuse, this is the role of mixin. So components A\\B share a watch through mixin, just import it, and developers don’t need to place it in a specific location.\nFeatures: The data and methods in Mixin are independent, and they do not affect each other after being used in components.\nWhat problem does mixin solve? Mixin resolves two types of reuse:\nReuse of logical functions\nReuse of Vue component configuration\nNote: Component configuration reuse refers to the options API (e.g. data, computed, watch) or life cycle hooks (created, mounted, destroyed) in the component.\nUse \u0026amp; Use Scene? Key: In vue, mixin is defined as an object, with the corresponding options API and life cycle hooks of the vue component placed in the object.\n1 2 3 4 5 6 7 8 9 export const mixins = { data() { return {}; }, computed: {}, created() {}, mounted() {}, methods: {}, }; Remember: Mixins generally exist in the options API and component lifecycle hooks of Vue components because the abstraction of functions also needs to be placed in specific APIs or hooks in the component. Therefore, mixin considers this and directly configures all APIs as long as they are placed in the function.\nThat is to say, except for the template in the component, any other options-API can be extracted and placed in mixin (all the logic in Vue2 is nothing more than data, methods, computed, watch, these can be placed in mixin as they are)\nFor example, to abstract a hanldleParams function, we usually export it in the config file and then import it into the component for use, use in the methods in data to process the data, and we need to set the variable b in data, then this logic can be extracted and placed in mixin. As for the data or logic related to component business, they are generally written in the component.\nFor example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // Define a mixin export const mixins = { data() { return { msg: \u0026#34;xxx\u0026#34;, }; }, computed: {}, created() { console.log(\u0026#34;the created lifecycle function in mixin\u0026#34;); }, mounted() { console.log(\u0026#34;the mounted lifecycle function in mixin\u0026#34;); }, methods: { clickMe() { console.log(\u0026#34;the click event in mixin\u0026#34;); }, }, }; // // The exported mixins are used in src/App.vue \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img alt=\u0026#34;Vue logo\u0026#34; src=\u0026#34;./assets/logo.png\u0026#34; /\u0026gt; \u0026lt;button @click=\u0026#34;clickMe\u0026#34;\u0026gt;click\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { mixins } from \u0026#34;./mixin/index\u0026#34;; export default { name: \u0026#34;App\u0026#34;, mixins: [mixins], // Register mixin, so that all the hook functions in mixin are equivalent to the hooks in the component components: {}, created(){ console.log(\u0026#34;Component calls minxi data\u0026#34;,this.msg); }, mounted(){ console.log(\u0026#34;the mounted lifecycle function of the component\u0026#34;) } }; \u0026lt;/script\u0026gt; The above code is equivalent to:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Use the exported mixin in src/App.vue \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img alt=\u0026#34;Vue logo\u0026#34; src=\u0026#34;./assets/logo.png\u0026#34; /\u0026gt; \u0026lt;button @click=\u0026#34;clickMe\u0026#34;\u0026gt;clickMe\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { mixins } from \u0026#34;./mixin/index\u0026#34;; export default { name: \u0026#34;App\u0026#34;, mixins: [mixins], // Register mixin, so all the hook functions in mixin are equivalent to the hooks in the component data() { return { msg: \u0026#34;xxx\u0026#34;, }; }, // The original component does not have a methdos method, the method in mixin is directly placed in the component // Note: In Vue, when the method name in methods conflicts with the method in mixin, the solution is that the priority of the component is higher than that of mixin methods: { clickMe() { console.log(\u0026#34;the click event in mixin\u0026#34;); }, }, created(){ console.log(\u0026#34;the created lifecycle function in mixin\u0026#34;); // The created hook in mixin is more prioritized than the component in the lifecycle console.log(\u0026#34;Component calls minxi data\u0026#34;,this.msg); }, mounted(){ // In mixin\u0026#39;s mounted hook, the lifecycle of mixin\u0026#39;s hook has higher priority than the component\u0026#39;s priority console.log(\u0026#34;the mounted lifecycle function in mixin\u0026#34;); console.log(\u0026#34;the mounted lifecycle function of the component\u0026#34;) } }; \u0026lt;/script\u0026gt; Note: The priority of the same hooks in mixin and vue components:\nThe lifecycle functions in mixin will be merged and executed with the lifecycle functions of the components.\nThe data in mixin can also be used in components.\nThe methods in mixin can be directly called inside the component.\nAfter the lifecycle functions are merged, the execution order is: execute the one in mixin first, and then the one in the component.\nIn addition, the import of mixin for different components will not affect each other’s data. For example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // mixin export const mixins = { data() { return { msg: \u0026#34;xxx\u0026#34;, }; }, computed: {}, created() { console.log(\u0026#34;the created lifecycle function in mixin\u0026#34;); }, mounted() { console.log(\u0026#34;the mounted lifecycle function in mixin\u0026#34;); }, methods: { clickMe() { console.log(\u0026#34;the click event in mixin\u0026#34;); }, }, }; Use mixin in the app file and use the changeMsg function to change the variable msg in the data of mixin. At this time, the variable msg used by other components remains unchanged.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img alt=\u0026#34;Vue logo\u0026#34; src=\u0026#34;./assets/logo.png\u0026#34; /\u0026gt; \u0026lt;button @click=\u0026#34;clickMe\u0026#34;\u0026gt;clickMe\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeMsg\u0026#34;\u0026gt;Change mixin data\u0026lt;/button\u0026gt; \u0026lt;demo\u0026gt;\u0026lt;/demo\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { mixins } from \u0026#34;./mixin/index\u0026#34;; import demo from \u0026#34;./components/demo.vue\u0026#34;; export default { name: \u0026#34;App\u0026#34;, mixins: [mixins], components: { demo }, created() { console.log(\u0026#34;Component calls minxi data\u0026#34;, this.msg); }, mounted() { console.log(\u0026#34;the mounted lifecycle function in the component\u0026#34;); }, methods: { changeMsg() { this.msg = \u0026#34;xxxxx\u0026#34;; console.log(\u0026#34;Change the msg after:\u0026#34;, this.msg); }, }, }; \u0026lt;/script\u0026gt; What are the existing disadvantages? Advantages: Reuse of hook function registration in components\nDisadvantages:\nThere will be conflicts if the same function name is registered in the same hook (In Vue, the solution to conflicts is that the priority in the component is higher than that in mixin)\nError localization takes time\nAbuse will result in maintenance issues\nWhat are hooks? Generally speaking, in our development, we will automatically abstract logic functions into utils. Utils only contain pure logic, not related to components, such as pure functions defined in methods. Hooks are a layer of component-level things (such as hook functions) based on utils. For example: every time we click a button, a pop-up window will appear and automatically display the current date. If I put the function in the util, every time I reuse it, I need to put the date function in click=handleClick. Through the handleClick function to manage utils, I might as well wrap handleClick as well, and call it directly next time for reusing the methods registration process hooks and utils difference: if the data of ref,reactive,computed and other APIs is involved in hooks, the data is reactive, while utils simply extract common methods and do not have reactivity. Therefore, hooks can be understood as common methods joining vue3 api.\nWhy are there hooks? So hooks are equivalent to logic encapsulation at the component level. This logic encapsulation can also be implemented in vue2’s mixin. Why use hooks?\nDifference between hooks and mixin:\nmixin embodies the options API, while the other embodies the composition API\nmixin There is something in vue2: Mixins can achieve this\nmixins are the extraction of these multiple identical logics, each component only needs to introduce mixins to achieve code reuse\nFault one: There will be issues of overriding\nThe data, methods, filters of the component will overwrite the same-name data, methods, and filters in mixins\nFault two: Implicit import, the source of variables is not clear, not conducive to reading, making the code hard to maintain\nFault three: Mixin cannot pass in flexible parameters, for example (Example 1 of Fault 3):\nI need to define a variable name, but the initial value of the name is random. When the name is defined in mixin, its initialization must be fixed. If we want to change, we can only register a method in method to modify the value of the name:\nExample 1: Example of using mixin\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Mixin file：name-mixin.js export default { data() { return { name: \u0026#39;zhng\u0026#39; } }, methods: { setName(name) { this.name = name } } } // Component：my-component.vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ name }}\u0026lt;/div\u0026gt; \u0026lt;template\u0026gt; \u0026lt;script\u0026gt; import nameMixin from \u0026#39;./name-mixin\u0026#39;; export default { mixins: [nameMixin], mounted() { setTimeout(() =\u0026gt; { this.setName(\u0026#39;Tom\u0026#39;) // Setting the parameter value by calling setName in the component, unable to pass parameters, which limits the flexibility of Mixin }, 3000) } } \u0026lt;script\u0026gt; Example 2: Example of using hooks\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import { computed, ref, Ref } from \u0026#34;vue\u0026#34; // Define the hook method type CountResultProps = { count:Ref\u0026lt;number\u0026gt;; multiple:Ref\u0026lt;number\u0026gt;; increase:(delta?:number)=\u0026gt;void; decrease:(delta?:number)=\u0026gt; void; } export default function useCount(initValue = 1):CountResultProps{ const count = ref(initValue) const increase = (delta?:number):void =\u0026gt;{ if(typeof delta !== \u0026#39;undefined\u0026#39;){ count.value += delta }else{ count.value += 1 } } const multiple = computed(()=\u0026gt;count.value * 2) const decrease = (delta?:number):void=\u0026gt;{ if(typeof delta !== \u0026#34;undefined\u0026#34;){ count.value -= delta }else{ count.value -= 1 } } return { count, increase, decrease, multiple } } // The usage in the component \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;count:{{count}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Multiplier:{{multiple}}\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;increase(10)\u0026#34;\u0026gt;Increase One\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;decrease(10)\u0026#34;\u0026gt;Decrease One\u0026lt;/button\u0026gt; // Use the methods in hooks directly as callback functions in the template \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import useCount from \u0026#34;../views/Hook\u0026#34; const {count,multiple,increase,decrease} = useCount(10) \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; Example 3: Key points example for beginners using hooks\nHooks generally export a function, such as: I need hooks to export a common name variable and setName function\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import {ref} from \u0026#39;vue\u0026#39; // Export a name_hooks.ts file // No need to write in setup in hooks export const name_hooks = function(value: string) { const name = ref(\u0026#39;\u0026#39;) const setName = (value: string) =\u0026gt; { name.value = value } return { name, setName } } // import hooks file \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ name }}\u0026lt;/div\u0026gt; \u0026lt;select @change=\u0026#34;setName\u0026#34;\u0026gt;\u0026lt;/select\u0026gt; // Here the change event of the select component will automatically pass the value // Then the value acts as a parameter passed to setName \u0026lt;/template\u0026gt; import { name_hooks } from \u0026#39;./name_hooks\u0026#39; export default defineComponent({ setup() { const { name, setName } = name_hooks() // Note: Usually need to destructure the desired properties and methods into the component return { name, setName } } }) The above hooks usage method, common operations are:\nThe exported hooks is a function, in which ref, reactive can be used, so hooks defined variables and methods are the same as in the component\nThe hooks function generally returns an object, the object is a two-way binding variable, the first thing when being referenced in vue is to destructure (be aware of potential pitfalls in vue3)\nhooks: In Vue3, we can: Custom Hook\nVue3’s hook function is equivalent to vue2’s mixin, but: hooks are functions\nVue3’s hook function can help us improve the reusability of the code, allowing us to use hooks function in different components.\nUsage scenario of hooks — Custom hook Common business use scenarios in Hooks Reinventing the wheel components, apart from some unnecessary repetitions, some functional components indeed need to be encapsulated. For example, some drop-down select boxes that need to request backend dictionary to display in the frontend, buttons that need to show loading status after being clicked, forms with query conditions, these very common business scenarios, we can encapsulate into components. However, when encapsulated into components, we will encounter the problems mentioned earlier. Each person’s usage habits and encapsulation habits are different, making it difficult to please everyone. In such scenarios, hooks can be the solution.\nStandards that a custom hook needs to meet Extract reusable functionality into an external js file. Start the function name and filename with “use” When referencing, explicitly destructure the reactive variables or methods, such as: const { nameRef, fun } = useXXX() (Destructure the variables and methods of the custom hooks in setup).\nExamples of using custom hooks Example 1\nCustom hooks-1 : useCut\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import {ref,watch} from \u0026#34;vue\u0026#34; export function useCut({num1,num2}){ const cutNum = ref(0); watch([num1,num2],(num1,num2)=\u0026gt;{ cutFunc(num1,num2) }) const cutFunc = (num1,num2)=\u0026gt;{ cutNum.value = num1+num2 } return { cutNum, cutFunc } } hooks2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import {ref,watch} from \u0026#34;vue\u0026#34; const useAdd = ({num1,num2})=\u0026gt;{ const addNum = ref(0); watch([num1,num2],(num1,num2)=\u0026gt;{ addFunc(num1,num2) }) const addFunc = (num1,num2)=\u0026gt;{ addNum.value = num1+num2 } return { addNum, addFunc } } export default useAdd hooks3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; num1:\u0026lt;input v-model.number=\u0026#34;num1\u0026#34; style=\u0026#34;width:100px\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; num2:\u0026lt;input v-model.number=\u0026#34;num2\u0026#34; style=\u0026#34;width:100px\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;span\u0026gt;Addition equals:{{ addNum }}\u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;span\u0026gt;Subtraction:{{ cutNum }}\u0026lt;/span\u0026gt; \u0026lt;/template\u0026gt; import { ref } from \u0026#39;vue\u0026#39; import useAdd from \u0026#39;./addHook.js\u0026#39; //Import auto hook import { useCut } from \u0026#39;./cutHook.js\u0026#39; //Import auto hook const num1 = ref(2) const num2 = ref(1) const { addNum, addFunc } = useAdd({ num1, num2 }) // Addition function - Custom Hook (expose reactive variables or methods) // Since hooks are functions, unlike mixins which are objects, they make it easier to pass data variables into components for abstract logic to use. addFn(num1.value, num2.value) const { cutNum, cutFunc } = useCut({ num1, num2 }) // Subtraction function - Custom Hook (expose reactive variables or methods) subFn(num1.value, num2.value) ","date":"2024-02-03T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*B-rRsR1EO03Ui8Dn7a9XsQ.png","permalink":"http://localhost:1313/p/understanding-hooks-in-vue3-why-use-hooks/","title":"Understanding Hooks in Vue3 (Why use hooks)"},{"content":"In Vue3, there are many functions related to responsiveness, such as toRef, toRefs, isRef, unref, etc. Reasonably using these functions can greatly improve efficiency in actual development.\nref() Everyone is no stranger to the ref API. It is often used in Vue3. Its function is to accept a value and return a responsive object. We can access and modify this value through the .value property. In the template, we can omit .value, for example in the following code, when the button is clicked, the count on the page will change responsively.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ count }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34; const count = ref(1) const addCount = () =\u0026gt; { count.value++ } \u0026lt;/script\u0026gt; toRef toRef can create a responsive ref based on a property in a responsive object. At the same time, this ref is synchronized with the property in the original object. If the value of the original object property changes, the ref will change accordingly, and vice versa. It accepts two parameters, one is the corresponding response, and the other is the property value, such as the following code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ count.a }} {{ a }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { ref, toRef } from \u0026#34;vue\u0026#34; const count = ref({ a: 1, b: 2 }) const a = toRef(count.value, \u0026#39;a\u0026#39;) const addCount = () =\u0026gt; { a.value++ } \u0026lt;/script\u0026gt; When you click the button to modify the value of a, the a in count will also change. Of course, the count here can also use reactive.\ntoRefs toRefs can convert a responsive object into a plain object, and each property of this plain object is a responsive ref.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ count.a }} {{ countAsRefs.a }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { reactive, toRefs } from \u0026#34;vue\u0026#34; const count = reactive({ a: 1, b: 2 }) const countAsRefs = toRefs(count) const addCount = () =\u0026gt; { countAsRefs.a.value++ } \u0026lt;/script\u0026gt; At this time, the type of countAsRefs in the code is\n1 2 3 4 { a: Ref\u0026lt;number\u0026gt;, b: Ref\u0026lt;number\u0026gt; } Its properties a and b are responsive ref objects. Similarly, they are also synchronized with the properties of the original count object.\nAccording to its characteristics, we usually use it to deconstruct a responsive object without losing its responsiveness.\n1 2 3 4 5 6 import { reactive, toRefs } from \u0026#34;vue\u0026#34;; const count = reactive({ a: 1, b: 2, }); const { a, b } = toRefs(count); At this point, both a and b are responsive ref objects and are synchronized with the original object’s a and b properties.\nisRef() As the name suggests, isRef is used to determine whether a value is a ref.\nNote: it cannot determine whether this value is reactive (isReactive can be used for this purpose).\n1 2 3 4 5 6 7 import { reactive, isRef, ref } from \u0026#34;vue\u0026#34;; const count = ref(1); const testObj = reactive({ a: 1, }); console.log(isRef(count)); //true console.log(isRef(testObj)); //false unref() In fact, it is a syntactic sugar.\n1 val = isRef(val) ? val.value : val; If it is a ref, it will return its internal value, otherwise, it will return itself. This syntactic sugar shows that it can remove the reactive reference for reactive objects. For instance, if we only want to get a reactive value but do not want it to be reactive, we can use it to dereference. For example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ unRefAsCount }} {{ count }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { unref, ref } from \u0026#34;vue\u0026#34; const count = ref(1) let unRefAsCount = unref(count) const addCount = () =\u0026gt; { count.value++ } \u0026lt;/script\u0026gt; The unRefAsCount in the code does not have reactivity.\nshallowRef From the literal meaning, we can see that it is a shallow ref. What is a shallow ref? The difference with ref is that only .value is reactive, while deeper properties are not reactive.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ shallowObj.a }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt; +1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { shallowRef } from \u0026#34;vue\u0026#34; const shallowObj = shallowRef({ a: 1 }) const addCount = () =\u0026gt; { //Does not trigger page updates shallowObj.value.a++ } \u0026lt;/script\u0026gt; However, if we change addCount to modify the entire .value, it will trigger reactivity.\n1 2 3 4 5 6 7 const addCount = () =\u0026gt; { let temp = shallowObj.value.a; temp++; shallowObj.value = { a: temp, }; }; triggerRef It allows a shallowRef to forcefully trigger changes when changes occur in its deep properties. For example, adding triggerRef to the above code example, which cannot trigger reactivity.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ shallowObj.a }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt; +1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { shallowRef, triggerRef } from \u0026#34;vue\u0026#34; const shallowObj = shallowRef({ a: 1 }) const addCount = () =\u0026gt; { shallowObj.value.a++ //Add \u0026#39;triggerRef\u0026#39; to force changes. triggerRef(shallowObj) } \u0026lt;/script\u0026gt; customRef As the name suggests, it is a custom ref. We can explicitly track the reactive changes of a certain value through customRef. It accepts a function, which takes track and trigger as parameters, and returns an object with get and set methods. For example, encapsulate a custom reactive object myRef and control it so that it only triggers reactivity when the value is less than 4.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ count }} \u0026lt;button @click=\u0026#34;addCount\u0026#34;\u0026gt; +1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#39;ts\u0026#39; setup\u0026gt; import { customRef } from \u0026#34;vue\u0026#34; const myRef = (value: number) =\u0026gt; { const customValue = customRef((track, trigger) =\u0026gt; { return { get() { //Inform Vue that it needs to track changes in subsequent content, and this can be freely controlled. track() return value }, set(newValue) { console.log(newValue);//myRef.value=xxx //Adding a \u0026#39;trigger\u0026#39; triggers reactivity, notifying Vue to update the page. Here you have the freedom to control whether to add \u0026#39;trigger\u0026#39;. if(value\u0026lt;4) trigger() value = newValue } } }) return customValue } const count = myRef(0) const addCount = () =\u0026gt; { count.value++ } \u0026lt;/script\u0026gt; When count is greater than 4, it loses its reactivity.\nSummary This article gives a detailed introduction to the various uses of ‘ref’ in Vue3, which includes:\nref(): Takes a value and returns a reactive object. The .value property can be used to access and modify this value.\ntoRef(obj, key): Based on a property of a reactive object, it creates a reactive ref, and this ref remains in sync with the property in the original object.\ntoRefs(obj): Converts a reactive object into a regular object, where each property of the regular object is a reactive ref.\nisRef(value): Determines whether a value is a ref object.\nunref(value): Used to remove reactive references.\nshallowRef(value): Creates a shallow ref, only the value property is reactive, the deep property is not reactive.\ntriggerRef(ref): Forces shallow ref to trigger reactive when changes occur.\ncustomRef(factory): Customizes the ref object, and can explicitly track the reactive changes of a value.\n","date":"2024-02-02T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*B-rRsR1EO03Ui8Dn7a9XsQ.png","permalink":"http://localhost:1313/p/understanding-the-various-ref-in-vue3/","title":"Understanding the various ref in Vue3"},{"content":"v-model is a very important built-in directive in Vue, which creates two-way bindings on form input elements or components. These elements include:\n\u0026lt;input\u0026gt;\n\u0026lt;select\u0026gt;\n\u0026lt;textarea\u0026gt;\ncomponents\nv-model is actually a syntax sugar for the value attribute and the input event\n1 2 3 \u0026lt;input type=\u0026#34;text\u0026#34; :value=\u0026#34;iptVal\u0026#34; @input=\u0026#34;$event =\u0026gt; iptVal = $event.target.value\u0026#34; /\u0026gt; \u0026lt;!-- v-model --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;iptVal\u0026#34; /\u0026gt; We usually use the v-model directive to complete data binding when developing forms, and this directive can also be used on components.\nBind a Single Attribute Basic Binding Taking the custom component CustomInput as an example\n1 2 3 4 5 6 7 \u0026lt;script setup\u0026gt; const txt = ref(\u0026#39;\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;CustomInput v-model=\u0026#34;txt\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; v-model will be expanded into the following form\n1 2 3 4 \u0026lt;CustomInput :modelValue=\u0026#34;txt\u0026#34; @update:modelValue=\u0026#34;newValue =\u0026gt; txt = newValue\u0026#34; /\u0026gt; The CustomInput component needs to do two things internally:\nBind the value attribute of the internal native \u0026lt;input\u0026gt; element to the modelValue prop\nWhen the native input event triggers, trigger an update:modelValue custom event with a new value\nHere is the corresponding code:\n1 2 3 4 5 6 7 8 9 10 \u0026lt;template\u0026gt; \u0026lt;input :value=\u0026#34;modelValue\u0026#34; @input=\u0026#34;$emit(\u0026#39;update:modelValue\u0026#39;, $event.target.value)\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; const props = defineProps({ \u0026#39;modelValue\u0026#39;: String, }) const emit = defineEmits([\u0026#34;update:modelValue\u0026#34;]) \u0026lt;/script\u0026gt; Some people may find this writing way too cumbersome, and it will make the tag code lengthy.\nAnother way to implement v-model in the component is to use a writable computed property with both a getter and a setter.\nBinding with computed\nWhen using computed properties, the get method should return modelValue prop, and the set method should trigger the corresponding event\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;input v-model=\u0026#34;value\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; const value = computed({ get() { return props.modelValue }, set(value) { emit(\u0026#34;update:modelValue\u0026#34;, value) } }) \u0026lt;/script\u0026gt; This way of writing can simplify the properties in the tag and make the logic clear\nBinding a single attribute can be easily done with v-model, but what if multiple attributes need to be bound bidirectionally?\nUse v-model to bind multiple attributes By default, v-model uses modelValue as prop on a component, and update:modelValue as the corresponding event\nBut we can change these names by specifying a parameter for v-model\n1 2 3 \u0026lt;template\u0026gt; \u0026lt;CustomInput v-model:first-name=\u0026#34;first\u0026#34; v-model:last-name=\u0026#34;last\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; In the same way, you can use two ways to bind, but the prop has changed from the original modelValue to the parameter name passed in, and the corresponding event has also changed to update:parameter name.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; :value=\u0026#34;firstName\u0026#34; @input=\u0026#34;$emit(\u0026#39;update:firstName\u0026#39;, $event.target.value)\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; :value=\u0026#34;lastName\u0026#34; @input=\u0026#34;$emit(\u0026#39;update:lastName\u0026#39;, $event.target.value)\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; const props = defineProps({ firstName: String, lastName: String, }) // Use it in computed const emit = defineEmits([\u0026#39;update:firstName\u0026#39;, \u0026#39;update:lastName\u0026#39;]) \u0026lt;/script\u0026gt; Binding an Object In a complex component, if multiple fields need to be bound in two ways. Using the method mentioned above can be a bit cumbersome.\nHere are two ways to bind an object in two ways:\nDefine the parent component searchBar as a complex form component:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;searchBar v-model=\u0026#34;modelValue\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34; const modelValue = ref({ keyword: \u0026#34;123\u0026#34;, selectValue: \u0026#34;\u0026#34;, options: [ { label: \u0026#34;all\u0026#34;, value: \u0026#34;\u0026#34; }, { label: \u0026#34;a1\u0026#34;, value: \u0026#34;1\u0026#34; }, { label: \u0026#34;a2\u0026#34;, value: \u0026#34;2\u0026#34; }, ] }) \u0026lt;/script\u0026gt; Then, in the searchBar component, we receive modelValue and define the type as Object:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!-- \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;modelValue.keyword\u0026#34;\u0026gt; can achieve two-way binding --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; :value=\u0026#34;modelValue.keyword\u0026#34; @input=\u0026#34;handleKeywordChange\u0026#34; \u0026gt; \u0026lt;select v-model=\u0026#34;modelValue.selectValue\u0026#34;\u0026gt; \u0026lt;option v-for=\u0026#34;o in modelValue.options\u0026#34; :key=\u0026#34;o.value\u0026#34; :value=\u0026#34;o.value\u0026#34;\u0026gt; {{ o.label }} \u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34; setup\u0026gt; const props = defineProps({ modelValue: { type: Object, default: () =\u0026gt; ({}) } }) const emit = defineEmits([\u0026#34;update:modelValue\u0026#34;]); // For example, with input const handleKeywordChange=(val)=\u0026gt;{ emit(\u0026#34;update:modelValue\u0026#34;,{ ...props.modelValue, keyword:val.target.value }) } \u0026lt;/script\u0026gt; If an object is passed in, as explained in the comments, \u0026lt;input type=\u0026quot;text\u0026quot; v-model=\u0026quot;modelValue.keyword\u0026quot;\u0026gt;. Although this can directly perform bidirectional binding, it will disrupt the one-way data flow.\nIt’s the same as the emit trigger event above, but the passed data has become an object.\nDespite emit allowing bidirectional binding, it is too cumbersome. The following describes a more elegant way of writing, which can be said to be a trick — computed + proxy.\nIf you use computed binding, you might write this kind of code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;model.keyword\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34; setup\u0026gt; const model = computed({ get() { return props.modelValue }, set(value) { // console.log(value) // Found no print emit(\u0026#34;update:modelValue\u0026#34;, { ...props.modelValue, keyword: value }) } }) \u0026lt;script\u0026gt; But when you input, you will find that the setter is not triggered because computed will do a layer of proxy, the proxy object has not changed.\nIf you want to trigger the setter, see the following picture:\n1 2 3 4 // It only changes this way model.value = { keyword:\u0026#34;asdfad\u0026#34; } This method cannot trigger the setter, so it cannot bind in both directions, what should we do?\nReturn a proxy object in the getter!\nReturn a proxy object in the getter!\nReturn a proxy object in the getter!\nSince the properties of the proxy object are consistent with the properties of the proxied object, we use proxy to wrap the original object.\nThen the v-model is bound to the object after the proxy, if the properties of the proxy object change, it will trigger the set method in the proxy object, at which point we can trigger emit.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const model = computed({ get() { return new Proxy(props.modelValue, { set(obj, name, val) { emit(\u0026#34;update:modelValue\u0026#34;, { ...obj, [name]: val }) return true } }) }, set(value) { emit(\u0026#34;update:modelValue\u0026#34;, { ...props.modelValue, keyword: value }) } }) Modifiers We know that v-model has some built-in modifiers, such as .trim, .number and .lazy.\nIn some scenarios, we may want the v-model of a custom component to support custom modifiers.\nLet’s create a custom modifier capitalize that automatically converts the first letter of the string value bound by v-model to uppercase:\n1 \u0026lt;CustomInput v-model.capitalize=\u0026#34;txt\u0026#34; /\u0026gt; We added the capitalize modifier, which will be automatically passed into modelModifiers prop:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;input :value=\u0026#34;modelValue\u0026#34; @input=\u0026#34;emitValue\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; const props = defineProps({ modelValue: String, modelModifiers: { default: () =\u0026gt; ({}) } }) const emitValue = (e) =\u0026gt; { let value = e.target.value; // use the modifier if (props.modelModifiers.capitalize) { value = value.charAt(0).toUpperCase() + value.slice(1) } emit(\u0026#39;update:modelValue\u0026#39;, value) } \u0026lt;/script\u0026gt; Problem Background: In the basics section, we’ve already explained how to encapsulate a component with a customized v-model. However, in actual development, using @input and :value to bind our values in the subcomponent is somewhat cumbersome. Is there a simpler way?\nWe often want to directly bind the v-model to the subcomponent which needs bidirectional binding:\n1 2 \u0026lt;!-- subcomponent --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;xxx\u0026#34; /\u0026gt; Given this, in receiving the pass value from the parent component in the subcomponent, what should xxx bind to? Directly bind it to props.modelValue?\n1 2 \u0026lt;!-- subcomponent --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;props.modelValue\u0026#34;/\u0026gt; An error will occur:\n1 ⚠️reactivity.esm-bundler.js:512 Set operation on key \u0026#34;modelValue\u0026#34; failed: target is readonly. This is because props is a readonly value (isReadonly(props) === true), so we can\u0026rsquo;t use it directly.\nTherefore, we need an intermediate value to bind the v-model.\nMethod One: Relay Through watch We can bind the v-model to an internal variable and use watch to monitor it and synchronize the data of props.xxx:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- subcomponent --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;proxy\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, watch } from \u0026#34;vue\u0026#34;; const emit = defineEmits(); const props = defineProps({ modelValue: String, }); const proxy = ref(props.modelValue); watch( () =\u0026gt; proxy.value, (v) =\u0026gt; emit(\u0026#34;update:modelValue\u0026#34;, v) ); \u0026lt;/script\u0026gt; Sometimes, we may perform bidirectional binding to an object or array. In this case, we can use watch\u0026rsquo;s deep option to deeply monitor and synchronize proxy:\n1 2 3 4 5 watch( () =\u0026gt; proxy.value, (v) =\u0026gt; emit(\u0026#34;update:modelValue\u0026#34;, v), {deep: true} ); As props.modelValue may have a default value passed in, we can add the immediate option so that the proxy is assigned the default value as soon as the component is created;\nMethod Two: Get and Set with computed\nYou can also use the get and set provided by computed to synchronize data:\n1 2 3 4 5 6 7 8 const proxy = computed({ get() { return props.modelValue; }, set(v) { emit(\u0026#34;update:modelValue\u0026#34;, v); }, }); Ultimate: Encapsulate v-model Hooks\nFirst, let\u0026rsquo;s encapsulate the watch method as a hook:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- subcomponent --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;proxy\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, watch, computed } from \u0026#34;vue\u0026#34;; const emit = defineEmits(); const props = defineProps({ modelValue: String, }); const proxy = ref(props.modelValue); watch( () =\u0026gt; proxy.value, (v) =\u0026gt; emit(\u0026#34;update:modelValue\u0026#34;, v) ); \u0026lt;/script\u0026gt; In the subcomponent, we bind an internal value proxy to the input via v-model and initialize the proxy variable with the value of props.modelValue (ref(props.modelValue);\nIn watch, we monitor the binding value proxy on the input. When the value changes due to input, we dispatch the emit('update:modelValue', v) event to pass the changed value to the external component dynamically.\nAfter extracting common logic:\n1 2 3 4 5 6 7 8 9 10 // useVmodel1.js import { ref, watch } from \u0026#34;vue\u0026#34;; export function useVmodel(props, emit) { const proxy = ref(props.modelValue); watch( () =\u0026gt; proxy.value, (v) =\u0026gt; emit(\u0026#34;update:modelValue\u0026#34;, v) ); return proxy; } The simplest hooks are encapsulated.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;proxy\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, watch, computed } from \u0026#34;vue\u0026#34;; import { useVmodel } from \u0026#34;./hooks/useVmodel1\u0026#34;; const emit = defineEmits(); const props = defineProps({ modelValue: String, }); const proxy = useVmodel(props, emit); \u0026lt;/script\u0026gt; Continue the encapsulation\nConsidering the following points, continue the encapsulation:\nemit can not be passed, for a simpler call syntax.\nEvents such as multiple v-model:test1, emit(\u0026quot;update:xxxx\u0026quot;) need to extract the event name xxxx.\nThrough the getCurrentInstance method provided by vue3, we can get the current component instance. As modelValue can be overridden, extract it into a variable:\n1 2 3 4 5 6 7 8 9 10 11 12 13 //useVmodel2.js import { ref, watch, getCurrentInstance } from \u0026#34;vue\u0026#34;; export function useVmodel(props, key = \u0026#34;modelValue\u0026#34;, emit) { const vm = getCurrentInstance(); const _emit = emit || vm?.emit; const event = `update:${key}`; const proxy = ref(props[key]); watch( () =\u0026gt; proxy.value, (v) =\u0026gt; _emit(event, v) ); return proxy; } Good. Now, we can call our hooks in a simpler way:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!-- subcomponent childModel --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;modelValue\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;test\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { useVmodel } from \u0026#34;./hooks/useVmodel2\u0026#34;; const emit = defineEmits(); const props = defineProps({ modelValue: String, test: String, }); const modelValue = useVmodel(props); const test = useVmodel(props, \u0026#34;test\u0026#34;); \u0026lt;/script\u0026gt; \u0026lt;!-- parent component --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;Model v-model=\u0026#34;modelValue\u0026#34; v-model:test=\u0026#34;test\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, watch } from \u0026#34;vue\u0026#34;; import Model from \u0026#34;./childModel.vue\u0026#34;; const modelValue = ref(\u0026#34;\u0026#34;); const test = ref(\u0026#34;\u0026#34;); \u0026lt;/script\u0026gt; ","date":"2024-02-02T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*N1yhl_KuYBBBkB5FsmmdMQ.png","permalink":"http://localhost:1313/p/understanding-v-model-in-vue3/","title":"Understanding v-model in Vue3"},{"content":"Array Generating an array When you need to generate an array from 0 to 99\noption 1\n1 2 const createArr = (n) =\u0026gt; Array.from(new Array(n), (v, i) =\u0026gt; i) const arr = createArr(100) option 2\n1 2 const createArr = (n) =\u0026gt; new Array(n).fill(0).map((v, i) =\u0026gt; i) createArr(100) Shuffling an array When you have an array that you need to randomize\n1 2 const randomSort = list =\u0026gt; list.sort(() =\u0026gt; Math.random() - 0.5) randomSort([0,1,2,3,4,5,6,7,8,9]) Array simple data deduplication When you need to remove all duplicate elements in an array, leaving only one\n1 2 const removeDuplicates = list =\u0026gt; [...new Set(list)] removeDuplicates([0, 0, 2, 4, 5]) Array unique value data deduplication When you need to remove duplicate elements in an array based on a unique value\n1 2 3 const duplicateById = list =\u0026gt; [...list.reduce((prev, cur) =\u0026gt; prev.set(cur.id, cur), new Map()).values()] duplicateById([{id: 1, name: \u0026#39;jack\u0026#39;}, {id: 2, name: \u0026#39;rose\u0026#39;}, {id: 1, name: \u0026#39;jack\u0026#39;}]) // [{id: 1, name: \u0026#39;jack\u0026#39;}, {id: 2, name: \u0026#39;rose\u0026#39;}] Finding array intersection When you need to find the intersection of multiple arrays\n1 2 3 4 const intersection = (a, ...arr) =\u0026gt; [...new Set(a)].filter((v) =\u0026gt; arr.every((b) =\u0026gt; b.includes(v))) intersection([1, 2, 3, 4], [2, 3, 4, 7, 8], [1, 3, 4, 9]) // [3, 4] Finding the index of the maximum value When you need to find the index of the maximum value in an array\n1 2 const indexOfMax = (arr) =\u0026gt; arr.reduce((prev, curr, i, a) =\u0026gt; (curr \u0026gt; a[prev] ? i : prev), 0); indexOfMax([1, 3, 9, 7, 5]); // 2 Finding the index of the minimum value When you need to find the index of the minimum value in an array\n1 2 const indexOfMin = (arr) =\u0026gt; arr.reduce((prev, curr, i, a) =\u0026gt; (curr \u0026lt; a[prev] ? i : prev), 0) indexOfMin([2, 5, 3, 4, 1, 0, 9]) // 5 Finding the nearest value When you need to find the nearest value in an array\n1 2 const closest = (arr, n) =\u0026gt; arr.reduce((prev, curr) =\u0026gt; (Math.abs(curr - n) \u0026lt; Math.abs(prev - n) ? curr : prev)) closest([29, 87, 8, 78, 97, 20, 75, 33, 24, 17], 50) // 33 Compressing multiple arrays When you need to compress multiple arrays into one\n1 2 3 const zip = (...arr) =\u0026gt; Array.from({ length: Math.max(...arr.map((a) =\u0026gt; a.length)) }, (_, i) =\u0026gt; arr.map((a) =\u0026gt; a[i])) zip([1,2,3,4], [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;], [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;]) // [[1, \u0026#39;a\u0026#39;, \u0026#39;A\u0026#39;], [2, \u0026#39;b\u0026#39;, \u0026#39;B\u0026#39;], [3, \u0026#39;c\u0026#39;, \u0026#39;C\u0026#39;], [4, \u0026#39;d\u0026#39;, \u0026#39;D\u0026#39;]] Matrix row and column exchange When you need to swap the rows and columns of a matrix\n1 2 3 4 5 6 7 8 const transpose = (matrix) =\u0026gt; matrix[0].map((col, i) =\u0026gt; matrix.map((row) =\u0026gt; row[i])); transpose( [ // [ [1, 2, 3], // [1, 4, 7], [4, 5, 6], // [2, 5, 8], [7, 8, 9], // [3, 6, 9], ] // ] ); Sort the array by a specific attribute 1 2 3 // Input: \u0026#39;name\u0026#39;, [{name:\u0026#39;Bob\u0026#39;, age:25}, {name:\u0026#39;Alice\u0026#39;, age:22}] const sortBy = (arr, key) =\u0026gt; arr.sort((a, b) =\u0026gt; a[key] \u0026gt; b[key] ? 1 : -1); // Output: [{name:\u0026#39;Alice\u0026#39;, age:22}, {name:\u0026#39;Bob\u0026#39;, age:25}] Check if a variable is an array The Array.isArray() method checks if a given variable is an array.\n1 const isArray = variable =\u0026gt; Array.isArray(variable); Retrieve the last item in an array 1 const lastItem = array =\u0026gt; array.slice(-1)[0]; Capitalize the first letter of a string 1 const capitalize = string =\u0026gt; string.charAt(0).toUpperCase() + string.slice(1); Number conversion Radic conversion To convert decimal to n-base, you can use toString(n)\n1 2 3 const toDecimal = (num, n = 10) =\u0026gt; num.toString(n) // The decimal number 10 needs to be converted into binary. toDecimal(10, 2) // \u0026#39;1010\u0026#39; To convert n-base to decimal, you can use parseInt(num, n)\n1 2 const toDecimalism = (num, n = 10) =\u0026gt; parseInt(num, n) toDecimalism(1010, 2) Regular Expression Phone number formatting When you need to format a phone number in the form of xxx-xxxx-xxxx\n1 2 3 4 const formatPhone = (str, sign = \u0026#39;-\u0026#39;) =\u0026gt; str.replace(/(\\W|\\s)/g, \u0026#34;\u0026#34;).split(/^(\\d{3})(\\d{4})(\\d{4})$/).filter(item =\u0026gt; item).join(sign) formatPhone(\u0026#39;13123456789\u0026#39;) // \u0026#39;131-2345-6789\u0026#39; formatPhone(\u0026#39;13 1234 56 789\u0026#39;, \u0026#39; \u0026#39;) // \u0026#39;131 2345 6789\u0026#39; Remove excess spaces When you need to merge multiple spaces in a text into a single space\n1 2 const setTrimOut = str =\u0026gt; str.replace(/\\s\\s+/g, \u0026#39; \u0026#39;) const str = setTrimOut(\u0026#39;hello, jack\u0026#39;) // Web Reload the current page 1 2 const reload = () =\u0026gt; location.reload(); reload() Scroll to the top of the page If you need to scroll the page to the top\n1 2 const goToTop = () =\u0026gt; window.scrollTo(0, 0); goToTop() Element scrolling If you want to smoothly scroll an element to the start of the viewport\n1 2 3 const scrollToTop = (element) =\u0026gt; element.scrollIntoView({ behavior: \u0026#34;smooth\u0026#34;, block: \u0026#34;start\u0026#34; }) scrollToTop(document.body) If you want to smoothly scroll an element to the end of the viewport\n1 2 3 const scrollToBottom = (element) =\u0026gt; element.scrollIntoView({ behavior: \u0026#34;smooth\u0026#34;, block: \u0026#34;end\u0026#34; }) scrollToBottom(document.body) Check if the current browser is IE 1 const isIE = !!document.documentMode; Stripping HTML from given text When you need to filter out all the tags in a piece of text\n1 2 const stripHtml = (html) =\u0026gt; new DOMParser().parseFromString(html, \u0026#39;text/html\u0026#39;).body.textContent || \u0026#39;\u0026#39;; stripHtml(\u0026#39;\u0026lt;div\u0026gt;test\u0026lt;/div\u0026gt;\u0026#39;) // \u0026#39;test\u0026#39; Redirect When you need to jump to another page\n1 const goTo = (url) =\u0026gt; (location.href = url); Text pasting When you need to copy text to the clipboard\n1 2 const copy = (text) =\u0026gt; navigator.clipboard?.writeText \u0026amp;\u0026amp; navigator.clipboard.writeText(text) copy(\u0026#39;copy text\u0026#39;) Copy content to clipboard 1 2 const copyToClipboard = (text) =\u0026gt; navigator.clipboard.writeText(text); copyToClipboard(\u0026#34;Hello World\u0026#34;); Clear all cookies 1 const clearCookies = document.cookie.split(\u0026#39;;\u0026#39;).forEach(cookie =\u0026gt; document.cookie = cookie.replace(/^ +/, \u0026#39;\u0026#39;).replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`)); Get the selected text 1 2 const getSelectedText = () =\u0026gt; window.getSelection().toString(); getSelectedText(); Detect if it’s dark mode 1 2 const isDarkMode = window.matchMedia \u0026amp;\u0026amp; window.matchMedia(\u0026#39;(prefers-color-scheme: dark)\u0026#39;).matches console.log(isDarkMode) Determine if the current tab is active 1 const isTabInView = () =\u0026gt; !document.hidden; Determine if it is currently an Apple device 1 2 const isAppleDevice = () =\u0026gt; /Mac|iPod|iPhone|iPad/.test(navigator.platform); isAppleDevice(); Open the browser print dialog 1 const showPrintDialog = () =\u0026gt; window.print() Check if an element is in the viewport 1 const elementInViewport = el =\u0026gt; el.getBoundingClientRect().top \u0026gt;= 0 \u0026amp;\u0026amp; el.getBoundingClientRect().bottom \u0026lt;= window.innerHeight; Get device type 1 const getDeviceType = () =\u0026gt; /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ? \u0026#39;Mobile\u0026#39; : \u0026#39;Desktop\u0026#39;; Date Check if a date is today 1 const isToday = (date) =\u0026gt; date.toISOString().slice(0, 10) === new Date().toISOString().slice(0, 10) Date conversion When you need to convert a date into YYYY-MM-DD format\n1 2 const formatYmd = (date) =\u0026gt; date.toISOString().slice(0, 10); formatYmd(new Date()) Time conversion When you need to convert seconds into hh:mm:ss format\n1 2 const formatSeconds = (s) =\u0026gt; new Date(s * 1000).toISOString().substr(11, 8) formatSeconds(200) // 00:03:20 Get the first day of a month in a particular year When you need to get the first day of a month in a specific year\n1 2 const getFirstDate = (d = new Date()) =\u0026gt; new Date(d.getFullYear(), d.getMonth(), 1); getFirstDate(new Date(\u0026#39;2022-04\u0026#39;)) // Fri Apr 01 2022 00:00:00 GMT+0800 (中国标准时间) Get the last day of a month in a particular year When you need to get the last day of a month in a specific year\n1 2 const getLastDate = (d = new Date()) =\u0026gt; new Date(d.getFullYear(), d.getMonth() + 1, 0); getLastDate(new Date(\u0026#39;2023-03-04\u0026#39;)) // Fri Mar 31 2023 00:00:00 GMT+0800 (中国标准时间) Get the total number of days in a month in a particular year When you need to get the total number of days in a specific month of a certain year\n1 2 const getDaysNum = (year, month) =\u0026gt; new Date(year, month, 0).getDate() const day = getDaysNum(2024, 2) // 29 Check if a date is valid 1 2 const isDateValid = (...val) =\u0026gt; !Number.isNaN(new Date(...val).valueOf()); isDateValid(\u0026#34;December 17, 1995 03:24:00\u0026#34;); Calculate the interval between two dates 1 2 const dayDif = (date1, date2) =\u0026gt; Math.ceil(Math.abs(date1.getTime() - date2.getTime()) / 86400000) dayDif(new Date(\u0026#34;2021-11-3\u0026#34;), new Date(\u0026#34;2022-2-1\u0026#34;)) Find out which day of the year a date falls on 1 2 const dayOfYear = (date) =\u0026gt; Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24); dayOfYear(new Date()); Obtain the timezone 1 Intl.DateTimeFormat().resolvedOptions().timeZone; Function Asynchronous function judgment Determine whether a function is an asynchronous function\n1 2 const isAsyncFunction = (v) =\u0026gt; Object.prototype.toString.call(v) === \u0026#39;[object AsyncFunction]\u0026#39; isAsyncFunction(async function () {}); // true Number Truncate number When you need to truncate some digits after the decimal point without rounding\n1 2 const toFixed = (n, fixed) =\u0026gt; `${n}`.match(new RegExp(`^-?\\d+(?:.\\d{0,${fixed}})?`))[0] toFixed(10.255, 2) // 10.25 Rounding When you need to truncate some digits after the decimal point and round\n1 2 const round = (n, decimals = 0) =\u0026gt; Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`) round(10.255, 2) // 10.26 Zero-padding When you need to pad zeros in front of a number num that lacks len digits\n1 2 const replenishZero = (num, len, zero = 0) =\u0026gt; num.toString().padStart(len, zero) replenishZero(8, 2) // 08 Object Remove invalid properties When you need to remove all properties in an object with a property value of null or undefined\n1 2 const removeNullUndefined = (obj) =\u0026gt; Object.entries(obj).reduce((a, [k, v]) =\u0026gt; (v == null ? a : ((a[k] = v), a)), {}); removeNullUndefined({name: \u0026#39;\u0026#39;, age: undefined, sex: null}) // { name: \u0026#39;\u0026#39; } Reverse object key-value pairs When you need to exchange the key-value pairs of an object\n1 2 const invert = (obj) =\u0026gt; Object.keys(obj).reduce((res, k) =\u0026gt; Object.assign(res, { [obj[k]]: k }), {}) invert({name: \u0026#39;jack\u0026#39;}) // {jack: \u0026#39;name\u0026#39;} Check if an object is empty 1 const isEmpty = obj =\u0026gt; Reflect.ownKeys(obj).length === 0 \u0026amp;\u0026amp; obj.constructor === Object; String to object 1 2 const strParse = (str) =\u0026gt; JSON.parse(str.replace(/(\\w+)\\s*:/g, (_, p1) =\u0026gt; `\u0026#34;${p1}\u0026#34;:`).replace(/\\\u0026#39;/g, \u0026#34;\\\u0026#34;\u0026#34;)) strParse(\u0026#39;{name: \u0026#34;jack\u0026#34;}\u0026#39;) Other Compare two objects When you need to compare two objects. JavaScript’s equality operator can only determine if the addresses of two objects are the same, and cannot determine if the key-value pairs of two objects are consistent when the addresses are different.\n1 2 3 const isEqual = (...objects) =\u0026gt; objects.every(obj =\u0026gt; JSON.stringify(obj) === JSON.stringify(objects[0])) isEqual({name: \u0026#39;jack\u0026#39;}, {name: \u0026#39;jack\u0026#39;}) // true isEqual({name: \u0026#39;jack\u0026#39;}, {name: \u0026#39;jack1\u0026#39;}, {name: \u0026#39;jack\u0026#39;}) // false Generate random color When you need to generate a random color\n1 2 const getRandomColor = () =\u0026gt; `#${Math.floor(Math.random() * 0xffffff).toString(16)}` getRandomColor() // \u0026#39;#4c2fd7\u0026#39; Color format conversion When you need to convert hexadecimal color to rgb\n1 2 3 const hexToRgb = hex =\u0026gt; hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_, r, g, b) =\u0026gt; `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map((x) =\u0026gt; parseInt(x, 16)); hexToRgb(\u0026#39;#00ffff\u0026#39;); // [0, 255, 255] hexToRgb(\u0026#39;#0ff\u0026#39;); // [0, 255, 255] Generate random IP address When you need to generate an IP address\n1 2 3 4 5 const randomIp = () =\u0026gt; Array(4) .fill(0) .map((_, i) =\u0026gt; Math.floor(Math.random() * 255) + (i === 0 ? 1 : 0)) .join(\u0026#39;.\u0026#39;); UUID generation When you need to generate an id\n1 2 const uuid = (a) =\u0026gt; (a ? (a ^ ((Math.random() * 16) \u0026gt;\u0026gt; (a / 4))).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid)) uuid() Get cookie When you need to convert cookie into an object\n1 2 3 4 5 const getCookie = () =\u0026gt; document.cookie .split(\u0026#39;;\u0026#39;) .map((item) =\u0026gt; item.split(\u0026#39;=\u0026#39;)) .reduce((acc, [k, v]) =\u0026gt; (acc[k.trim().replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;)] = v) \u0026amp;\u0026amp; acc, {}) getCookie() Force waiting When you need to wait for a period of time, but you don’t want to write it in the setTimeout function, causing callback hell.\n1 2 const sleep = async (t) =\u0026gt; new Promise((resolve) =\u0026gt; setTimeout(resolve, t)); sleep(2000).then(() =\u0026gt; {console.log(\u0026#39;time\u0026#39;)}); Conversion between Fahrenheit and Celsius 1 2 3 const celsiusToFahrenheit = (celsius) =\u0026gt; celsius * 9/5 + 32; const fahrenheitToCelsius = (fahrenheit) =\u0026gt; (fahrenheit - 32) * 5/9; ","date":"2024-02-01T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*dpgmDdOfYm727sko","permalink":"http://localhost:1313/p/little-known-but-useful-js-tricksone-line-of-code/","title":"Little-known but useful js tricks【one line of code】"},{"content":"The development environment of engineers determines their development efficiency. Common development environment configurations are also one of the interview examination points.\nKnowledge Sorting IDE\nGit\nBasic Linux commands\nFront-end build tools\nDebugging methods\nThis section will focus on the basic usage of Git, code deployment, and commonly used Linux commands in development. Then, we will introduce front-end build tools with webpack as an example. Finally, we will introduce how to capture packets to solve online problems. These are all commonly used knowledge in daily development and interviews.\nIDE Topic: What IDE do you usually use for programming? What are the ways to improve efficiency?\nThe most commonly used IDEs for front-end development are Webstorm, Sublime, Atom, and VSCode. We can go to their official websites to check them out.\nWebstorm is the most powerful editor because it has a variety of powerful plugins and features, but I have not used it, because it charges fees. It’s not that I’m reluctant to spend money, but because I think the free Sublime is enough for me. When discussing Webstorm with the interviewer, it doesn’t matter if you haven’t used it, but you must know that it: first, powerful; second, charge fees.\nSublime is the editor I use daily, first, it’s free, second, it’s lightweight and efficient, and third, it has many plugins. When using Sublime, make sure to install all kinds of plugins and use them in combination. You can search online for the installation and usage of commonly used plugins for Sublime, as well as its various shortcut keys, and use it personally. I won’t demonstrate them one by one here, the online tutorials are also very foolproof.\nAtom is an editor produced by GitHub, similar to Sublime, free and rich in plugins, and compared with Sublime, it has a slight fresher style. But I used it a few times and then stopped, because it is slower when it opens and stutters a bit before opening. Of course, overall it is quite good to use, it’s just a matter of personal habit.\nVSCode is a lightweight (compared to Visual Studio) editor produced by Microsoft. Microsoft is well-known for making good IDEs, which are large and comprehensive, so VSCode also has the various advantages of the above-mentioned Sublime and Atom. However, I also stopped using it after a few times due to personal habit issues (I am not willing to try new things that are not innovative).\nTo sum up:\nIf you want to follow the route of being a big bull, big coffee, high-profile, use Webstorm\nIf you follow the ordinary, plebeian, low-key route, use Sublime\nIf you’re on the fresh and individual route, use VSCode or Atom\nIf you’re being interviewed, it’s best to have one that you’re familiar with, and know a little about the others\nFinally, note: Never say that you use Dreamweaver or Notepad++ to write front-end code, you will be despised. If you don’t do .NET, don’t use Visual Studio, and if you don’t do Java, don’t use Eclipse.\nGit You must have used Git for the projects you have done before, and it must be the command line. If not, you have to review it yourself. If you are familiar with the basic application of Git, you can skip this part. MacOS comes with Git, and Windows needs to install the Git client, you can download it from the Git official website.\nTopic: What are the common Git commands? How to use Git for multi-person collaborative development?\nCommon Git commands First of all, download the latest code through git clone \u0026lt;project remote address\u0026gt;, such as git clone git@git.coding.net:username/project-name.git, which will download the master branch by default.\nThen modify the code, you can see your modification situation through git status during the modification process, and you can view the differences of a single file through git diff \u0026lt;filename\u0026gt;.\nFinally, submit the modified content to the remote server, do the following operations\n1 2 3 git add . git commit -m \u0026#34;xxx\u0026#34; git push origin master If someone else also submitted the code and you want to synchronize the content submitted by others, execute git pull origin master to do so.\nHow to collaborate on development with multiple people For multi-person collaborative development, you can’t use the master branch, but each developer must pull a separate branch, use git checkout -b \u0026lt;branchname\u0026gt;, run git branch to see the names of all local branches.\nIn your own branch, if you want to synchronize the content of the master branch, you can run git merge master. You can switch branches using git checkout \u0026lt;branchname\u0026gt;.\nAfter modifying the content on your own branch, you can submit your own branch to the remote server\n1 2 3 git add . git commit -m \u0026#34;xxx\u0026#34; git push origin \u0026lt;branchname\u0026gt; Finally, after the code is tested without problems, merge the content of your own branch into the master branch, and then submit it to the remote server.\n1 2 3 git checkout master git merge \u0026lt;branchname\u0026gt; git push origin master About SVN My attitude towards SVN is same as my attitude towards IE low version browsers, what you need to do is to look up some basic information to understand it a bit. Interviewers might ask about it, but as long as you are familiar with Git operations, the interviewer will not make things difficult for you because you are not familiar with SVN. The premise is that you have to know some basic commands of SVN, and you can check it out online.\nHowever, you have to understand the difference between SVN and Git. SVN is that every step of the operation can not be separated from the server, creating branches, submitting code all need to connect to the server. But Git is different, you can create branches, submit code locally, and then push them to the server all at once. Therefore, Git has all the functions of SVN, but it is much more powerful than SVN. (Git is something invented by Linus, the founder of Linux, so it is also highly praised.)\nLinux Basic Commands Currently, online servers of Internet companies all use Linux system, and the test environment is definitely using Linux system to ensure consistency with the online environment. And they are all command line, without desktop, can’t use mouse operation. Therefore, it is necessary to master the basic Linux commands. Here are some of the most commonly used Linux commands, I suggest you try them personally under a real Linux system.\nRegarding how to get the Linux system, there are two choices: First, install a Linux system in the virtual machine of your computer, such as Ubuntu/CentOS, etc., all of which can be downloaded without money; Second, pay for a Linux virtual machine from cloud providers like Alibaba Cloud. The second one is recommended. Generally, after formal employment, the company will assign you a development machine or a test machine, give you an account and password, and you can log in remotely by yourself.\nTopic: What are the common linux commands?\nLog in After joining the company, there should exist username and password for you, and once you have them, you can directly log in. Run ssh name@server and then enter the password to login.\nDirectory Operations Create directory mkdir \u0026lt;directory name\u0026gt;\nDelete directory rm \u0026lt;directory name\u0026gt;\nLocate directory cd \u0026lt;directory name\u0026gt;\nView directory file ls ll\nModify directory name mv \u0026lt;directory name\u0026gt; \u0026lt;new directory name\u0026gt;\nCopy directory cp \u0026lt;directory name\u0026gt; \u0026lt;new directory name\u0026gt;\nFile Operations Create file touch \u0026lt;file name\u0026gt; vi \u0026lt;file name\u0026gt;\nDelete file rm \u0026lt;file name\u0026gt;\nModify file name mv \u0026lt;file name\u0026gt; \u0026lt;new file name\u0026gt;\nCopy file cp \u0026lt;file name\u0026gt; \u0026lt;new file name\u0026gt;\nFile Content Operations View file cat \u0026lt;file name\u0026gt; head \u0026lt;file name\u0026gt; tail \u0026lt;file name\u0026gt;\nEdit file content vi \u0026lt;file name\u0026gt;\nFind file content grep 'keyword' \u0026lt;file name\u0026gt;\nFront-end Build Tools Build tools are an indispensable part of front-end engineering, very important, but have their own speciality in interviews — The interviewer will ask you about the role and purpose of build tools to inquire about your understanding of build tools. As long as you know these, you will not be asked for details. Because, in practice, the real opportunity for writing build tool configuration files is very rare, a project is configured once, and then rarely changed. Moreover, if it’s a widely used framework (such as React, Vue, etc.), there will be ready-made scaffolding tools, one-click creation of a development environment, without manual configuration.\nTopic: Why should front-end use build tools? What problems does it solve?\nWhat is a Build Tool “Build” can also be understood as “compile”, which is the process of converting development environment code into runtime environment code. Code in the development environment is for better reading, while code in the runtime environment is for faster execution. Their purposes are different, so the form of code is also different. For example, the JS code written in the development environment needs to be obfuscated and compressed before it can run online, because the code is smaller in this way and it has no impact on code execution. Let’s summarize a few cases where build tools are needed:\nProcessing Modularity: The modularity syntax of CSS and JS cannot be compatible with the browser at present. Therefore, the established modularity syntax can be used in the development environment, but the modularity syntax needs to be compiled into a form recognizable to the browser by the build tool. For example, use webpack, Rollup, etc. to handle JS modularity.\nCompile Syntax: Less and Sass are used to write CSS, and ES6 and TypeScript are used to write JS, etc. These standards can’t be compatible with the browser at present, therefore need to be compiled by build tools, such as using Babel to compile ES6 syntax.\nCode Compression: Obfuscate and compress CSS and JS code to make the code smaller and faster to load.\nIntroduction to Build Tools The earliest popularly used build tool was Grunt, soon chased up by Gulp. Gulp is accepted by people because of its simple configuration and efficient performance, and is also one of the build tools recommended by the author. If you are doing some simple JS development, you can consider using it.\nIf your project is more complicated and developed by many people, then you need to master the artifact of the build tool field — webpack. However, the artifact also has a drawback, which is that the learning cost is relatively high, and you need to take time to study it carefully, not something that can be finished in a few words. Next, we will demonstrate the simplest use of webpack, and for a comprehensive study, you still need to carefully refer to relevant documents, or refer to the tutorial that specifically explains webpack.\nWebpack Demonstration Next, we will demonstrate the two basic functions of webpack to handle modularity and obfuscate and compress code.\nFirst, you need to install Node.js, if it is not installed, go to the Node.js official website to download and install. After installation, run the following commands to verify that the installation was successful.\n1 2 node -v npm -v Then, create a new directory, enter the directory, runnpm init, and enter the name, version, description, etc. according to the prompts. After completion, a package.json file appears in the directory, which is a JSON file.\nNext, install wepback, run npm i --save-dev webpack, and wait a few minutes if the network is slow.\nNext, write the source code. Create a src folder in the directory, and create two files app.js and dt.js in it, the contents are:\n1 2 3 4 5 6 7 8 9 // dt.js content module.exports = { getDateNow: function () { return Date.now() } } // app.js content var dt = require(\u0026#39;./dt.js\u0026#39;) alert(dt.getDateNow()) Then, go back to the upper directory, create a newindex.htmlfile (this file andsrcare on the same level), and the content is\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;test\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#39;./dist/bundle.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Then, write webpack configuration file, create a newwebpack.config.js, the content is\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const path = require(\u0026#39;path\u0026#39;); const webpack = require(\u0026#39;webpack\u0026#39;); module.exports = { context: path.resolve(__dirname, \u0026#39;./src\u0026#39;), entry: { app: \u0026#39;./app.js\u0026#39;, }, output: { path: path.resolve(__dirname, \u0026#39;./dist\u0026#39;), filename: \u0026#39;bundle.js\u0026#39;, }, plugins: [ new webpack.optimize.UglifyJsPlugin({ compress: { //supresses warnings, usually from module minification warnings: false } }), ] }; To sum up, the current project’s file directory is:\n1 2 3 4 5 6 src +-- app.js +-- dt.js index.html package.json webpack.config.js Next, openpackage.json, and then modify the content ofscriptsto:\n1 2 3 \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;webpack\u0026#34; } Runnpm startin the command line, you can see the results of the compilation, finally openindex.htmlin the browser, and the value ofDate.now()will pop up.\nSummary In the end, it is emphasized again that deeply understanding the value of the existence of build tools is more meaningful than knowing more configuration code, especially in terms of dealing with interviews.\nDebugging Method The most tested area of debugging methods is how to capture packets.\nTopic: How to capture data? How to use tools to configure proxy?\nFor PC-side web pages, we can use the built-in developer tools of Chrome, Firefox and other browsers to view all network requests of web pages to help troubleshoot bugs. This operation of listening and viewing network requests is called packet capture.\nFor mobile packet capture tools, Charles is recommended under Mac system. First download and install, open. Windows system recommends Fiddler, download, install, and open. The usage of the two is basically the same. The following is an introduction to Charles.\nNext, connect the computer installed with Charles and the mobile phone to be captured to the same network (generally the internal network provided by the company, built by professional network engineers), to ensure that the IP section is the same. Then, set the network proxy of the mobile phone (how to set the network proxy for each different mobile phone, there are idiot-style tutorials on the Internet), the proxy IP is the IP of the computer, the proxy port is 8888. Then, Charles may have a dialog box prompting whether to allow connection to the proxy, select \u0026ldquo;Allow\u0026rdquo; here. In this way, the web pages visited by the mobile phone or the requests linked to the network, Charles can listen to.\nIn the development process, packet capturing tools are often used for proxy. They can proxy the online address to the test environment, both Charles and Fiddler can achieve this function. Let’s take Charles as an example, click on the Tools menu in the menu bar, then click on Map Remote in the submenu, a configuration box will pop up. First of all, tick the Enable Map Remote checkbox, then click on the Add button, add a proxy item. For example, if you want to proxy the online address https://www.aaa.com/api/getuser?name=xxx to the test address http://168.1.1.100:8080/api/getuser?name=xxx.\n","date":"2024-01-31T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/knowledge-points-analysis-on-development-environment/","title":"Knowledge Points Analysis on Development Environment"},{"content":"As the pages written by Web front-end engineers have to run in the browser, many browser-related interview questions will appear in the interview.\nKnowledge Consolidation Browser loading and rendering process\nPerformance optimization\nWeb security\nThis section will start with the browser’s loading process, then introduce how to optimize performance, and finally introduce common security issues and precautions in Web development.\nLoading Pages and Rendering Process The loading process and rendering process can be divided into two parts. When answering questions, the key is to grasp the core points, cover all the points, with a little analysis, and be concise without dragging.\nTopic: The process of browser loading and rendering pages\nLoading Process The points are as follows:\nThe browser gets the IP address of the domain name according to the DNS server\nSend an HTTP request to the machine of this IP\nThe server receives, processes, and returns the HTTP request\nThe browser gets the returned content\nIn fact, it is a bunch of HMTL formatted strings, because only the HTML format can be correctly parsed by the browser, which is required by W3C standards. Next is the browser’s rendering process.\nRendering Process The points are as follows:\nGenerate the DOM tree based on the HTML structure\nGenerate CSSOM based on CSS\nIntegrate DOM and CSSOM to form the RenderTree\nStart rendering and displaying based on RenderTree\nWhen you encounter a \u0026lt;script\u0026gt;, you will execute and block rendering\nIn the previous paragraph, the browser has already obtained the HTML content returned from the server and starts parsing and rendering. The content initially obtained was simply a bunch of strings, they must first be structured into basic data structures that computers are good at processing, hence HTML strings are transformed to a DOM tree — tree is one of the most basic data structures.\nDuring the parsing process, if you encounter tags like \u0026lt;link href=\u0026quot;...\u0026quot;\u0026gt; and \u0026lt;script src=\u0026quot;...\u0026quot;\u0026gt; that load CSS and JS externally, the browser will download them asynchronously, the download process is the same as when downloading HTML content above. However, the downloaded strings are in CSS or JS format here.\nThe browser generates CSSOM from CSS, then integrates DOM and CSSOM to form the RenderTree, and then it can start rendering based on RenderTree. Think about it, if you have the DOM structure and styles, you can meet the rendering conditions at this time. In addition, this can also explain a question. Why should CSS be placed in the HTML header? This will allow the browser to get CSS as early as possible to generate CSSOM, and then generate the final RenderTree in one go after parsing HTML, rendering only once. If CSS is placed at the bottom of HTML, rendering stutter may occur, affecting performance and experience.\nFinally, during the rendering process, if \u0026lt;script\u0026gt; is encountered, it will stop rendering and execute the JS code. Because browser rendering and JS execution share a thread, and there must be single-threaded operation here, multithreading can cause rendering DOM conflicts. After the content of \u0026lt;script\u0026gt; is executed, the browser continues to render. Finally, consider another question. Why should JS be placed at the bottom of HTML? Placing JS at the bottom can ensure that the browser prioritizes the rendering of existing HTML content, allowing users to see the content first, providing a good experience. Additionally, if JS execution involves DOM operations, it must wait for DOM parsing to complete. When JS is executed at the bottom, HTML is definitely parsed into a DOM structure. If JS is placed at the top of HTML, when JS is executed, HTML may not have time to be converted into a DOM structure, which may cause an error.\nPerformance Optimization Performance optimization is a common interview topic. This kind of topic has a lot of extensibility, can expand many small details, and poses a great challenge to personal technical vision and business capabilities. In this part, I will focus on the commonly used performance optimization solutions.\nTopic: Summarize the solutions for front-end performance optimization\nOptimization Principles and Directions The principle of performance optimization is to use a better user experience as the standard, specifically to achieve the following goals:\nMore use of memory, cache or other methods\nReduce CPU and GPU calculations for faster display\nThere are two directions for optimization:\nReduce page size, improve network loading\nOptimize page rendering\nReduce Page Size, Improve Network Loading Compression and merger of static resources (JS code compression and merger, CSS code compression and merger, sprite images)\nStatic resource caching (adding MD5 to resource names)\nUse CDN to make resource loading faster\nOptimize Page Rendering Put CSS at the front, JS at the back\nLazy loading (image lazy loading, dropdown for more loading)\nReduce DOM queries, cache DOM queries\nReduce DOM operations, try to combine multiple operations to execute (use DocumentFragment)\nEvent throttling\nExecute operations as early as possible (DOMContentLoaded)\nUse SSR backend rendering, directly output the data to HTML, reduce the time for the browser to use JS templates to render page HTML\nDetailed Explanation ####Compression and merger of static resources\nIf not merged, each will go through the request process described before\n1 2 3 \u0026lt;script src=\u0026#34;a.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;b.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;c.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; If merged, only one request process is walked through\n1 \u0026lt;script src=\u0026#34;abc.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Static Resource Caching Control cache through link name\n1 \u0026lt;script src=\u0026#34;abc_1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Only when the content changes will the link name change\n1 \u0026lt;script src=\u0026#34;abc_2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; This name doesn’t need to be manually changed, the front-end build tool can add an MD5 suffix to the file name based on the file content.\nUse CDN to make resource loading faster The CDN will provide a professional loading optimization solution, and static resources should be placed on the CDN as much as possible. For example:\n1 \u0026lt;script src=\u0026#34;https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Use SSR backend rendering Directly output HTML content in one time, and do not need to load data and render again through Ajax after the page is completely rendered. For example, using smarty, Vue SSR, etc.\nCSS comes first, JS comes later It has been mentioned when describing the browser rendering process above, so I won’t go into details here.\nLazy Loading Initially assign a universal preview image to the src, and then dynamically assign it to the official image when scrolling down. For example, preview.png is a preview image, which is relatively small, loads quickly, and many images share this preview.png, which can be loaded only once. When the page scrolls down and the image is displayed, it is replaced with the value of src as data-realsrc.\n1 \u0026lt;img src=\u0026#34;preview.png\u0026#34; data-realsrc=\u0026#34;abc.png\u0026#34;/\u0026gt; In addition, why should data- be used to start property values here? —— All custom properties in HTML should start with data-, because the browser will ignore properties that start with data- when rendering, which can improve rendering performance.\nCache DOM queries Compare two code blocks:\n1 2 3 4 5 var pList = document.getElementsByTagName(\u0026#39;p\u0026#39;) // Query a DOM element once and cache it in pList var i for (i = 0; i \u0026lt; pList.length; i++) { ... } javascript\n1 2 3 4 var i for (i = 0; i \u0026lt; document.getElementsByTagName(\u0026#39;p\u0026#39;).length; i++) { // Each loop queries the DOM, which consumes performance } In summary: both querying and modifying the DOM are performance-consuming operations, so try to reduce them as much as possible.\nMerge DOM Insertions DOM operations are highly performance-consuming, so when inserting multiple tags, first insert the Fragment and then insert into the DOM uniformly.\n1 2 3 4 5 6 7 8 9 10 var listNode = document.getElementById(\u0026#39;list\u0026#39;) // To insert 10 li tags var frag = document.createDocumentFragment(); var x, li; for(x = 0; x \u0026lt; 10; x++) { li = document.createElement(\u0026#34;li\u0026#34;); li.innerHTML = \u0026#34;List item \u0026#34; + x; frag.appendChild(li); // First put in frag, then insert into DOM structure at once. } listNode.appendChild(frag); Event Throttling For example, you need to trigger a change event when the text changes, which is monitored through keyup. Use throttling.\n1 2 3 4 5 6 7 8 9 10 var textarea = document.getElementById(\u0026#39;text\u0026#39;) var timeoutId textarea.addEventListener(\u0026#39;keyup\u0026#39;, function () { if (timeoutId) { clearTimeout(timeoutId) } timeoutId = setTimeout(function () { // Trigger change event }, 100) }) Execute Operations as Early as Possible 1 2 3 4 5 6 window.addEventListener(\u0026#39;load\u0026#39;, function () { // All page resources must be loaded before executing, including images, videos, etc. }) document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { // It can be executed once the DOM is rendered, at this time, images and videos may not have been loaded yet. }) How to Do Performance Optimization? The above are individual points of performance optimization. When implementing a performance optimization project, it should be promoted in the following steps:\nEstablish a performance data collection platform, baseline the current performance data, and record the time consumption of the entire page opening process through performance points.\nAnalyze the reasons for the long time period, find the optimization points, and determine the optimization goals.\nStart optimizing.\nRecord the optimization effect through the data collection platform.\nContinually adjust optimization points and expected targets, and cycle stages 2 to 4.\nPerformance optimization is a long-term task, not a one-time success. It should be done gradually based on the principle of base lining first, analyzing carefully, and optimizing last.\nWeb Security Topic: What are the common security issues in the front end?\nThere are two major safety concerns in web front-end development. If you can answer the two questions below, you should be able to answer this question. But before beginning, let’s talk about a very simple attack method — SQL Injection.\nWhen I was in school, I knew about an attack method called “SQL Injection”. For example, when making a login interface for a system, entering a username and password, and submitting, the backend directly gets the data and splices the SQL statement to query the database. If malicious SQL assembly is performed at the time of input, the final generated SQL will be problematic. But now, somewhat large systems won’t do this. From submitting login information to finally getting authorization, there has to be multiple layers of validation. Therefore, SQL injections only happen in smaller, lower-end systems.\nXSS (Cross Site Scripting) This is the most common attack method in the front end, and many large websites (like Facebook) have been attacked by XSS.\nFor example, I post a normal article on a blogging website, inputting Chinese, English, and pictures, and there’s no problem. But if I write in malicious JS scripts, like getting document.cookie and then transmitting it to my own server, then every time my blog post is viewed, this script will execute and secretly pass the information in the visitor\u0026rsquo;s cookies to my server.\nIn principle, the hacker inputs a specific JS code covertly in some way (publishing an article, commenting, etc.). Then, when other people read this article or comment, the JS code that was injected before executes. Once the JS code executes, it cannot be controlled, because it has the same permissions as the original JS on the web page, such as getting server-side data, getting cookies, etc. And that’s when the attack happens.\nHarm of XSS The harm of XSS is quite significant, and if a page can execute other’s unsafe JS code freely, it could cause the page to become chaotic or even lose functionality at a minimum, and at its worst, cause the user’s information to be exposed.\nFor example, in early years, social networking sites often had XSS worms. Through posting articles with inserted JS scripts, users who visit the infected articles would automatically republish new articles. These articles would enter each user’s article list through the recommendation system, leading to widespread infection.\nAnother example is using methods to get cookies, transmitting the cookies to the invader’s server. The invader can then simulate the cookies to log in to the website and alter the user’s information.\nPrevention of XSS So how do we prevent XSS attacks? — — The most fundamental way is to validate and replace the content input by the user. The characters that need to be replaced are:\n1 2 3 4 5 6 \u0026amp; replaced with: \u0026amp;amp; \u0026lt; replaced with: \u0026amp;lt; \u0026gt; replaced with: \u0026amp;gt; \u0026#34; replaced with: \u0026amp;quot; \u0026#39; replaced with: \u0026amp;#x27; / replaced with: \u0026amp;#x2f; After replacing these characters, the attack code input by the hacker will become invalid, and the XSS attack will not occur easily.\nIn addition, you can have stronger control over cookies, such as adding http-only restrictions to sensitive cookies, preventing JS from getting the contents of cookies.\nCSRF (Cross-site request forgery) CSRF borrows the permission of the current operator to secretly complete an operation, and doesn’t take the user’s information.\nFor example, on a payment website, the interface for transferring money to others is http://buy.com/pay?touid=999\u0026money=100, and there\u0026rsquo;s no password or token verification when using this interface, only simply visiting the webpage will allow for a direct transfer for others. A user has already logged onto http://buy.com. During the selection of goods, he suddenly receives an email, and this email has a line of code \u0026lt;img src=\u0026quot;http://buy.com/pay?touid=999\u0026amp;money=100\u0026quot;/\u0026gt;. After he visits the email, the purchase has actually been completed.\nCSRF actually takes advantage of a feature of cookies. As we know, after logging into http://buy.com, the cookie will have the login marker, and now when you request http://buy.com/pay?touid=999\u0026money=100, it will bring the cookie, which informs the server end that you\u0026rsquo;ve logged in. However, if you request another domain\u0026rsquo;s API, such as http://abc.com/api on http://buy.com, it will not bring the cookie, this is restricted by the browser\u0026rsquo;s same-origin policy. But —— now, when you\u0026rsquo;re on another domain\u0026rsquo;s page and you request http://buy.com/pay?touid=999\u0026money=100, it will bring buy.com\u0026rsquo;s cookie. This is the theoretical foundation for a CSRF attack.\nThe prevention of CSRF is adding permission verification at various levels, such as in current online shopping websites, any transaction involving money will definitely require a password or a fingerprint. Apart from this, sensitive interfaces using POST requests rather than GET is also very important.\n","date":"2024-01-30T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/browser-related-knowledge/","title":"Browser Related Knowledge"},{"content":"We know from the composition of von Neumann machines that data storage and computation are the main tasks of a computer. Program = Data Structure + Algorithm, thus, engineers in computer-related fields must master certain knowledge of data structures and algorithms.\nKnowledge Summary Common Data Structures\nStacks, Queues, Linked Lists\nSets, Dictionaries, Hash Sets\nCommon Algorithms\nRecursion\nSorting\nEnumeration\nAlgorithm Complexity Analysis\nAlgorithmic Thinking\nDivide and Conquer\nGreedy\nDynamic Programming\nAdvanced Data Structure\nTrees, Graphs\nDepth-First and Breadth-First Searches\nThis section will guide everyone to quickly review data structures and algorithms, focusing on frequently tested algorithms and data structures used in front-end development.\nData Structure Data structure determines the spatial and temporal efficiency of data storage. The requirements of data write and read speed also decide what type of data structure should be chosen.\nDepending on the different needs of the scene, we design different data structures, such as:\nData structures with more reads: Try to increase the efficiency of data reads, such as IP databases, which only need to be written once, and the rest are all reads.\nData structures with more reads and writes: Balance both needs, such as the LRU Cache algorithm.\nAlgorithm is the way to process the data, a determined algorithm can improve the efficiency of data processing. For example, binary search in an ordered array is much faster than ordinary sequential search, especially when handling large amounts of data.\nData structures and algorithms are universal skills in program development, so they may be encountered in any interview. With AI, big data, mini-games becoming more popular in recent years, Web developers inevitably have encounters with data structures and algorithms, and there will be more and more algorithmic problems in interviews. Studying data structures and algorithms also helps us to broaden our thinking and break through skill bottlenecks.\nFrequently seen Data Structure problems in front-end development Now, let’s summarize the common data structures in front-end development:\nSimple Data Structures (must be understood and mastered)\nOrdered Data Structures: Stacks, Queues, Linked Lists, ordered data structures save space (storage space is small)\nUnordered Data Structures: Sets, Dictionaries, Hash Tables, unordered data structures save time (read time is fast)\nComplex Data Structures\nTrees, Heaps\nGraphs\nFor simple data structures, they correspond to arrays (Array) and objects (Object) in ES. You can think about it, the storage of arrays is ordered, while that of objects is unordered, but if I want to find a value key in the object, it is returned immediately, whereas there is a search process for arrays.\nHere, I will introduce the design of data structures through a real interview question.\nTopic: Implement an event class Event using ECMAScript (JS) code, which includes the following features: binding events, unbinding events, and dispatching events.\nIn slightly more complex pages, such as those developed with components, the same page is developed by two or three people. In order to maintain the independence of the components and reduce the coupling between the components, we often use the ‘subscribe and publish model’. That is, the communication between components is done by listening for events and dispatching them, rather than directly calling the methods of each other. This is the Event class required by the subject.\nThe essence of this question is the data design of corresponding callback functions for each event type. In order to implement event binding, we need a _cache object to record which events are bound. When an event occurs, we need to get event callbacks from _cache and execute them one by one. Generally, event dispatching (read) happens more often than event binding (write) in a webpage. Therefore, the data structure we design should be able to find the corresponding event callback functions faster when an event occurs, and then execute them.\nWith this in mind, I simply wrote a sample code implementation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Event { constructor() { // The data structure that stores the events // Using a dictionary (object) for swift access this._cache = {}; } // Bind on(type, callback) { // For easy searching and to save space, // We put the same type of events in an array // The array here is a queue, adhering to the concept first in first out // That is, the earlier bound event would be triggered first let fns = (this._cache[type] = this._cache[type] || []); if (fns.indexOf(callback) === -1) { fns.push(callback); } return this; } // Trigger trigger(type, data) { let fns = this._cache[type]; if (Array.isArray(fns)) { fns.forEach((fn) =\u0026gt; { fn(data); }); } return this; } // Unbind off(type, callback) { let fns = this._cache[type]; if (Array.isArray(fns)) { if (callback) { let index = fns.indexOf(callback); if (index !== -1) { fns.splice(index, 1); } } else { // Clear all fns.length = 0; } } return this; } } // Test case const event = new Event(); event.on(\u0026#39;test\u0026#39;, (a) =\u0026gt; { console.log(a); }); event.trigger(\u0026#39;test\u0026#39;, \u0026#39;hello world\u0026#39;); event.off(\u0026#39;test\u0026#39;); event.trigger(\u0026#39;test\u0026#39;, \u0026#39;hello world\u0026#39;); For advanced data structures like trees, heaps, and graphs, front-end usually don’t ask too many about them, but their search methods are often asked, which I will introduce later. For advanced data, you should accumulate more and understand them well in your regular times. For example, once you understand that what a heap is, you will solve algorithm problems like “find the maximum K numbers” encountered in the interview.\nThe efficiency of algorithms is measured through algorithmic complexity The quality of an algorithm can be measured by its complexity, which includes time complexity and space complexity. Time complexity is the focus of the interview because of its characteristics such as easy estimation and evaluation. Space complexity is not often asked about in interviews.\nThe common time complexities include:\nConstant Order O(1)\nLogarithmic Order O(logN)\nLinear Order O(n)\nLinear Logarithmic Order O(nlogN)\nSquared Order O(n^2)\nCubic Order O(n^3)\nk-th Power Order O(n^k)\nExponential Order O(2^n)\nWith the increasing size of the problem n, the time complexity increases correspondingly, and the execution efficiency of the algorithm decreases.\nGenerally, when analyzing the complexity of an algorithm, we follow these tips:\nSee how many loops there are. Generally speaking, one loop is O(n), two loops will be O(n^2), and so on.\nIf there is a binary operation, then it is O(logN).\nKeep the highest term and discard the constant term.\nTopic: Analyze the algorithmic complexity of the following code (for clarity, I have added a code analysis in the comments)\n1 2 3 4 5 let i =0; // statement is executed once while (i \u0026lt; n) { // statement is executed n times console.log(`Current i is ${i}`); //statement is executed n times i++; // statement is executed n times } According to the comments, we can deduce that the algorithmic complexity is 1 + n + n + n = 1 + 3n, discarding the constant term, it is O(n).\n1 2 3 4 let number = 1; // statement is executed once while (number \u0026lt; n) { // statement is executed logN times number *= 2; // statement is executed logN times } The exit condition for the loop in the above code is number\u0026lt;n, and number grows at a speed of 2^n in the body of the loop. So, in reality, the loop code executes logN times, so the complexity is: 1 + 2 * logN = O(logN)\n1 2 3 4 5 for (let i = 0; i \u0026lt; n; i++) {// the statement is executed n times for (let j = 0; j \u0026lt; n; j++) {// the statement is executed n^2 times console.log(\u0026#39;I am here!\u0026#39;); // the statement is executed n^2 times } } The complexity of the code with two nested for loops is easily deduced to be O(n^2).\nBasic Algorithms Everyone Should Master Enumeration and recursion are the simplest algorithms and also the basis of complex algorithms, which everyone should master! Enumeration is relatively simple, so we will focus more on elaborating recursion.\nRecursion consists of two parts:\nThe body of recursion, which is the code that needs to be iteratively solved.\nThe breakout condition of recursion: recursion cannot go on indefinitely, it must exit after meeting a certain condition.\nThere is a classic interview question about recursion:\nTopic: Implement deep copy of JavaScript objects.\nWhat is deep copy?\nDeep copy means that all reference structures of the data are duplicated when copying data. Simply put, it is the duplication of reference types of data rather than copying of their relationship only.\nAnalyze how to make a “deep copy”:\nAssume that the method for deep copying has been completed, named deepClone\nTo copy a piece of data, we certainly need to iterate its properties. If a property of this object is still an object, continue using this method repeatedly.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function deepClone(o1, o2) { for (let k in o2) { if (typeof o2[k] === \u0026#39;object\u0026#39;) { o1[k] = {}; deepClone(o1[k], o2[k]); } else { o1[k] = o2[k]; } } } // Test case let obj = { a: 1, b: [1, 2, 3], c: {} }; let emptyObj = Object.create(null); deepClone(emptyObj, obj); console.log(emptyObj.a == obj.a); console.log(emptyObj.b == obj.b); Recursion can easily lead to stack overflow, which can be solved by tail call. V8 engine of Chrome has optimized tail call, and we should also take note of tail call syntax when writing code. The problem of stack overflow in recursion can be replaced by enumeration, which is to replace recursion with for or while loop.\nWhen we use recursion, we need to optimize it, as demonstrated in the following example.\nTopic: Find the nth term in the Fibonacci sequence (rabbit sequence) 1,1,2,3,5,8,13,21,34,55,89…\nIn the following code, the count records the number of recursions, and we can compare the values of count used in two different codes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 let count = 0; function fn(n) { let cache = {}; function _fn(n) { if (cache[n]) { return cache[n]; } count++; if (n == 1 || n == 2) { return 1; } let prev = _fn(n - 1); cache[n - 1] = prev; let next = _fn(n - 2); cache[n - 2] = next; return prev + next; } return _fn(n); } let count2 = 0; function fn2(n) { count2++; if (n == 1 || n == 2) { return 1; } return fn2(n - 1) + fn2(n - 2); } console.log(fn(20), count); // 6765 20 console.log(fn2(20), count2); // 6765 13529 Quick Sort and Binary Search The probability of a sorting or searching question appearing in a front-end interview is relatively small because the JS engine has optimized these common operations. You might find it interesting that the sorting method you strenuously write may not be as fast and concise as Array.sort. Therefore, mastering quick sort and binary search is enough.\nBoth quick sort and binary search are based on a kind of algorithmic thinking called “divide and conquer”, which achieves O(logN) (logarithmic level, a level lower than O(n) linear complexity) complexity by classifying and processing data, constantly decreasing the order of magnitude. The quick sort core is the O(logN) of the binary method, and the actual complexity is O(N*logN).\nQuick Sort The approximate process of quick sort is as follows:\nRandomly select a number A from the array as the benchmark.\nCompare other numbers with this number, put smaller numbers on its left and larger numbers on its right.\nAfter one loop, the numbers on the left side of A are smaller than A and the numbers on the right side of A are larger than A.\nAt this point, recursively sort the numbers to the left and right of A in the above manner.\nThe specific code is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // Partition operation function function partition(array, left, right) { // Use index to get the middle value instead of splice const pivot = array[Math.floor((right + left) / 2)]; let i = left; let j = right; while (i \u0026lt;= j) { while (compare(array[i], pivot) === -1) { i++; } while (compare(array[j], pivot) === 1) { j--; } if (i \u0026lt;= j) { swap(array, i, j); i++; j--; } } return i; } // Comparison function function compare(a, b) { if (a === b) { return 0; } return a \u0026lt; b ? -1 : 1; } function quick(array, left, right) { let index; if (array.length \u0026gt; 1) { index = partition(array, left, right); if (left \u0026lt; index - 1) { quick(array, left, index - 1); } if (index \u0026lt; right) { quick(array, index, right); } } return array; } function quickSort(array) { return quick(array, 0, array.length - 1); } // In-place swapping function, instead of using a temporary array. function swap(array, a, b) { [array[a], array[b]] = [array[b], array[a]]; } const Arr = [85, 24, 63, 45, 17, 31, 96, 50]; console.log(quickSort(Arr)); Binary Search Binary search is mainly used to solve problems like “finding a specific number from a group of ordered numbers”. Regardless of whether these numbers are in a one-dimensional or multi-dimensional array, as long as they are ordered, binary search can be used for optimization.\nBinary search is an algorithm implementing the “divide and conquer” strategy. The rough process is as follows:\nCompare the number A in the middle of the array with the number to be found.\nGiven the array is sorted, a) if A is higher, the target number should be found in the first half, b) if A is lower, it should be searched in the second half of the array.\nIn this way, keep searching while reducing the scale (discard half of the data), until the search across the array is completed.\nTopic: In a two-dimensional array, each row is sorted in ascending order from left to right, and each column is sorted in ascending order from top to bottom. Please complete a function, input such a two-dimensional array and an integer, and determine whether the array contains this number.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function Find(target, array) { let i = 0; let j = array[i].length - 1; while (i \u0026lt; array.length \u0026amp;\u0026amp; j \u0026gt;= 0) { if (array[i][j] \u0026lt; target) { i++; } else if (array[i][j] \u0026gt; target) { j--; } else { return true; } } return false; } //Test case console.log(Find(10, [ [1, 2, 3, 4], [5, 9, 10, 11], [13, 20, 21, 23] ]) ); Additionally, the author has encountered the following question in an interview:\nTopic: Now I have a positive integer in the range from 1 to 1000, and you need to guess what this number is. You can only ask one question: is it too big or too small? How many times do I need to guess to get it right?\nWhen got this question, the author thought of a “guess the price” shopping program on television. If you can guess the price correctly within a specified time, you can take the goods home. So the question is to let the interviewer constantly tell me whether the number I guess is larger or smaller than this number. This is binary search!\nHow many times to guess? Actually, this question is a problem of the time complexity of the binary search algorithm. The time complexity of binary search is O(logN), so finding the solution of log1000 is the number of guesses. We know that 2^10=1024, so we can quickly estimate that log1000 is about 10. I could find the number by asking no more than 10 times!\nWhat to do if you encounter an algorithmic problem you can’t solve in an interview\nDuring an interview, when you encounter algorithmic problems, you should speculate on the interviewer’s intentions, listen carefully to the keywords, such as: searching an ordered sequence, the required algorithm complexity is O(logN), which generally means using the binary search concept.\nGenerally, the solution to the algorithm problem is divided into the following four steps:\nFirst, reduce the order of magnitude and come up with a problem-solving process with solvable situations (data).\nWrite a program according to the problem-solving steps, and prioritize the handling of special conditions, such as a problem with a large array, if the array length is of two numbers.\nCheck the correctness of the program.\nCan it be optimized (from shallow to deep)? If possible, you can deliberately reserve optimization points to highlight personal technical abilities.\nRegular Expression Problem Solving Many algorithm problems are simpler to answer by utilising features of ES syntax, such as regular expressions. The author will summarise some knowledge about regular expressions through a few real questions.\nTopic: The first character that appears only once in a string\nPlease implement a function to find the first character that appears only once in a character stream. For example, when the first two characters “go” is read from the character stream, the first character that appears only once is “g”. When the first six characters “google” is read from this character stream, the first character that appears only once is “l”.\nIf you use pure algorithm to answer this question, you need to traverse each string, count the number of times each character appears, and then find the first character that appears only once according to the order of the string. The whole process is quite cumbersome, but with regular expression, things get a lot simpler.\n1 2 3 4 5 6 7 8 9 10 function find(str){ for (var i = 0; i \u0026lt; str.length; i++) { let char = str[i] let reg = new RegExp(char, \u0026#39;g\u0026#39;); let l = str.match(reg).length if(l===1){ return char } } } Of course, using indexOf/lastIndexOf is also a clever way. Now let\u0026rsquo;s look at a thousand bit problem.\nTopic: Change 1234567 to 1,234,567, i.e., mark it in thousands\nThis problem can be directly solved with algorithms. If a candidate uses regular expressions to answer, thus actively showcasing his other abilities, the interviewer generally won’t make it too difficult for him, even if the answer is not derived from an algorithm. This problem can be solved with the “zero-width assertion” (?=exp) of regular expression, which asserts that the position where it appears can match the expression exp. The feature of the thousandth bit is that the number of numbers after the first comma is a multiple of 3, regular expression: /(\\d{3})+$/; there can be 1~3 numbers at most before the first comma, regular expression: /\\d{1,3}/. Together they make up / \\d{1,3}(\\d{3})+$/, the separator needs to be added from front to back.\n1 2 3 4 5 6 7 8 9 10 11 12 function exchange(num) { num += \u0026#39;\u0026#39;; //Convert to string if (num.length \u0026lt;= 3) { return num; } num = num.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (v) =\u0026gt; { console.log(v) return v + \u0026#39;,\u0026#39;; }); return num; } console.log(exchange(1234567)); Of course, most of the above mentionings are clever ways to answer algorithmic questions. The following problem is a pure regular expression examination. The author has encountered it in an interview and will mention it here.\nTopic: please write out the execution result of the following code\n1 2 3 4 5 var str = \u0026#39;google\u0026#39;; var reg = /o/g; console.log(reg.test(str)) console.log(reg.test(str)) console.log(reg.test(str)) After executing the code, you will find that the last one is not true, but false. This is because reg has a g, the global property. In this case, lastIndex comes into play. If you look at the execution results of the following code, you will understand.\n1 2 3 console.log(reg.test(str), reg.lastIndex) console.log(reg.test(str), reg.lastIndex) console.log(reg.test(str), reg.lastIndex) In actual development, this error can also be committed. For example, to reduce the number of variable definitions, commonly used variables are defined in advance. In this way, when used, it’s easy to fall into a trap, like the following code:\n1 2 3 4 5 6 7 8 9 10 11 (function(){ const reg = /o/g; function isHasO(str){ // reg.lastIndex = 0; This can avoid the situation return reg.test(str) } var str = \u0026#39;google\u0026#39;; console.log(isHasO(str)) console.log(isHasO(str)) console.log(isHasO(str)) }()) Summary Regular expressions are a tool that candidates can use to showcase their problem-solving capabilities in a less conventional way during an interview. By flexibly applying regular expressions, you can solve certain problems more efficiently. However, be careful of the peculiarities of certain regular expressions, such as the ‘g’ flag, to avoid unexpected results.\nRegular expressions are a powerful tool, but also a complex one. Therefore, understanding key regular expression concepts and practicing typical use cases are useful ways to enhance your regular expression skills and apply them effectively in problem solving.\nConclusion Regular expressions are powerful in performing pattern matching and sophisticated text manipulations, and practice makes perfect. If you have any questions or better solutions, you are welcome to share and discuss. Let’s move forward together on the programming journey.\n","date":"2024-01-29T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/handle-algorithmic-questions-calmly/","title":"Handle Algorithmic Questions Calmly"},{"content":"Knowledge Organization Selector weight and priority\nBox model\nBox size calculation\nverlap calculation for margin\nFloat\nConcept of floating layout\nClearing floats\nPosition\nConcept of document flow\nPosition classification\nCharacteristics of fixed position\nCalculation method for absolute position\nFlex layout\nHow to achieve center alignment?\nUnderstanding semantics\nCSS3 animation\nRepaint and reflow\nSelector Weight and Priority CSS selectors are diverse, with varying weights and priorities. For an element, if there are multiple selectors, the priority needs to be calculated based on weight.\nThe weight is divided into four levels, respectively:\nRepresenting inline styles, such as style=\u0026ldquo;xxx\u0026rdquo;, the weight is 1000;\nRepresenting ID selectors, such as #content, the weight is 100;\nRepresenting class, pseudo-class and attribute selectors, such as .content, :hover, [attribute], the weight is 10;\nRepresenting element selectors and pseudo-element selectors, such as div, p, the weight is 1.\nIt should be noted that the universal selector (*), child selector (\u0026gt;) and adjacent sibling selector (+) are not in these four levels, so their weight is 0. The selector with a higher weight value also has a higher priority. The selectors with the same weight follow the priority rule of later definitions overriding earlier ones.\nBox Model What is a “Box”?\nBeginners to CSS will certainly learn about padding, border, and margin when they start learning about CSS basics. These three constitute a \u0026ldquo;box.\u0026rdquo; Just like the packages we receive, even though we only bought a small cell phone, what we receive is a big box. Because there\u0026rsquo;s a buffer layer between the phone\u0026rsquo;s white packaging box and the phone itself (the padding), the white box of the phone has a thickness, even though it\u0026rsquo;s very thin (the border), and between the box and the express box, there\u0026rsquo;s another layer of foam board (the margin). This is a typical box.\nAs shown above, the true content is the text, and the text is surrounded by a 10px padding, 5px border, and 10px margin. See the box?\nTopic: How to calculate the width of the box model?\nFixed Width Box 1 2 3 \u0026lt;div style=\u0026#34;padding:10px; border:5px solid blue; margin: 10px; width: 300px;\u0026#34;\u0026gt; The map() method is an iterative method.It calls aprovided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. \u0026lt;/div\u0026gt; As shown above, after getting the webpage effect, we can use the screenshot tool to measure the width of the text content. It turns out that the width of the text content is exactly 300px, which is the width we set.\nTherefore, in the box model, the width we set is the content width, not the entire box width. The entire box width is the sum of (content width + border width + padding width + margin width). Any change to one of the four will result in a change in the box width. This is not friendly for us.\nNo problem, this unfriendly thing has long been discovered by people and has been solved, we will mention it later.\nBox Filling the Parent Container By default, div is display:block, and its width will fill the entire parent container. As shown in the figure below:\n1 2 3 4 \u0026lt;div style=\u0026#34;padding:10px; border:5px solid blue; margin: 10px; width:300px;\u0026#34;\u0026gt; The map() method is an iterative method.It calls aprovided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. The map() method is an iterative method.It calls aprovided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. \u0026lt;/div\u0026gt; Don’t forget, this div is a box model, and the entire width of it includes (content width + border width + padding width + margin width), and the entire width fills the parent container.\nThe problem lies here. If the parent container width does not change, increasing the width value of one of the margin, border, or padding will result in a decrease in the content width. In extreme cases, if the content width is compressed so that it cannot be compressed anymore (for example, the width of one character), then the browser will force the parent container width to increase. This is not what we want to see.\nContent Wrapped Box In this case, it’s quite simple, the content width is calculated according to the content, and the box width will add ( padding width + border width + margin width) on the basis of the content width.\n1 2 3 \u0026lt;div style=\u0026#34;padding:10px; border:5px solid blue; margin: 10px; width:300px;\u0026#34;\u0026gt; The map() method is an iterative method.It calls aprovided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. \u0026lt;/div\u0026gt; 1 box-sizing: border-box As mentioned earlier, when setting the width for the box model, the result is only the width of the content, which is unreasonable. How to solve this problem? The answer is to specify the style for the box: ** box-sizing: border-box **.\n1 2 3 \u0026lt;div style=\u0026#34;padding:10px; border:5px solid blue; margin: 10px; width:300px; box-sizing:border-box;\u0026#34;\u0026gt; The map() method is an iterative method.It calls aprovided callbackFn function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. \u0026lt;/div\u0026gt; As shown in the figure above, after the div is set with box-sizing:border-box, the width of 300px is the width of the content + padding + border (excluding margin). In this way, it is more in line with our actual requirements. I suggest that when writing CSS for the system, the first style is:\n1 2 3 * { box-sizing:border-box; } The well-known Bootstrap also adds box-sizing:border-box to its * selector. Why shouldn\u0026rsquo;t we do it?\nVertical Margin Overlap Speaking of margin, I have to mention a characteristic of margin — vertical overlap. If the vertical margin of \u0026lt;p\u0026gt; is 16px, then what is the vertical distance between the two \u0026lt;p\u0026gt;? —— In theory, it should be 16 + 16 = 32px, but the answer is still 16px. Because the vertical margins overlap, if the two are not the same size, the larger one will \u0026ldquo;devour\u0026rdquo; the smaller one.\nfloat float is used more for webpage layout and is relatively simple to use. Here, some important points that need to be noted are summarized for your reference.\nMisunderstanding and Misuse The original intention of the float design is for text wrapping effect, that is, an image and a paragraph of text, after the image float:left, the text will wrap around the image.\n1 2 3 4 \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;image/1.png\u0026#34; style=\u0026#34;float:left\u0026#34;\u0026gt; A paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text, a paragraph of text. \u0026lt;/div\u0026gt; However, people later discovered that the webpage layout previously implemented by table can be achieved by combining float + div, so it was \u0026ldquo;misused\u0026rdquo; for webpage layout.\nQuestion: Why does float cause the parent element to collapse?\nDestructiveness The destructiveness of float — float destroys the original structure of the parent tag, resulting in the collapse of the parent tag. The fundamental reason for this phenomenon is that the elements set with float will deviate from the document flow. The real reason lies in the original intention of the float design to solve the problem of text wrapping around images. Remember this impact of float.\nWrapping Wrappping is another very important feature of float. You must be familiar with this feature when using float. Let’s start with a small example:\nAs shown above, the normal div if no width is set, it will fill up the whole screen, which was also mentioned in the previous box model section. But if you add float:left to the div, it suddenly becomes compact, the width changes, and it wraps the three words in the content - this is the wrapping. After the div is set to float, its width will automatically be adjusted to wrap the content width, not to span the entire parent container.\nNote that at this point the div does reflect the wrapping, but its display style has not changed and is still display: block.\nWhy should the float have the wrapping? Actually, the answer still has to be found from the original intention of float design, float is designed to realize the text wrap effect. Text wrapping around images is easy to understand, but what if you want the text to wrap around a div? If the div is not “wrapped” at this time, the wrap effect cannot be achieved.\nClear Space Float also has a feature that may not be very familiar to everyone — clearing space. As usual, let’s start with an example.\n1 2 3 4 5 6 \u0026lt;div style=\u0026#34;border: 2px solid blue; padding:3px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;image/1.png\u0026#34;/\u0026gt; \u0026lt;img src=\u0026#34;image/2.png\u0026#34;/\u0026gt; \u0026lt;img src=\u0026#34;image/3.png\u0026#34;/\u0026gt; \u0026lt;img src=\u0026#34;image/4.png\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; After adding float:left:\nIn the first picture above, there will normally be spaces in the middle of the img, because multiple img tags will have line breaks, and the browser recognizes line breaks as spaces, which is very normal. In the second picture, the img style is added with float:left, which makes there no spaces between the imgs, and the four imgs are close together.\nIf you haven’t paid attention to this feature before, now think about the programs you wrote before, there should be this feature. Why is float suitable for webpage layout (commonly known as “bricklaying”)? It’s because the webpage layout with float is seamless, even a fly can’t fly in.\nThe fundamental reason for the “clearing space” feature is that float will cause the node to deviate from the document flow structure. It is no longer part of the document flow structure, so its surrounding line breaks, spaces are all unrelated to it, and it tries to lean to one side as much as possible, this is the essence of clearing space.\nTopic: Write down clearfix by hand\nclearfix The style commonly used to clear the float effect is as follows, collectively referred to as clearfix code. All float element\u0026rsquo;s parent containers, in general, should add the \u0026lsquo;clearfix\u0026rsquo; class.\n1 2 3 4 5 6 7 8 9 10 11 12 .clearfix:after { content: \u0026#39;\u0026#39;; display: table; clear: both; } .clearfix { *zoom: 1; /* Compatible with older IE versions */ } \u0026lt;div class=\u0026#34;clearfix\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;image/1.png\u0026#34; style=\u0026#34;float: left\u0026#34;/\u0026gt; \u0026lt;img src=\u0026#34;image/2.png\u0026#34; style=\u0026#34;float: left\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; Conclusion The original intention of the float design is to solve the problem of text wrapping around pictures. Later, it was used for layout by mistake, so there are many unsuitable or attention points, which are basically mentioned in the article. If you are just starting to learn about floats, after learning the basic knowledge above, you should also do some exercises to practice — the classic “Holy Grail Layout” and “Double Wing Layout”. This will not be expanded here, there are plenty of resources online, such as Discussing Two Classic Layouts Often Tested in Interviews — Grail and Double Wing (the last two pictures in this article clearly show these two layouts).\nposition position is used for the positioning of webpage elements, and can set static/relative/absolute/fixed these values, among which static is the default value and does not need to be introduced.\nTopic: What is the difference between relative and absolute?\nrelative The relative positioning can be easily demonstrated with an example. For example, we write 4 \u0026lt;p\u0026gt;, and the result can be known without looking.\n1 2 3 4 \u0026lt;p\u0026gt;The first paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The second paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The third paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The fourth paragraph.\u0026lt;/p\u0026gt; Then we add position:relative to the third \u0026lt;p\u0026gt; and set the values of left and top, and see what changes this \u0026lt;p\u0026gt; will have.\n1 2 3 4 \u0026lt;p\u0026gt;The first paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The second paragraph.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;position:relative; top: 10px; left: 10px\u0026#34;\u0026gt;The third paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The fourth paragraph.\u0026lt;/p\u0026gt; In the picture above, there should be two pieces of information you should identify (I believe most people will ignore the second piece of information):\nThe third \u0026lt;p\u0026gt; has a position change, moving 10px to the right and 10px down;\nThe positions of the other three \u0026lt;p\u0026gt;s have not changed, which is also very important.\nIt can be seen that relative will cause relative changes in its own position and will not affect the position and size of other elements. This is one of the key points of relative. The second key point is that relative creates a new positioning context. The detailed introduction of the positioning context is given below.\nabsolute Still, write a basic demo first.\n1 2 3 4 \u0026lt;p\u0026gt;The first paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The second paragraph.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;background: yellow\u0026#34;\u0026gt;The third paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;The fourth paragraph.\u0026lt;/p\u0026gt; Then, we change the third \u0026lt;p\u0026gt; to position:absolute; and see what changes will happen.\nFrom the above results, we can derive several pieces of information:\nThe absolute element has departed from the document structure. Unlike relative, the positions of the other three elements have been rearranged. As long as the element departs from the document structure, it will be destructive, causing the parent element to collapse. (At this point, you should immediately think of float elements also depart from the document structure.)\nThe absolute element has “wrap-around” characteristics. The width of the previous \u0026lt;p\u0026gt; filled the entire screen, but now the width of the \u0026lt;p\u0026gt; is just the width of its content.\nThe absolute element has “follow” characteristics. Although the absolute element has departed from the document structure, its position has not changed and remains dutifully in its original location because we have not set the top, left values at this time.\nThe absolute element will float on the page, covering the content below the page.\nLastly, by setting the top, left values for absolute elements, you can customize its content, which is quite common. It should be noted that when the top, left values are set, the element is positioned relative to the nearest positioned context, not relative to the browser.\nFixed In fact, fixed and absolute are the same, the only difference being that absolute elements are positioned according to the nearest positioning context, while fixed is positioned according to the window (or iframe).\nTopic: Who do relative, absolute, and fixed depend on for positioning?\nPositioning Context The positioning of a relative element is always relative to its own position, unrelated to other elements and does not affect other elements.\nThe positioning of a fixed element is relative to the window (or iframe) boundary and is not related to other elements. But it is destructive and will cause changes in the positions of other elements.\nThe positioning of absolute is much more complex compared to the previous two. If top and left are set for absolute, what does the browser use to determine its vertical and horizontal offsets? The answer is that the browser will recursively search all parent elements of this element. If it finds an element set with position: relative/absolute/fixed, it will position relative to this element. If not found, it will position relative to the browser boundary.\nFlexbox layout The traditional solution to layouts is based on the box model, reliant on the display property + the position property + the float property. This proves to be inconvenient for special layouts, such as vertical centering. In most modern mobile pages, the requirements can be better fulfilled by using flex layout, making knowledge of flex layout mandatory.\nBasic application Flex layout can be used in any container, with the code being very simple.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .container { display: flex; } .item { border: 1px solid #000; flex: 1; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;aaa\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34; style=\u0026#34;flex: 2\u0026#34;\u0026gt;bbb\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;ccc\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;ddd\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Note the flex: 2 in the third \u0026lt;div\u0026gt;, with other \u0026lt;div\u0026gt; having flex: 1. Consequently, the width of the second \u0026lt;div\u0026gt; is twice as much as the others.\nDesign principles The elements with display: flex are called “containers” (flex container), while all its child nodes are called “items” (flex item). By default, the container has two axes: the horizontal main axis (main axis) and the vertical cross-axis (cross axis). The intersection point of the main axis with the start position (border) is referred as main start, and the end position as main end; the start position of the cross axis is cross start, while the end is cross end. The items are arranged on the main axis by default. The space that the single item occupies on the main axis is called the main size, while the one on the cross axis is the cross size.\nCombine the text above with the resulting images and read it again in detail. It should give a better understanding of flex layout’s principles, leading to a more intuitive experience.\nSetting direction of the main axis flex-direction can style the main axis\u0026rsquo;s direction, with four optional values:\nrow (default): the main axis is horizontal, with the starting point on the left.\nrow-reverse: the main axis is horizontal, with the starting point on the right.\ncolumn: the main axis is vertical, with the starting point on the top.\ncolumn-reverse: the main axis is vertical, with the starting point at the bottom.\n1 2 3 .box { flex-direction: column-reverse| column | row | row-reverse; } The code above sets the direction of the main axis according to the diagrams below.\nSetting alignment of the main axis justify-content properties define the alignment of the items on the main axis, with the following values:\nflex-start (default): aligns towards the starting point of the main axis.\nflex-end: aligns towards the end of the main axis.\ncenter: alignment is centered.\nspace-between: alignment spans both ends, with equal spacing amidst the items.\nspace-around: the spacing around each item is equal. This means that the spacing between items has a value twice as much as the spacing between items and the borders.\n1 2 3 .box { justify-content: flex-start | flex-end | center | space-between | space-around; } Alignment on the cross axis align-items properties define how items are aligned on the cross axis, with the following values:\nflex-start: aligns with the start of the cross axis.\nflex-end: aligns with the end of the cross axis.\ncenter: aligns with the point at the center of the cross axis.\nbaseline: aligns with the baseline of the first line of text of the item.\nstretch (default): if the item doesn\u0026rsquo;t have a set height or is set to auto, it will occupy the whole height of the container.\n1 2 3 .box { align-items: flex-start | flex-end | center | baseline | stretch; } How to achieve center alignment? Topic: How do you achieve horizontal center alignment?\nHorizontal centering To center the inline elements, all you need to do is apply text-align: center;, like so:\n1 2 3 .container { text-align: center; } For block elements, use margin: auto;. Many websites from the PC era used this arrangement.\n1 2 3 4 5 6 7 .container { text-align: center; } .item { width: 1000px; margin: auto; } To center absolutely positioned elements, combine left and margin. However, this works only when the width is known.\n1 2 3 4 5 6 7 8 9 10 11 .container { position: relative; width: 500px; } .item { width: 300px; height: 100px; position: absolute; left: 50%; margin: -150px; } Topic: How do you achieve vertical centering?\nVertical centering For inline elements, set the value of line-height to equal the value of height, such as vertically centering a single line of text:\n1 2 3 4 .container { height: 50px; line-height: 50px; } For absolutely positioned elements, combine left and margin. However, one must be acquainted with the dimensions beforehand.\nAdvantage: Good compatibility\nDisadvantage: Must know dimensions beforehand\n1 2 3 4 5 6 7 8 9 10 11 12 13 .container { position: relative; height: 200px; } .item { width: 80px; height: 40px; position: absolute; left: 50%; top: 50%; margin-top: -20px; margin-left: -40px; } For absolutely positioned elements, another solution is to combine transform for centering.\nAdvantage: No need to know dimensions beforehand\nDisadvantage: Poor compatibility\n1 2 3 4 5 6 7 8 9 10 11 12 13 .container { position: relative; height: 200px; } .item { width: 80px; height: 40px; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); background: blue; } The absolute position can be combined with margin: auto in such a way that one doesn\u0026rsquo;t need to be aware of the dimensions beforehand. Plus, compatibility is good.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 .container { position: relative; height: 300px; } .item { width: 100px; height: 50px; position: absolute; left: 0; top: 0; right: 0; bottom: 0; margin: auto; } There are other solutions to this issue, but there’s no need to master them all — being able to articulate the solutions mentioned above is good enough.\nUnderstanding semantics Topic: How to understand HTML semantics?\nSemantic means “making it easier to understand”. People need to be able to read (write and interpret) the program more easily. Machines (browsers and search engines) should also read it just as easily.\nMaking it easier for people to understand For people, code readability, semantic is a very broad concept. For instance, defining easily understood names when declaring JS variables or defining CSS class — such as length list, instead of incomprehensible names like a b.\nHowever, the “semantics” that we usually examine do not test such broad-based issues. They test HTML semantics, specifically to better enable machines to read HTML.\nMaking it easier for machines to understand HTML complies with the XML standard but differs from XML — HTML does not allow custom tags like XML; HTML has its predefined tags. The question is — why does HTML define so many tags like p div h1 ul and others - for semantics. If you are proficient in CSS, you can use the \u0026lt;div\u0026gt; tag to achieve all web page effects, without using other tags like p h1 ul and others. But we do not recommend this because it negates the purpose of HTML semantics.\nSpeaking of search engines, when crawlers download the HTML code of our web page, how can they better understand the contents of the page? — This is done according to the predefined tags in HTML. The h1 tag represents the title; the content inside p is the detailed paragraph, which does not necessarily have the same weight as the title; ul contains lists; strong stands for bold and emphasized content\u0026hellip; If we do not write according to HTML semantics and use the \u0026lt;div\u0026gt; tag for everything, search engines will have difficulty understanding our web page\u0026rsquo;s content.\nTo enhance the semantics of HTML, the HTML5 standard has added tags such as header, section, and article. Therefore, semantics is significant when writing HTML, otherwise, W3C would not have gone to the trouble of developing these standards.\nCSS3 Animation CSS3 can create animations, replacing the original Flash and JavaScript solutions.\nFirst, a @keyframes is used to define an animation named testAnimation. The code below uses percentages to set different CSS styles specifying the animation\u0026rsquo;s changes. All animations can be defined in this manner.\n1 2 3 4 5 6 7 8 @keyframes testAnimation { 0% {background: red; left:0; top:0;} 25% {background: yellow; left:200px; top:0;} 50% {background: blue; left:200px; top:200px;} 75% {background: green; left:0; top:200px;} 100% {background: red; left:0; top:0;} } Next, an animation is set for a CSS selector. Here, an animation is set for the div element as follows:\n1 2 3 4 5 6 7 div { width: 100px; height: 50px; position: absolute; animation-name: myfirst; animation-duration: 5s; } animation-name corresponds to the animation\u0026rsquo;s name while animation-duration refers to the duration of the animation. There are other properties:\nanimation-timing-function: Specifies the animation\u0026rsquo;s speed curve. Default is ease\nanimation-delay: Indicates when the animation will start. Default is 0\nanimation-iteration-count: Dictates how many times the animation will be played. Default is 1\nanimation-direction: Dictates whether the animation will be played in reverse in the next cycle. Default is normal\nanimation-play-state: Specifies whether the animation is running or paused. Default is running\nanimation-fill-mode: Specifies how the target of the animation is applied before and after the execution of the\nanimation, default is none, to retain at the last frame you can use forwards\nTopic: What’s the difference between CSS’s transition and animation?\nBoth transition and animation can create dynamic effects. Semantically, transition is a transition from one state to another, like transitioning from a height of 100px to 200px; whereas animation is an animation that is more professional for creating dynamic effects. animation has the concept of frames and can have ‘keyframes’. One animation can consist of multiple key frames by going through multiple states. In addition, animation also includes multiple properties mentioned above.\nRepainting and Reflow Repainting and reflow are often examined in interviews and are points to note when optimizing performance. The author provides a brief introduction below.\nRepainting: Refers to when elements on the page do not leave the Document Flow but only change styles, such as by changing the colour or background. The browser redraws the style.\nReflow: Refers to when the dimensions, location, or some attributes of a DOM element in the Document Flow change, causing the browser to re-render part or the entire document.\nCompared to repainting, reflow consumes more performance resources. Moreover, certain property reads could also cause reflow — for example, reading the height and width of a certain DOM, or using the getComputedStyle method. To avoid repainting and reflow while coding, you could try the following:\nTopic: Find potential improvements in the following code and optimize it\n1 2 3 4 5 var data = [\u0026#39;string1\u0026#39;, \u0026#39;string2\u0026#39;, \u0026#39;string3\u0026#39;]; for(var i = 0; i \u0026lt; data.length; i++){ var dom = document.getElementById(\u0026#39;list\u0026#39;); dom.innerHTML += \u0026#39;\u0026lt;li\u0026gt;\u0026#39; + data[i] + \u0026#39;\u0026lt;/li\u0026gt;\u0026#39;; } The loop in the code above retrieves dom with each iteration and accumulates li in its HTML. Each iteration manipulates the DOM structure. You could use documentFragment or precompile the HTML string before using innerHTML just once.\n","date":"2024-01-27T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/css-html-knowledge-points/","title":"CSS-HTML Knowledge Points"},{"content":"Knowledge Points BOM operations\nDOM operations\nEvent binding\nAjax\nStorage\nBOM BOM (Browser Object Model) is the setting and obtaining of some information of the browser itself, such as acquiring the browser’s width and height, and setting where the browser should navigate to.\nnavigator\nscreen\nlocation\nhistory\nThese objects are just a bunch of simple and blunt API, which have no technical content and are not interesting to talk about. Everyone can understand them by looking them up on websites like MDN or W3school. During interviews, interviewers generally won’t ask too many questions about this, because as long as you have a good grasp of the basic knowledge, you can understand these APIs even if you can’t remember them, by just looking them up online. Below are some examples of commonly used functions.\nObtain browser features (also known as UA) and then recognize the client, for example, to determine whether it is a Chrome browser\n1 2 3 var ua = navigator.userAgent var isChrome = ua.indexOf(\u0026#39;Chrome\u0026#39;) console.log(isChrome) Obtain the width and height of the screen\n1 2 console.log(screen.width) console.log(screen.height) Get url, protocol, path, parameters, hash etc\n1 2 3 4 5 6 // For example, the current url is https://juejin.im/timeline/frontend?a=10\u0026amp;b=10#some console.log(location.href) // https://juejin.im/timeline/frontend?a=10\u0026amp;b=10#some console.log(location.protocol) // https: console.log(location.pathname) // /timeline/frontend console.log(location.search) // ?a=10\u0026amp;b=10 console.log(location.hash) // #some In addition, there are also functions to invoke the browser’s forward and backward functions, etc.\n1 2 history.back() history.forward() DOM Topic: What is the difference and connection between DOM and HTML?\nWhat is DOM When talking about DOM, let’s first start with HTML, and when talking about HTML, let’s start with XML. XML is an extensible markup language. Being ‘extensible’ means that it can describe any kind of structured data. It is a tree!\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;note\u0026gt; \u0026lt;to\u0026gt;Tove\u0026lt;/to\u0026gt; \u0026lt;from\u0026gt;Jani\u0026lt;/from\u0026gt; \u0026lt;heading\u0026gt;Reminder\u0026lt;/heading\u0026gt; \u0026lt;body\u0026gt;Don\u0026#39;t forget me this weekend!\u0026lt;/body\u0026gt; \u0026lt;other\u0026gt; \u0026lt;a\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;/other\u0026gt; \u0026lt;/note\u0026gt; HTML is an XML format with a predefined set of tags. The names, hierarchical relationships, and properties of the tags have been standardized (otherwise, they cannot be parsed by the browser). Similarly, it is also a tree.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;this is p\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The HTML code that we have developed is saved to a document (usually ending with .html or .htm). The document is stored on the server, and when the browser requests the server, this document is returned. Therefore, what the browser ultimately gets is just a document whose content is HTML-formatted code.\nHowever, the browser needs to render the HTML in this document into a page according to the standard. At this point, the browser needs to process this bunch of code into something it can understand, and it also needs to process the code into something JS can understand, because it also allows JS to modify the page content.\nBased upon these requirements, the browser needs to transform HTML into DOM. HTML is a tree, and DOM is also a tree. To understand DOM, you can temporarily set aside the internal factors of the browser and start with JS. In other words, you can regard DOM as the HTML structure that JS can recognize, a regular JS object or array.\nObtain DOM Nodes The most commonly used DOM API is to obtain nodes, and the common methods of getting them are as shown in the code example below:\n1 2 3 4 5 6 7 8 9 10 // Get by id var div1 = document.getElementById(\u0026#39;div1\u0026#39;) // element // Get by tagname var divList = document.getElementsByTagName(\u0026#39;div\u0026#39;) // collection console.log(divList.length) console.log(divList[0]) // Get by class var containerList = document.getElementsByClassName(\u0026#39;container\u0026#39;) // collection // Get by CSS selector var pList = document.querySelectorAll(\u0026#39;p\u0026#39;) // collection Topic: What is the difference between properties and attributes?\nProperty A DOM node is a JS object, which complies with the characteristics of the object we mentioned before — extendable properties, because a DOM node is essentially a JS object. Therefore, as shown in the following code, p can have a style property, and it also has className, nodeName, nodeType properties. Note, these are all properties from the JS context, and they comply with the JS syntax standard.\n1 2 3 4 5 6 7 8 9 var pList = document.querySelectorAll(\u0026#39;p\u0026#39;) var p = pList[0] console.log(p.style.width) // Get style p.style.width = \u0026#39;100px\u0026#39; // Modify style console.log(p.className) // Get class p.className = \u0026#39;p1\u0026#39; // Modify class // Get nodeName and nodeType console.log(p.nodeName) console.log(p.nodeType) Attribute The process of getting and modifying properties is changing the JS object directly, whereas the attribute is changing the HTML attribute directly, the two are quite different. The attribute is the get and set of HTML attributes, which has no relation to the property of the JS context of the DOM node.\n1 2 3 4 5 6 var pList = document.querySelectorAll(\u0026#39;p\u0026#39;) var p = pList[0] p.getAttribute(\u0026#39;data-name\u0026#39;) p.setAttribute(\u0026#39;data-name\u0026#39;, \u0026#39;juejin\u0026#39;) p.getAttribute(\u0026#39;style\u0026#39;) p.setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-size:30px;\u0026#39;) Moreover, when you get and set attributes, it will trigger the query, reflow or repaint of the DOM. Frequent operations may affect page performance.\nTopic: What are the basic APIs for DOM operations?\nDOM Tree Manipulations Adding Nodes\n1 2 3 4 5 6 7 8 var div1 = document.getElementById(\u0026#39;div1\u0026#39;) // Add new nodes var p1 = document.createElement(\u0026#39;p\u0026#39;) p1.innerHTML = \u0026#39;this is p1\u0026#39; div1.appendChild(p1) // Add the newly created element // Move existing nodes. Note that this is \u0026#34;moving\u0026#34; and not \u0026#34;copying\u0026#34;. var p2 = document.getElementById(\u0026#39;p2\u0026#39;) div1.appendChild(p2) Accessing Parent Element\n1 2 var div1 = document.getElementById(\u0026#39;div1\u0026#39;) var parent = div1.parentElement Accessing Child Elements\n1 2 var div1 = document.getElementById(\u0026#39;div1\u0026#39;) var child = div1.childNodes Deleting Nodes\n1 2 3 var div1 = document.getElementById(\u0026#39;div1\u0026#39;) var child = div1.childNodes div1.removeChild(child[0]) There are also APIs for other operations, such as accessing the previous node, accessing the next node, etc., but what is often asked in interviews are the above few.\nEvents Event Binding The traditional way of event binding is as follows:\n1 2 3 4 5 6 var btn = document.getElementById(\u0026#39;btn1\u0026#39;) btn.addEventListener(\u0026#39;click\u0026#39;, function (event) { // event.preventDefault() // Prevent default behavior // event.stopPropagation() // Prevent bubbling console.log(\u0026#39;clicked\u0026#39;) }) In order to simplify event binding, you can create a universal event binding function. Although it’s simple, it will be improved and enriched as we go on.\n1 2 3 4 5 6 7 8 9 10 // Universal event binding function function bindEvent(elem, type, fn) { elem.addEventListener(type, fn) } var a = document.getElementById(\u0026#39;link1\u0026#39;) // It\u0026#39;s simpler to write bindEvent(a, \u0026#39;click\u0026#39;, function(e) { e.preventDefault() // Prevent default behavior alert(\u0026#39;clicked\u0026#39;) }) Lastly, if asked about IE lower version compatibility in an interview, I advise you to give up the job opportunity decisively. Nowadays, all internet traffic is on Apps, and the proportion of IE is getting less and less. It’s not worth to waste your youth for IE anymore. Try to pursue App-related work if possible.\nTopic: What is event bubbling?\nEvent Bubbling 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;div1\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;p1\u0026#34;\u0026gt;Activate\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p2\u0026#34;\u0026gt;Cancel\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p3\u0026#34;\u0026gt;Cancel\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p4\u0026#34;\u0026gt;Cancel\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;div2\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;p5\u0026#34;\u0026gt;Cancel\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p6\u0026#34;\u0026gt;Cancel\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Given the above HTML code structure, when p1 is clicked, it should be in the activated state. Clicking on any other \u0026lt;p\u0026gt; should cancel the activated state. How can we achieve this? The code is as follows, pay attention to the comments:\n1 2 3 4 5 6 7 8 9 10 var body = document.body bindEvent(body, \u0026#39;click\u0026#39;, function (e) { // All p clicks will bubble up to the body, because in the DOM structure, the body is an upper-level node of p, and events will bubble up along the DOM tree alert(\u0026#39;Cancel\u0026#39;) }) var p1 = document.getElementById(\u0026#39;p1\u0026#39;) bindEvent(p1, \u0026#39;click\u0026#39;, function (e) { e.stopPropagation() // Prevent bubbling alert(\u0026#39;Activate\u0026#39;) }) If we bind events to p1 div1 body, they will bubble according to the DOM structure, executing one by one from bottom to top. But we can prevent bubbling by using e.stopPropagation().\nTopic: How do you use event delegation? What are the advantages?\nEvent Delegation Let’s set a scene where we have a \u0026lt;div\u0026gt; containing a number of \u0026lt;a\u0026gt; elements, and they can continue to increase. So how do we quickly and conveniently bind events to all the \u0026lt;a\u0026gt; elements?\n1 2 3 4 5 6 7 \u0026lt;div id=\u0026#34;div1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;a1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;a2\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;a3\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;a4\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button\u0026gt;Click to add an a tag\u0026lt;/button\u0026gt; This is where event delegation comes in. We want to listen for \u0026lt;a\u0026gt; events, but we want to bind the specific events to the \u0026lt;div\u0026gt;, and then see if the event trigger point is an \u0026lt;a\u0026gt;.\n1 2 3 4 5 6 7 8 9 var div1 = document.getElementById(\u0026#39;div1\u0026#39;) div1.addEventListener(\u0026#39;click\u0026#39;, function (e) { // e.target can listen to find out which element triggered the click event var target = e.target if (e.nodeName === \u0026#39;A\u0026#39;) { // The \u0026lt;a\u0026gt; element was clicked alert(target.innerHTML) } }) Let’s now improve the universal event binding function we wrote before and add event delegation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function bindEvent(elem, type, selector, fn) { // With this process, we can accept two ways of calling: bindEvent(div1, \u0026#39;click\u0026#39;, \u0026#39;a\u0026#39;, function () {...}) and bindEvent(div1, \u0026#39;click\u0026#39;, function () {...}) if (fn == null) { fn = selector selector = null } // Bind event elem.addEventListener(type, function (e) { var target if (selector) { // If we have a selector, event delegation is needed // Get the element that triggered the event, i.e. e.target target = e.target // Check if it matches the selector condition if (target.matches(selector)) { fn.call(target, e) } } else { // If there\u0026#39;s no selector, event delegation is not needed fn(e) } }) } Then you can use it like this, which is much simpler.\n1 2 3 4 5 6 7 8 9 10 // Use delegation, bindEvent gets an extra \u0026#39;a\u0026#39; argument var div1 = document.getElementById(\u0026#39;div1\u0026#39;) bindEvent(div1, \u0026#39;click\u0026#39;, \u0026#39;a\u0026#39;, function (e) { console.log(this.innerHTML) }) // Not using delegation var a = document.getElementById(\u0026#39;a1\u0026#39;) bindEvent(div1, \u0026#39;click\u0026#39;, function (e) { console.log(a.innerHTML) }) Lastly, the benefits of using delegation are as follows:\nIt simplifies the code\nIt reduces memory consumption by the browser\nAjax XMLHttpRequest Topic: Hand-written XMLHttpRequest without the help of any libraries\nThis is a common tool used by quirky and unique interviewers. There’s a lot of debate about this kind of test, but you can’t say it’s completely wrong as it tests your understanding of basic knowledge.\n1 2 3 4 5 6 7 8 9 10 11 var xhr = new XMLHttpRequest() xhr.onreadystatechange = function () { // The function here executes asynchronously, refer to the asynchronous module in JS basics if (xhr.readyState == 4) { if (xhr.status == 200) { alert(xhr.responseText) } } } xhr.open(\u0026#34;GET\u0026#34;, \u0026#34;/api\u0026#34;, false) xhr.send(null) Of course, it’s much simpler to write with libraries like jQuery, Zepto, or Fetch, so I won’t elaborate on that.\nExplanation of Status Codes There are two places where status codes need to be explained in the above code. xhr.readyState is used by the browser to judge the different stages of the request process, and xhr.status are the status codes for different results stipulated in the HTTP protocol.\nExplanation of xhr.readyState status codes:\n0 — Proxy created but open() method has not been called.\n1 — open() method has been called.\n2 — send() method has been called, and headers and status can be obtained.\n3 — Downloading, responseText property already contains partial data.\n4 — Download operation is complete\nTopic: In the HTTP protocol, what are the common status codes for a response?\nxhr.status is the HTTP status code, there are 2xx, 3xx, 4xx, 5xx, the commonly used ones include:\n200 Normal\n301 Permanent redirect. For example, the GET request http://xxx.com (no / at the end) will be 301 redirected to http://xxx.com/ (with a / at the end).\n302 Temporary redirect. It\u0026rsquo;s temporary, not permanent.\n304 Resource found but not meeting the request condition, will not return any body. For instance, when sending a GET request, if the head contains If-Modified-Since: xxx (requesting the return of resources updated after xxx time), and the server-side resource has not been updated, it will return 304, which means it doesn\u0026rsquo;t meet the request requirements.\n404 Resource not found\n5xx Server side error\nAt the end, you should understand why the code above requires both xhr.readyState == 4 and xhr.status == 200 to be satisfied.\nFetch API Currently, there is a more convenient API for obtaining HTTP requests: Fetch. The fetch() global function provided by Fetch can easily initiate asynchronous requests and supports callback of Promise. However, the Fetch API is relatively new, and you would need to check caniuse for browser compatibility.\nHere’s a simple example:\n1 2 3 4 5 6 7 8 fetch(\u0026#39;some/api/data.json\u0026#39;, { method:\u0026#39;POST\u0026#39;, // Request type GET, POST headers:{}, // Request headers, presented as Headers object or ByteString body:{}, // Request data blob, BufferSource, FormData, URLSearchParams (cannot include body in GET or HEAD methods) mode:\u0026#39;\u0026#39;, // Request mode, if it involves cross-domain, like cors, no-cors or same-origin credentials:\u0026#39;\u0026#39;, // Cross-domain policy for cookies, like omit, same-origin or include cache:\u0026#39;\u0026#39;, // Request\u0026#39;s cache mode: default, no-store, reload, no-cache, force-cache or only-if-cached }).then(function(response) { ... }); Fetch supports headers definition, through customized headers, we can conveniently implement various request methods (PUT, GET, POST, etc.), headers (including cross-domain) and cache strategies, etc. In addition, it also supports various types of response (return data), like binary files, strings, and formData, etc.\nCross-domain Topic: How to implement cross-domain?\nThere is a same-origin policy in the browser, that is, a page under a domain cannot use Ajax to get the interface of another domain. For example, there is an interface http://m.juejin.com/course/ajaxcourserecom?cid=459. Your own page http://www.yourname.com/page1.html cannot access this interface via Ajax. This is due to the \u0026ldquo;same-origin policy\u0026rdquo;. If the browser ignores the same-origin policy somewhere, then it is a security loophole of the browser, which needs to be urgently fixed.\nWhere does a URL differ to be considered as cross-domain?\nProtocol\nDomain name\nPort\nHowever, a few HTML tags can evade the same-origin policy — — \u0026lt;script src=\u0026quot;xxx\u0026quot;\u0026gt;, \u0026lt;img src=\u0026quot;xxxx\u0026quot;/\u0026gt;, \u0026lt;link href=\u0026quot;xxxx\u0026quot;\u0026gt;. The src/href of these three tags can load resources from other domains, and are not restricted by the same-origin policy.\nTherefore, these three tags can do some special things.\n\u0026lt;img\u0026gt; can be used for point statistics, because the statistical party does not necessarily come from the same domain. We have provided a code example when talking about the asynchronous JS basics. Besides its ability to cross-domain, \u0026lt;img\u0026gt; almost has no browser compatibility issue, because it is a very old tag.\n\u0026lt;script\u0026gt; and \u0026lt;link\u0026gt; can utilize CDN, and CDN links are generally from other domains.\nIn addition, \u0026lt;script\u0026gt; can also implement JSONP, which can get the information from other domain interfaces. We will explain it right away.\nBut please note that for all cross-domain request methods, ultimately, the information provider needs to provide corresponding support and modifications, which means, only with the consent of the information provider can the receiver get their information. The browser will not allow otherwise.\nResolve Cross-domain — JSONP Firstly, you should understand the concept. For example, when visiting http://coding.m.juejin.com/classindex.html, does the server definitely have a classindex.html file? —— Not necessarily, the server can receive this request, dynamically generate a file, and then return it. Similarly, \u0026lt;script src=\u0026quot;http://coding.m.juejin.com/api.js\u0026quot;\u0026gt; does not necessarily load a static file from the server, the server can also dynamically generate files and return them. OK, let\u0026rsquo;s officially start.\nFor example, our website and Juejin’s site are definitely not the same domain. We need Juejin to provide an interface for us to get. Firstly, we define on our own pages like this:\n1 2 3 4 5 6 \u0026lt;script\u0026gt; window.callback = function (data) { // This is the information we get cross-domain console.log(data) } \u0026lt;/script\u0026gt; Next, Juejin provided me an http://coding.m.juejin.com/api.js, the content is as follows (as mentioned before, the server can dynamically generate content)\n1 callback({x:100, y:200}) Lastly, we add \u0026lt;script src=\u0026quot;http://coding.m.juejin.com/api.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; on our page, and when this js is loaded, it will execute its content, and we will get the content.\nResolve Cross-domain — Server Side Setting of HTTP Header This needs to be set on the server side, as a front-end engineer, we don’t need to master the details, but we should know there is such a solution. Moreover, the now recommended cross-domain solution is this one, which is much simpler than JSONP.\n1 2 3 4 5 response.setHeader(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;http://m.juejin.com/\u0026#34;); // Fill in the domain name that allows cross-domain in the second parameter, it is not recommended to write \u0026#34;*\u0026#34; response.setHeader(\u0026#34;Access-Control-Allow-Headers\u0026#34;, \u0026#34;X-Requested-With\u0026#34;); response.setHeader(\u0026#34;Access-Control-Allow-Methods\u0026#34;, \u0026#34;PUT,POST,GET,DELETE,OPTIONS\u0026#34;); // Accepting cookie cross-domain response.setHeader(\u0026#34;Access-Control-Allow-Credentials\u0026#34;, \u0026#34;true\u0026#34;); Storage Topic: What is the difference between cookies and localStorage?\nCookies Cookies are not originally designed for server-side storage (there are many examples of such “cats chasing dogs” in the computer world, such as float in CSS). They are designed to convey information between servers and clients, so all our HTTP requests carry cookies. However, cookies also have the capability of browser-side storage (such as remembering usernames and passwords), so they have been used by developers.\nThey are very simple to use, just document.cookie = \u0026hellip;..\nBut cookies have their fatal disadvantages:\nThe storage capacity is too small, only 4KB\nAll HTTP requests carry them, affecting the efficiency of resource acquisition\nThe API is simple and needs to be encapsulated to be used\nLocalStorage and sessionStorage Later, HTML5 brought sessionStorage and localStorage. Let\u0026rsquo;s talk about localStorage first. It was specifically designed for browser-side caching. Its advantages include:\nIts storage capacity is increased to 5MB\nIt is not included in HTTP requests\nThe API is suitable for data storage, which include localStorage.setItem(key, value), localStorage.getItem(key)\nThe difference for sessionStorage is that it is based on the session expiration time, while localStorage is permanently valid, so they are used in different scenarios. For example, some important information that needs to be invalidated in time is put into sessionStorage, and some unimportant but infrequently set information is put into localStorage.\nAnother tip for you, when using localStorage.setItem, you should try to add it into try-catch, as some browsers disable this API, so be attentive.\n","date":"2024-01-27T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/js-web-api-knowledge-points/","title":"JS-Web-API Knowledge Points"},{"content":"JavaScript is an implementation of the ECMAScript specification. This section focuses on sorting out commonly tested knowledge points in ECMAScript, and then analyzing some easily arising questions.\nKnowledge Points Variable Types\nClassification and judgment of JS data types\nValue types and reference types\nPrototype and prototype chain (inheritance)\nDefinition of prototype and prototype chain\nInheritance Syntax\nScope and Closure\nExecution Context\nthis\nWhat is a closure?\nAsynchronous\nSynchronous vs Asynchronous\nsynchrony and single-threaded\nFront-end asynchronous scenarios\nExamination of ES6/7 new standards\nArrow functions\nModule\nClass\nSet and Map\nPromise\nVariable Types JavaScript is a weakly-typed scripting language, that is, it doesn’t require specifying the type when you define a variable; the type will be automatically determined during program execution.\nECMAScript defines six primitive types: Boolean\nString\nNumber\nNull\nUndefined\nSymbol (newly defined in ES6)\nNote: The primitive types do not include Object.\nTopic: What methods are used for type judgment?\ntypeof\nThe values obtained by typeof xxx are of the following types: undefined, boolean, number, string, object, function, symbol. It’s pretty straightforward, so no need for individual demonstrations. There are three points to note here:\nThe result of typeof null is o`bject; actually, this is a bug of typeof, null is primitive value, not a reference type.\nThe result of typeof [1, 2] is object, there is no array in the result. Reference types are all objects except functions.\nThe value obtained by using typeof Symbol() for the symbol type is symbol, which is a new knowledge point added in ES6.\ninstanceof\nIt is used for correspondence between instances and constructors. For example, to determine if a variable is an array, typeof cannot be used, but you can use [1, 2] instanceof Array to judge. Because [1, 2] is an array, its constructor is Array. Similarly:\n1 2 3 4 5 function Foo(name) { this.name = name } var foo = new Foo(\u0026#39;bar\u0026#39;) console.log(foo instanceof Foo) // true Topic: Difference between value types and reference types\nValue type vs Reference type In addition to primitive types, ES also has reference types. Among the types identified by typeof mentioned above, only object and function are reference types, others are value types.\nBased on the way variable types are passed in JavaScript, it is divided into value types and reference types. Value types include Boolean, String, Number, Undefined, Null, and reference types include all classes of the Object category, such as Date, Array, Function, etc. In terms of parameter passing, value types are passed by value and reference types are passed by sharing.\nLet’s look at the main differences between the two and what needs to be noticed in practical development through a small question below.\n1 2 3 4 5 // value types var a = 10 var b = a b = 20 console.log(a) // 10 console.log(b) // 20 In the above code, both a and b are value types. They are assigned and modified separately, and there is no influence on each other. Now let’s look at an example of reference type:\n1 2 3 4 5 6 // reference types var a = {x: 10, y: 20} var b = a b.x = 100 b.y = 200 console.log(a) // {x: 100, y: 200} console.log(b) // {x: 100, y: 200} In the above code, both a and b are reference types. After executing b = a, when the property value of b is modified, the value of a also changes. This is because both a and b are reference types, pointing to the same memory address, i.e., they both reference the same value. Therefore, when b modifies the property, the value of a changes accordingly.\nLet’s further explain this with the help of the question below.\nState the execution result of the following code and analyze the reason.\n1 2 3 4 5 6 7 8 9 10 function foo(a){ a = a * 10; } function bar(b){ b.value = \u0026#39;new\u0026#39;; } var a = 1; var b = {value: \u0026#39;old\u0026#39;}; foo(a); bar(b); console.log(a); // 1 console.log(b); // value: new Through the execution of the code, you will find that:\nThe value of a does not change\nBut the value of b has changed\nThis is because the Number type a is passed by value, while the Object type b is passed by sharing.\nThe reason for this design in JS is: for types that are passed by value, a copy is stored in stack memory. This type of type generally does not occupy too much memory, and passing by value ensures its access speed. The types that are passed by sharing are copying its reference, not copying its value (pointer in C language), which ensures that oversized objects and others will not cause memory waste due to constant copying of content.\nReference types are often used in code in the following way, or they are prone to unnoticed errors!\n1 2 3 4 5 6 var obj = { a: 1, b: [1,2,3] } var a = obj.a var b = obj.b a = 2 b.push(4) console.log(obj, a, b) Although obj itself is a variable of reference type (object), both a and b inside it are value types and reference types respectively. Assigning a value to a will not change obj.a, but operations on b will be reflected on the obj object.\nPrototype and prototype chain JavaScript is a language based on prototypes, understanding prototypes is quite simple, but extremely important. Let’s understand the concept of prototypes in JavaScript through questions.\nTopic: How to understand the prototypes in JavaScript\nTo answer this question, you can remember and understand several key points:\nAll reference types (arrays, objects, functions) have object characteristics, that is, they can freely extend properties (except null).\nAll reference types (arrays, objects, functions) have a __proto__ property, the value of which is a normal object.\nAll functions have a prototype property, the value of which is also a normal object.\nAll reference types (arrays, objects, functions), the value of the __proto__ property points to the prototype property value of its constructor.\nLet’s explain this with code, and you can run the following code to see the results:\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Key point one: Freely extend properties var obj = {}; obj.a = 100; var arr = []; arr.a = 100; function fn () {} fn.a = 100; // Key point two: __proto__ console.log(obj.__proto__); console.log(arr.__proto__); console.log(fn.__proto__); // Key point three: Functions have prototypes console.log(fn.prototype) // Key point four: The value of the __proto__ property of a reference type points to the prototype property value of its constructor console.log(obj.__proto__ === Object.prototype) Prototypes Let’s start with a simple example code.\n1 2 3 4 5 6 7 8 9 10 11 12 // Constructor function Foo(name, age) { this.name = name } Foo.prototype.alertName = function () { alert(this.name) } // Creating an instance var f = new Foo(\u0026#39;zhangsan\u0026#39;) f.printName = function () { console.log(this.name) } // Testing f.printName() f.alertName() Executing printName is easy to understand, but what happened when executing alertName? Remember another key point here. When trying to get a certain property of an object, if the object itself does not have this property, it will go to its __proto__ (that is, its constructor’s prototype) to find it, so f.alertName will find Foo.prototype.alertName.\nSo how do you determine whether this property is the object’s own property? Use hasOwnProperty, a common place is when traversing an object.\n1 2 3 4 5 6 7 8 9 var item for (item in f) { // Use hasOwnProperty, a common place is when traversing an object. // Advanced browsers have already shielded p roperties from prototypes in for in, // but it is suggested here that you should add this judgment to ensure the robustness of the program. if (f.hasOwnProperty(item)) { console.log(item) } } Topic: How to understand the prototype chain in JS\nPrototype Chain Continuing with the above example, what happens when f.toString() is executed?\n1 2 3 4 5 ... // Testing f.printName() f.alertName() f.toString() Because f itself does not have toString(), and there is no toString in f.__proto__(that is, Foo.prototype). Recall the sentence just now — when trying to get a certain property of an object, if the object itself doesn’t have this property, it will look for it in its __proto__ (that is, its constructor’s prototype).\nIf toString is not found in f.__proto__, continue to look for it in f.__proto__.__proto__, because f.__proto__ is just an ordinary object!\nf.__proto__ is Foo.prototype, which does not find toString, keep looking up. f.__proto__.__proto__ is Foo.prototype.__proto__. As Foo.prototype is just an ordinary object, so Foo.prototype.__proto__ is Object.prototype, where toString can be found. Therefore, f.toString ultimately corresponds to Object.prototype.toString. If you keep looking up like this, you’ll find it’s a chain-like structure, so it’s called a “prototype chain”. If it cannot be found all the way to the top level, it declares failure and returns undefined. What is the top level — Object.prototype.proto === null.\nthis in the Prototype Chain\nAll the methods obtained and executed from the prototype or higher levels of prototypes, the this within them when executing, points to the object that triggers the event. Thus, the this in both printName and alertName is f.\nScope and Closure Scope and closure are the most likely knowledge points to be tested in front-end interviews. For example, the following question:\nTopic: Now there is a piece of HTML code. The requirement is to write code. When you click on a link with a certain number, an alert pops up with its number.\n1 2 3 4 5 6 7 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;number 1，Click me please pop up 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;4\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;5\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; If you don’t know that this question involves closure, you might write the following code:\n1 2 3 4 5 var list = document.getElementsByTagName(\u0026#39;li\u0026#39;); for (var i = 0; i \u0026lt; list.length; i++) { list[i].addEventListener(\u0026#39;click\u0026#39;, function(){ alert(i + 1) }, true) } In fact, you will find that it always pops up 6 when executed. At this point, you should solve it through closures:\n1 2 3 4 5 6 7 var list = document.getElementsByTagName(\u0026#39;li\u0026#39;); for (var i = 0; i \u0026lt; list.length; i++) { list[i].addEventListener(\u0026#39;click\u0026#39;, function(i){ return function(){ alert(i + 1) } }(i), true) } To understand closures, we need to start with the “execution context”.\nExecution Context Let’s talk about a knowledge point about variable hoisting. In the interview, you may encounter the following question, where many candidates give wrong answers:\nTopic: Tell the result of the following execution (the author here directly commented the output)\n1 2 3 4 5 6 7 8 9 10 11 console.log(a) // undefined var a = 100 fn(\u0026#39;zhangsan\u0026#39;) // \u0026#39;zhangsan\u0026#39; 20 function fn(name) { age = 20 console.log(name, age) var age } console.log(b); // throw error // Uncaught ReferenceError: b is not defined b = 100; Before a piece of JS script (i.e., within a \u0026lt;script\u0026gt; tag) is executed, it needs to be parsed first (hence, JS is an interpreted script language). During parsing, a global execution context environment is created first, taking all the variables and function declarations that are about to be executed in the code (internal function is not included because you don’t know when the function will be executed). Variables are temporarily assigned to undefined, and functions are declared to be available. After this step is done, the program is officially executed. Emphasize again, this is the work that starts before the code execution.\nLet’s look at the small test question above. Why is a undefined, but b throws an error. In fact, JS will “parse the entire document” before the code is executed. It finds var a, knows there is a variable a, and stores it in the execution context. But b didn’t find the var keyword, so it didn’t “reserve space” in the execution context in advance. So when the code is executed, the early-present a has a record, but the value hasn’t been assigned yet, which is undefined. While b is not found in the execution context and naturally throws an error (b reference not found).\nIn addition, before a function is executed, a function execution context environment is also created, which is similar to the global context, but the function execution context adds this, arguments, and function parameters. It’s easy to understand parameters and arguments, but we need to specifically explain this.\nTo sum up:\nRange: a \u0026lt;script\u0026gt; tag, a JS file, or a function\nGlobal context: variable definition, function declaration\nFunction context: variable definition, function declaration, this, arguments\nthis Firstly, understand a very important concept — the value of this can only be confirmed during execution, not during definition! Why? — Because this is part of the execution context, and the execution context needs to be determined before the code is executed, not when it is defined. As shown in the following example.\n1 2 3 4 5 6 7 8 9 var a = { name: \u0026#39;A\u0026#39;, fn: function () { console.log(this.name) } }a.fn() // this === a a.fn.call({name: \u0026#39;B\u0026#39;}) // this === {name: \u0026#39;B\u0026#39;} var fn1 = a.fn fn1() // this === window this will have different execution results, mainly focused on the following scenarios:\nAs a constructor, within the constructor.\nAs an object property, as in the above code a.fn().\nAs a regular function, as in the above code fn1().\nUsed for call, apply, bind, like in the above code a.fn.call({name: ‘B’}).\nNow let’s explain what is the scope and scope chain, scope chain and scope are also frequently asked questions.\nTopic: How to understand the scope and scope chain in JS\nScope Before ES6, JS didn’t have block-level scopes. For example:\n1 2 3 4 if (true) { var name = \u0026#39;zhangsan\u0026#39; } console.log(name) From the above example, we can understand the concept of scope, which is an independent territory, so that variables will not leak out and be exposed. The name above has been exposed, so JS doesn’t have block-level scopes, only global scope and function scope.\n1 2 3 4 5 6 var a = 100 function fn() { var a = 200 console.log(\u0026#39;fn\u0026#39;, a) } console.log(\u0026#39;global\u0026#39;, a) fn() Global scope is the outermost scope. If we write many lines of JS code and the variable definitions are not enclosed within functions, then they are all in the global scope. The drawback of this is that it is very prone to collisions and conflicts.\n1 2 3 4 // Code written by a var data = {a: 100} // Code written by b var data = {x: true} This is why all the code in jQuery, Zepto, and other libraries are placed in (function() {…})(). Because all the variables inside will not be leaked and exposed, they won’t pollute the outside, and they won’t affect other libraries or JS scripts. This is a manifestation of function scope.\nNote: ES6 started to introduce block-level scope, which can be defined by using let, as follows:\n1 2 3 4 if (true) { let name = \u0026#39;zhangsan\u0026#39; } console.log(name) // Error, because the name defined by let is in this block level scope (if). Scope Chain First, let’s understand what is called a “free variable”. In the following code, console.log(a) needs to get the variable a, but a is not defined in the current scope (compare with b). A variable that is not defined in the current scope is called a “free variable”. How to get a “free variable”? — Look for it in the parent scope.\n1 2 3 4 5 6 var a = 100 function fn() { var b = 200 console.log(a) console.log(b) } fn() What if the parent scope doesn’t have it either? It continues to look up step by step until it reaches the global scope. If it still hasn’t found it, it gives up. This step-by-step relationship is called the “scope chain”.\n1 2 3 4 5 6 7 8 9 10 11 12 var a = 100 function F1() { var b = 200 function F2() { var c = 300 console.log(a) // Free variable, look for it in the parent scope along the scope chain console.log(b) // Free variable, look for it in the parent scope along the scope chain console.log(c) // Variable in the current scope } F2() } F1() Closure I’ve explained these concepts, let’s look at an example to understand closures.\n1 2 3 4 5 6 7 8 9 function F1() { var a = 100 return function () { console.log(a) } } var f1 = F1() var a = 200 f1() Free variables will be located from the scope chain, but they rely on the scope chain at the time of function definition, not the execution of the function, the above example is a closure. Closures mainly have two use cases:\nThe function is returned as a value, as in the previous example.\nThe function is passed as a parameter, as shown in the example below.\n1 2 3 4 5 6 7 8 9 10 11 12 function F1() { var a = 100 return function () { console.log(a) } } function F2(f1) { var a = 200 console.log(f1()) } var f1 = F1() F2(f1) At this point, looking back at the beginning — “Scope and Closure” which is a part of click and pop up alert code viewing closures, it will be easy to understand.\nAsynchronous Asynchronous and Synchronous are also commonly tested topics in interviews, the author will explain the difference between synchronous and asynchronous below.\nSynchronous vs Asynchronous Consider the following demo; according to the program’s expressed intent, it should first print 100, print 200 after a second, and finally print 300. But in actual operation, that’s not the case at all.\n1 2 3 4 5 console.log(100) setTimeout(function () { console.log(200) }, 1000) console.log(300) Comparatively, the following program first prints 100, then displays 200 (wait for user confirmation), and finally prints 300. This execution effect meets the expected requirements.\n1 2 3 console.log(100) alert(200) //confirm after 1 second console.log(300) What’s the difference between these two? — The first example’s intermediate steps do not block the subsequent program’s operations at all, while the second example does block the subsequent operations. The former behavior is known as Asynchronous (the latter is called Synchronous), which does not block the subsequent program execution.\nAsynchronicity and Single Threaded The fundamental reason that JS requires asynchronicity is because JS is single-threaded, which means it can only do one thing at a time and can’t lie in two boats ~ do two things at once.\nAn Ajax request takes 5 seconds due to slow network speed. If it is synchronous, the page will be stuck here for those 5 seconds and nothing can be done. If it’s asynchronous, it’s much better as the 5 seconds waiting won’t delay anything else. That 5-second waiting period is due to a slow network speed, not because of JS.\nSpeaking of single-threaded, let’s look at a real exam question:\nTopic: Explain the execution process and result of the following code.\n1 2 3 4 5 6 var a = true; setTimeout(function(){ a = false; }, 100) while(a){ console.log(\u0026#39;while execut\u0026#39;) } This is a very puzzling question, numerous candidates assumed that 100ms later, since a becomes false, the while loop will stop. However, this is not the case. Because JavaScript is single-threaded, once it enters the while loop, it doesn’t have the ‘time’ (or thread) to run the timer. Thus, running this code results in an infinite loop!\nFront-end asynchronous scenarios Timing functions: setTimeout, setInterval\nNetwork request, like Ajax, \u0026lt;img\u0026gt; loading\nAjax code example\n1 2 3 4 console.log(\u0026#39;start\u0026#39;) $.get(\u0026#39;./data1.json\u0026#39;, function (data1) { console.log(data1) }) console.log(\u0026#39;end\u0026#39;) img code example (commonly used for dot statistics)\n1 2 3 4 5 6 7 8 9 console.log(\u0026#39;start\u0026#39;) var img = document.createElement(\u0026#39;img\u0026#39;) // or img = new Image() img.onload = function () { console.log(\u0026#39;loaded\u0026#39;) img.onload = null } img.src = \u0026#39;/xxx.png\u0026#39; console.log(\u0026#39;end\u0026#39;) Examination of ES6/7 new standards Topic: What’s the difference between this in ES6 arrow functions and in regular functions?\nArrow functions Arrow functions are a new way of defining functions in ES6. A function like function name(arg1, arg2) {…} can be defined using (arg1, arg2) =\u0026gt; {…}. Examples are as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 // JS regular function var arr = [1, 2, 3] arr.map(function (item) { console.log(index) return item + 1 }) // ES6 arrow function const arr = [1, 2, 3] arr.map((item, index) =\u0026gt; { console.log(index) return item + 1 }) The purpose of arrow functions is twofold. Firstly, it’s more concise to write. Secondly, it can solve the problem that this is a global variable when functions are executed before ES6. See the following code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function fn() { console.log(\u0026#39;real\u0026#39;, this) // {a: 100} ，The real value of \u0026#39;this\u0026#39; under this scope. var arr = [1, 2, 3] // JS regular function arr.map(function (item) { console.log(\u0026#39;js\u0026#39;, this) // window 。The second argument of the map function is undefined. If \u0026#39;this\u0026#39; is not set, it is defaulted to the top-level object, which is \u0026#39;window\u0026#39; in the browser. return item + 1 }) // ES6 arrow function arr.map(item =\u0026gt; { console.log(\u0026#39;es6\u0026#39;, this) // {a: 100} 。For the arrow function, the printed value is the \u0026#39;this\u0026#39; of the parent scope. return item + 1 }) } fn.call({a: 100}) Topic: How to use ES6 modules?\nModule The syntax of module in ES6 is simpler, directly see examples. If you only output a unique object, use export default. The code is as follows：\n1 2 3 4 5 6 7 // Create a file \u0026#39;util1.js\u0026#39;, the content is as follows. export default { a: 100 } // Create a file \u0026#39;index.js\u0026#39;, the content is as follows. import obj from \u0026#39;./util1.js\u0026#39; console.log(obj) If you want to output multiple objects, you can’t use default, and you need to add {…} when you import. The code is as follows:\n1 2 3 4 5 6 7 8 9 // Create a file \u0026#39;util2.js\u0026#39;, the content is as follows. export function fn1() { alert(\u0026#39;fn1\u0026#39;) } export function fn2() { alert(\u0026#39;fn2\u0026#39;) } // Create a file \u0026#39;index.js\u0026#39;, the content is as follows. import { fn1, fn2 } from \u0026#39;./util2.js\u0026#39; fn1() fn2() Topic: What’s the difference between ES6 ‘class’ and regular constructor functions?\nClass class has always been a keyword (reserved word) in JS, but it has not been formally used until ES6. The ‘class’ in ES6 is to replace the previous method of initializing objects with constructor functions, which is more object-oriented in syntax. For example:\nJS constructor function syntax:\n1 2 3 4 5 6 7 8 function MathHandle(x, y) { this.x = x; this.y = y; } MathHandle.prototype.add = function () { return this.x + this.y; }; var m = new MathHandle(1, 2); console.log(m.add()) ES6 class syntax:\n1 2 3 4 5 6 7 8 9 10 11 class MathHandle { constructor(x, y) { this.x = x; this.y = y; } add() { return this.x + this.y; } } const m = new MathHandle(1, 2); console.log(m.add()) Consider the following points, all about class syntax:\nclass is a new syntax form, it’s class Name {…}, which is completely different from function syntax\nComparing the two, the content of the constructor function body should be placed in the constructor function in the class, constructor is the constructor, it is executed by default when initializing the instance.\nThe way to write functions in class is add() {…}, without the function keyword.\nUsing class to implement inheritance is much simpler, at least simpler than implementing inheritance with constructor functions. See the following examples:\nJS constructor function implements inheritance\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // animal function Animal() { this.eat = function () { console.log(\u0026#39;animal eat\u0026#39;) } } // dog function Dog() { this.bark = function () { console.log(\u0026#39;dog bark\u0026#39;) } } Dog.prototype = new Animal() // husky var husky = new Dog() The way class is used in ES6 to implement inheritance\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Animal { constructor(name) { this.name = name } eat() { console.log(`${this.name} eat`) } } class Dog extends Animal { constructor(name) { super(name) this.name = name } say() { console.log(`${this.name} say`) } } const dog = new Dog(\u0026#39;husky\u0026#39;) dog.say() dog.eat() Notice the following two points:\nUsing extends can implement inheritance, which is more in line with the syntax of classical object-oriented languages, like Java.\nThe constructor of the subclass must execute super() to call the constructor of the superclass.\nTopic: What new data types have been added in ES6?\nSet and Map Set and Map are new data structures added in ES6. They extend the current JS array and object, the two important data structures. As they are newly added data structures, they are not widely used currently, but as a front-end programmer, it is necessary to understand them in advance. Let’s summarize the key points of both:\nSet is similar to an array, but arrays allow elements to be duplicated, whereas Set does not allow duplicate elements.\nMap is similar to an object, but regular object’s keys must be strings or numbers, whereas keys of a Map can be of any data type.\nSet A Set instance does not allow duplicate elements, which can be demonstrated in the following example. A Set instance can be initialized from an array or by adding elements using add. Duplicate elements will be ignored.\n1 2 3 4 5 6 7 8 9 10 // example 1 const set = new Set([1, 2, 3, 4, 4]); console.log(set) // Set(4) {1, 2, 3, 4} // example 2 const set = new Set(); [2, 3, 5, 4, 5, 8, 8].forEach(item =\u0026gt; set.add(item)); for (let item of set) { console.log(item); } // 2 3 5 4 8 Attributes and methods of a Set instance include:\nsize: Get the number of elements.\nadd(value): Adds an element and returns the Set instance itself.\ndelete(value): Deletes an element and returns a boolean indicating whether the deletion was successful.\nhas(value): Returns a boolean indicating whether the value is an element of the Set instance.\nclear(): Clears all elements without a return value.\n1 2 3 4 5 6 7 8 9 10 const s = new Set(); s.add(1).add(2).add(2); // Add element s.size // 2 s.has(1) // true s.has(2) // true s.has(3) // false s.delete(2); s.has(2) // false s.clear(); console.log(s); // Set(0) {} There are various methods to iterate over a Set instance:\nkeys(): Returns an iterator of key names.\nalues(): Returns an iterator of key values. However, as Set structures do not have key names, only key values (or say key names and key values are the same), keys() and values() result in the same values.\nentries(): Returns an iterator of key-value pairs.\nforEach(): Iterates over each member using a callback function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 let set = new Set([\u0026#39;aaa\u0026#39;, \u0026#39;bbb\u0026#39;, \u0026#39;ccc\u0026#39;]); for (let item of set.keys()) { console.log(item); } // aaa // bbb // ccc for (let item of set.values()) { console.log(item); } // aaa // bbb // ccc for (let item of set.entries()) { console.log(item); } // [\u0026#34;aaa\u0026#34;, \u0026#34;aaa\u0026#34;] // [\u0026#34;bbb\u0026#34;, \u0026#34;bbb\u0026#34;] // [\u0026#34;ccc\u0026#34;, \u0026#34;ccc\u0026#34;] set.forEach((value, key) =\u0026gt; console.log(key + \u0026#39; : \u0026#39; + value)) // aaa : aaa // bbb : bbb // ccc : ccc Map The usage of Map is basically the same as an ordinary object. Let’s first look at its feature of using non-string or non-number as a key.\n1 2 3 4 5 6 7 const map = new Map(); const obj = {p: \u0026#39;Hello World\u0026#39;}; map.set(obj, \u0026#39;OK\u0026#39;) map.get(obj) // \u0026#34;OK\u0026#34; map.has(obj) // true map.delete(obj) // true map.has(obj) // false You need to use new Map() to initialize an instance. In the following code, set, get, has, and delete are self-explanatory (this will also be demonstrated later). map.set(obj, ‘OK’) here is using object as the key (not only can it be an object, but any data type is allowed), and map.get(obj) correctly retrieves it later.\nThe attributes and methods of a Map instance are as follows:\nsize：Gets the number of members.\nset：Sets member’s key and value.\nget：Gets the member’s attribute value.\nhas：Checks whether the member exists.\ndelete：Deletes a member.\nclear：Clears all.\n1 2 3 4 5 6 7 8 9 const map = new Map(); map.set(\u0026#39;aaa\u0026#39;, 100); map.set(\u0026#39;bbb\u0026#39;, 200); map.size // 2 map.get(\u0026#39;aaa\u0026#39;) // 100 map.has(\u0026#39;aaa\u0026#39;) // true map.delete(\u0026#39;aaa\u0026#39;) map.has(\u0026#39;aaa\u0026#39;) // false map.clear() The methods to iterate over a Map instance are:\nkeys(): Returns an iterator of key names.\nvalues(): Returns an iterator of key values.\nentries(): Returns an iterator of all members.\nforEach(): Iterates over all members of the Map.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const map = new Map(); map.set(\u0026#39;aaa\u0026#39;, 100); map.set(\u0026#39;bbb\u0026#39;, 200); for (let key of map.keys()) { console.log(key); } // \u0026#34;aaa\u0026#34; // \u0026#34;bbb\u0026#34; for (let value of map.values()) { console.log(value); } // 100 // 200 for (let item of map.entries()) { console.log(item[0], item[1]); } // aaa 100 // bbb 200 // or for (let [key, value] of map.entries()) { console.log(key, value); } // aaa 100 // bbb 200 Promise Promise is a specification proposed by CommonJS. It has multiple versions and it has been included in the ES6 standard. ES6 natively supports Promise objects, and libraries like Bluebird and Q can be used for support in non-ES6 environments.\nPromise can make callback calls appear as chained calls, making the process more clear and the code more elegant.\nIn short, promise can be summarized as three statuses, two processes, and one method. A quick way to remember is “3–2–1”:\nThree statuses: pending, fulfilled, rejected\nTwo processes:\npending to fulfilled (resolve)\npending to rejected (reject)\nOne method: then\nOf course, there are other concepts like catch, Promise.all/race, but we will not expand on them here.\n","date":"2024-01-26T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*OZL33xhjFl0XFUmv","permalink":"http://localhost:1313/p/analysis-of-es-basic-knowledge-points/","title":"Analysis of ES basic knowledge points"},{"content":"Why is ref recommended over reactive? Reactive has some limitations:\nLimited value types: It can only be used for object types (objects, arrays, and collection types such as Map, Set). It cannot hold primitive types like string, number, or boolean.\nUnable to replace the entire object: Because Vue’s reactive tracking is implemented through property access, we must always maintain the same reference to the reactive object. This means we cannot easily replace a reactive object, because this would lose the reactive connection with the initial reference;\nNot friendly to deconstructive operations: When we deconstruct the primitive type properties of a reactive object into local variables, or pass the properties to a function, we will lose the reactive connection.\nRef Unwrapping Only the top-level ref properties will be unwrapped in the context of template rendering. Unlike reactive objects, a ref will not be unwrapped when it is accessed as an item in a reactive array or a native collection type (like Map).\nTiming Issue with watchPostEffect By default, the listener callbacks created by users will be called before the Vue component update. This means the DOM accessed in the listener callback will be in the state before Vue’s update. If you wish to access the DOM in the listener callback after Vue’s update, you need to specify the flush: ‘post’ option.\n1 2 3 4 5 6 7 8 9 10 11 12 13 watchEffect( (onCleanup) =\u0026gt; { console.log(document.getElementById(\u0026#39;pel\u0026#39;)); console.log(\u0026#39;WatchEffect: Count changed:\u0026#39;, state.count); // console.log(\u0026#39;WatchEffect: pel changed:\u0026#39;, pel.value); onCleanup(() =\u0026gt; { console.log(\u0026#39;WatchEffect: onCleanup\u0026#39;); }); }, { flush: \u0026#39;pre\u0026#39;, }, ); Through testing, the difference between the two is that when using ‘pre’, the webpage gets null when it first fetches DOM from the document. But with ‘post’, it’s able to fetch the DOM.\nReturn Value of watchEffect:\nBoth watchEffect and watch return a stop function. Once this function is executed, the listening will stop.\nParsing Native HTML as Vue Component Certain HTML elements have restrictions on the types of elements placed within them, such as \u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, \u0026lt;table\u0026gt;, and \u0026lt;select\u0026gt;. Correspondingly, certain elements will only be displayed when placed within specific elements, such as \u0026lt;li\u0026gt;, \u0026lt;tr\u0026gt;, and \u0026lt;option\u0026gt;. This can cause problems when using components with such restricted elements. For example:\n1 2 3 \u0026lt;table\u0026gt; \u0026lt;blog-post-row\u0026gt;\u0026lt;/blog-post-row\u0026gt; \u0026lt;/table\u0026gt; The custom component will be ignored as invalid content, thus causing errors in the final rendered output. We can use the special is attribute as a solution:\n1 2 3 \u0026lt;table\u0026gt; \u0026lt;tr is=\u0026#34;vue:blog-post-row\u0026#34;\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; When used on native HTML elements, the value of ‘is’ must be prefixed with ‘vue:’ to be parsed as a Vue component. This is necessary to avoid confusion with native custom built-in elements.\nDefineProps is a macro declaration in Vue 3, what is a macro declaration? Macro declaration is a common concept in programming languages, usually referring to the declaration of a macro in the code using specific syntax. Macros can be understood as substitution rules for code snippets, which are expanded or replaced with actual code during compilation.\nMacro processing refers to the process of dealing with macros during the compilation stage. When a macro declaration appears in the program code, the compiler will replace the usage of the macro with actual code during the compilation stage based on the definition of the macro. This process is similar to performing text replacement in the code.\nIn the context of Vue 3, defineProps is a macro declaration. It is used to declare the attributes received in the child component and transform these attributes into data with reactivity. The process of macro processing takes place during the compilation stage, and when Vue compiles the code of the child component, it will transform the attributes into reactive attributes according to the declaration of defineProps.\nHere is a more specific explanation:\nMacro Declaration: In Vue 3, defineProps is a type of macro declaration. You use defineProps in the setup function of your child component to declare the attributes your component receives, telling the Vue compiler that these attributes should have reactivity.\nMacro Processing: During the compilation stage, the Vue compiler processes the child component’s code. When it encounters a place where defineProps is used, the compiler transforms the attribute declaration into a reactive attribute definition, giving it the ability to automatically track changes at runtime.\nv-bind Binding Object If you want to pass all the properties of an object as props, you can use v-bind without an argument, i.e., use v-bind instead of :prop-name. For example, here is a post object:\n1 const post = { id: 1, title: \u0026#39;My Journey with Vue\u0026#39;} And the following template:\n1 \u0026lt;BlogPost v-bind=\u0026#34;post\u0026#34; /\u0026gt; However, this is actually equivalent to:\n1 \u0026lt;BlogPost :id=\u0026#34;post.id\u0026#34; :title=\u0026#34;post.title\u0026#34; /\u0026gt; onMounted call stack synchronicity When onMounted is invoked, Vue automatically registers the callback function on the currently being initialized component instance. This means these hooks should be registered synchronously when a component is initializing. For example, don’t do this:\n1 2 3 4 5 setTimeout(() =\u0026gt; { onMounted(() =\u0026gt; { // ... }) }, 100) Please note that this does not mean that calls to onMounted have to be placed within the lexical context of setup() or \u0026lt;script setup\u0026gt;. onMounted() can also be called from an external function, provided the call stack is synchronous and ultimately originates from setup().\nSuspense and Asynchronous Components How to determine asynchronous components:\nComponents defined by the defineAsyncComponent function.\nComponents with an asynchronous setup() hook. This also includes\nComponents with top-level await expressions when using \u0026lt;script setup\u0026gt;.\nThree events of Suspense:\nThe ‘pending’ event is triggered when entering the suspended state.\nThe ‘fallback’ event is triggered when the fallback slot content is displayed.\nThe ‘resolve’ event is triggered when the default slot has finished fetching new content.\nThe execution sequence is as follows: pending -\u0026gt; fallback -\u0026gt; resolve\nWhat is suspension?\nSuspension recognizes that the components within Suspense have asynchronous dependencies. It waits for these to complete and then reaches a ‘completed’ state.\nIf no asynchronous dependencies are encountered during the initial rendering, then it will not enter the suspended state and \u0026lt;Suspense\u0026gt; will directly complete.\nTimeout parameter in Suspense:\nAs the official documentation describes it\nWhen a fallback happens, the backup content is not presented immediately. Instead, \u0026lt;Suspense\u0026gt; displays the previous #default slot content while it waits for new content and asynchronous dependencies to complete. This can be controlled with a timeout prop: After waiting longer than the timeout for new content to render, \u0026lt;Suspense\u0026gt; switches to display the backup content. If the timeout value is set to 0, the backup content will be displayed immediately upon the replacement of the default content.\nWhat does this mean? For example, if I had already completed loading an asynchronous component for the first time and the content in default had changed and needed to load asynchronous dependency resources again, say it took 3 seconds to complete, and I set the timeout to 1000 ms, then the original default content would stay on the page for 1000 ms, then render the content in the fallback slot. When the asynchronous task is completed, the default content would be displayed again.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;Suspense @pending=\u0026#34;pending\u0026#34; @fallback=\u0026#34;fallback\u0026#34; @resolve=\u0026#34;resolve\u0026#34; :timeout=\u0026#34;1000\u0026#34; \u0026gt; \u0026lt;AsyncComp v-if=\u0026#34;show\u0026#34;\u0026gt;\u0026lt;/AsyncComp\u0026gt; \u0026lt;div v-else\u0026gt;AsyncComp else \u0026lt;/div\u0026gt; \u0026lt;template #fallback\u0026gt; \u0026lt;div\u0026gt;loading...\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Suspense\u0026gt; Asynchronous Components\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;sleep\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; function sleep(time: number) { return new Promise\u0026lt;void\u0026gt;((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(); }, time); }); } await sleep(3000); Implementing v-model with Custom Components. 1 2 3 4 5 6 7 8 9 10 const props = defineProps\u0026lt;{ visible: boolean; }\u0026gt;(); const visible = computed({ set: (val) =\u0026gt; emit(\u0026#39;update:visible\u0026#39;, val), get: () =\u0026gt; props.visible, }); \u0026lt;a-modal v-model:visible=\u0026#34;visible\u0026#34; centered :footer=\u0026#34;null\u0026#34;\u0026gt; Custom Modifiers — modelModifiers In addition to the few set by the officials, modifiers can also be implemented by oneself.\nFor example, in the next example, different logical judgments can be made based on whether ‘capitalize’ exists in props.modelModifiers.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;!-- Parent --\u0026gt; \u0026lt;MyComponent v-model.capitalize=\u0026#34;myText\u0026#34; /\u0026gt; \u0026lt;!-- Child --\u0026gt; const props = defineProps({ modelValue: String, modelModifiers: { default: () =\u0026gt; ({}) } }) defineEmits([\u0026#39;update:modelValue\u0026#39;]) console.log(props.modelModifiers) // { capitalize: true } \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; :value=\u0026#34;modelValue\u0026#34; @input=\u0026#34;$emit(\u0026#39;update:modelValue\u0026#39;, $event.target.value)\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; or\n1 2 3 4 5 6 7 8 9 10 11 interface IProps { // selectPlan: \u0026#39;Yearly\u0026#39; | \u0026#39; Monthly\u0026#39;; selectPlan: string; modelModifiers?: { default: () =\u0026gt; Record\u0026lt;string, unknown\u0026gt; }; } const props = withDefaults(defineProps\u0026lt;IProps\u0026gt;(), { selectPlan: \u0026#39;Yearly\u0026#39;, }); console.log(props.modelModifiers); // {aaa:true} \u0026lt;Paypal v-model.aaa=\u0026#34;xxxx\u0026#34; \u0026gt;\u0026lt;/Paypal\u0026gt; Attribute Penetration “Pass-through attributes” refer to attributes or v-on event listeners that are passed to a component but are not declared as props or emits by the component. The most common examples are class, style, and id.\nWhen a component is rendered as a single element root, the passed-through attributes are automatically added to the root element. For example, if we have a component, its template looks like this:\n1 2 3 4 5 \u0026lt;!-- \u0026lt;MyButton\u0026gt; temp--\u0026gt; \u0026lt;button class=\u0026#34;aa\u0026#34;\u0026gt;click me\u0026lt;/button\u0026gt; \u0026lt;!-- use --\u0026gt; \u0026lt;MyButton class=\u0026#34;large\u0026#34; /\u0026gt; At this time, when this button is truly rendered, the class attribute of this node node is 2, “aa” and “large”.\nDisabling Attribute Inheritance\nFrom version 3.3, you can also use defineOptions directly in \u0026lt;script setup\u0026gt;\nThe same rules also apply to v-on event listeners\n1 2 3 4 5 \u0026lt;script setup\u0026gt; defineOptions({ inheritAttrs: false }) \u0026lt;/script\u0026gt; The click listener will be added to the root element of \u0026lt;MyButton\u0026gt;, that is, on the native \u0026lt;button\u0026gt; element. When the native \u0026lt;button\u0026gt; is clicked, it will trigger the parent component’s onClick method. Likewise, if the native button element itself also binds an event listener through v-on, both this listener and the listener inherited from the parent component will be triggered.\nAccessing Pass-through Attributes in JavaScript\n1 2 3 4 5 \u0026lt;script setup\u0026gt; import { useAttrs } from \u0026#39;vue\u0026#39; const attrs = useAttrs() \u0026lt;/script\u0026gt; Principles of Using Provide Injection When providing/injecting reactive data, it is recommended to keep any changes to the reactive state as much as possible within the provider component. This can ensure that the declaration and modification operations of the provided state are all contained within the same component, making it easier to maintain.\nSometimes, we might need to change the data in the injection component. In this case, we recommend declaring and providing a method function to change the data within the provider component.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script setup\u0026gt; import { provide, ref } from \u0026#39;vue\u0026#39; const location = ref(\u0026#39;North Pole\u0026#39;) function updateLocation() { location.value = \u0026#39;South Pole\u0026#39; } provide(\u0026#39;location\u0026#39;, { location, updateLocation }) \u0026lt;/script\u0026gt; Using Symbol as Injection Name\nIf you are building a large application with many dependency providers, or you are writing a component library for other developers, it is best to use Symbols as injection names to avoid potential conflicts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // keys.js export const myInjectionKey = Symbol() js // provide Comp import { provide } from \u0026#39;vue\u0026#39; import { myInjectionKey } from \u0026#39;./keys.js\u0026#39; provide(myInjectionKey, { /* data */ }); js // inject Comp import { inject } from \u0026#39;vue\u0026#39; import { myInjectionKey } from \u0026#39;./keys.js\u0026#39; const injected = inject(myInjectionKey) Compilation Build Steps and Component Templates When you use Vue, there are two main ways to handle component templates: one is the method with no build steps, the other is with build steps.\nNo build step method: In the instance of no build steps, you can directly write the component template in the page’s HTML code or as an inline JavaScript string. However, in this case, for the dynamic template to work properly, Vue needs to run the template compiler in the browser. This means that Vue will dynamically compile the template in the browser, then execute the rendering.\nUse of build steps: When you use build steps, the template is pre-compiled, without the need to run the template compiler in the browser. This can reduce the size of the client code and improve performance. To adapt to different optimization needs, Vue provides several formats of “build files”.\nFiles with the prefix vue.runtime.* are versions that only include the runtime, and do not include the compiler. If you use this version, all templates must be pre-compiled in the build step.\nFiles not containing .runtime are the full version, including the compiler, and can compile templates directly in the browser. However, as it includes the compiler, the file size will increase by about 14kb.\nBy default, the toolchain will use the version that only contains the runtime, because in the case of using build steps, all the templates in single file components (SFC) have been precompiled. However, if you still need the browser’s template compiler in the case of build steps, you can change the configuration of the build tool and change the version of Vue to the corresponding version, such as vue/dist/vue.esm-bundler.js.\nIn summary, this passage explains how to handle Vue component templates in different circumstances, as well as how to select the appropriate version of Vue according to whether or not build steps are used, in order to optimize the size and performance of client-side code.\nMethod Handlers and Inline Handlers in Vue3 What’s the difference between calling a method via @click=”foo()” and directly using @click=”foo”?\nfoo() will eventually turn into a function like () =\u0026gt; foo(), which means that foo cannot get the event argument. But for direct foo, foo can receive the event argument.\nThe generic attribute on the component \u0026lt;script\u0026gt; tag declares generic type parameters When writing subcomponents, if you are unsure of the type of the argument passed in from the outside, you can use the generic attribute to declare a generic.\nIn this way, when the outside world uses the subcomponent, the type of data it passes in is certain. The subcomponent gets this type and throws it back, so you can get the type when you use scoped slots.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Child \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; list \u0026lt;slot name=\u0026#34;header\u0026#34; :expos=\u0026#34;props.list\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34; generic=\u0026#34;T\u0026#34;\u0026gt; const props = defineProps\u0026lt;{ list: T[]; }\u0026gt;(); \u0026lt;/script\u0026gt; Type Annotations for Component Template References Sometimes, you may need to add a template reference to a child component in order to call its public methods. For example, we have a MyModal child component, which has a method to open the modal box:\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- MyModal.vue --\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { ref } from \u0026#39;vue\u0026#39; const isContentShown = ref(false) const open = () =\u0026gt; (isContentShown.value = true) defineExpose({ open }) \u0026lt;/script\u0026gt; To get the type of MyModal, we first need to use typeof to get its type, then use the TypeScript built-in tool type InstanceType to get its instance type.\n1 2 3 4 5 6 7 8 9 10 \u0026lt;!-- App.vue --\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import MyModal from \u0026#39;./MyModal.vue\u0026#39; const modal = ref\u0026lt;InstanceType\u0026lt;typeof MyModal\u0026gt; | null\u0026gt;(null) const openModal = () =\u0026gt; { modal.value?.open() } \u0026lt;/script\u0026gt; Advantages of Composition API Better Logic Reuse: The most fundamental advantage of the Composition API is that it allows us to achieve more concise and efficient logic reuse by combining functions. This is a significant improvement over the Options API, which primarily employs mixins for logic reuse.\nEnhanced Code Organization: The Composition API allows for more flexible code organization. In the Options API, the codes for different functional operations might be scattered throughout various sections of a file. The Composition API, on the other hand, facilitates the organization of codes such that they can be focused in the same area.\nImproved Type Inference: The composition API brings about better type inference in Integrated Development Environments (IDE), thereby enhancing the developer’s coding experience with better autocompletion, less ambiguity, and fewer errors.\nSmaller Production Bundle: The use of Composition API leads to smaller production bundles. This happens because the Composition API’s template code is compiled into inline functions that share the same scope with the script setup code, hence the compiled template can directly reference local variables. This characteristic of the Composition API also makes it more compression-friendly.\nUsing Composition API with \u0026lt;script setup\u0026gt; is more efficient than the equivalent option API, and it is also more friendly to code compression. This is because the component template written in \u0026lt;script setup\u0026gt; form is compiled into an inline function, and the code in \u0026lt;script setup\u0026gt; is in the same scope. Unlike the Options API which needs to rely on the this context object to access properties, the compiled template can directly access variables defined in \u0026lt;script setup\u0026gt;, without the need for proxying from the instance. This is more friendly to code compression because local variable names can be compressed, but object property names cannot.\n","date":"2024-01-25T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2VUijywcHU32qLVrQ7BFbA.png","permalink":"http://localhost:1313/p/the-details-about-vue3-that-you-didnt-know/","title":"The Details About Vue3 that You Didn’t Know"},{"content":"To improve our logical expression and solve confusion and disorganization in thinking, first, we need to understand a term: Structured Thinking.\nBenefits of Structured Thinking Structured thinking is a concept proposed by McKinsey \u0026amp; Company, it discusses an organized and systematic approach. McKinsey has a very famous principle called the Pyramid Principle, which even has an associated book.\nWhat does it mean? Simply put, they believe that anything can be boiled down to a central thesis, which can be supported by three to seven arguments.\nThese primary arguments themselves can also be a thesis, then supported by second-level arguments branching out into shapes like a pyramid, hence the name “Pyramid Principle”.\nFor every layer of the pyramid, there is a particularly stringent requirement called ‘MECE’, which stands for mutually exclusive, collectively exhaustive. In other words, these arguments must be independent of each other, not overlapping, but when put together, they are completely exhaustive and leave no room for omission.\nThe principle of ‘no omission’ ensures accuracy. As McKinsey provides consulting services and helps identify problems in other companies, nothing can be missed. By ‘not overlapping’, unnecessary efforts can be avoided.\nTherefore, when they write something, especially when they write consultation reports, they have to write in accordance with the MECE principle.\nIn the process of speaking, when we argue a point, we don’t necessarily need to exhaust it without omission, but this structure is very classic.\nFor instance, if my colleague is familiar with the pyramid structure, he would use another method when reporting to me.\nHe might say: ‘Look, this is our sales situation last month. Whether it is good or bad.’ As a boss, what I am worried about is the performance last month, overall, is it good or bad, give me the point first.\nThen you can provide the evidence. The reason for the poor performance is that we had fewer promotional activities last month and only had three, shown as the three rises in this graph.\nAnd we also had a big drop, which is the second argument, and then tell me why.\nExpressing it in the structure of the pyramid enables me to patiently listen and feel that he has shared the key points I want to know in a timely manner.\nThe pyramid structure is indeed a classic and useful one, mastering the pyramid structure can help those who are verbose, without a focus or level in speaking, to basically handle most situations in life.\nWhether you have to report to the company, or discuss where humans come from and what the meaning of life is, you can use the pyramid structure to describe and express these. Even if you decide what to eat in the morning and what to buy when you go shopping, you can use the pyramid structure to express it.\nIf time is insufficient and the listener is impatient, when you speak, just state what your central thesis is, and then mention the primary argument.\nIf there is enough time and we have to make a detailed report, we may need to clarify the secondary or even tertiary arguments.\nExpressing in this way ensures that at least you can clearly state what you mean. Therefore, the pyramid principle is definitely a weapon in our communication, dialogue and writing.\nUnder this principle, we only need to remember two sentences:\nConclusion first, state the central thesis first.\nThe arguments are independent of each other and do not overlap.\nIf you remember these two, we can basically speak more structured, layered and clear when expressing.\nHow important it is to express in a structured way, because speaking is linear, meaning it passes as soon as you finish listening to a word, so if you speak particularly randomly, it is difficult for others to understand.\nIt would be best if you had an expression structure while speaking, which is related to the characteristics of speech.\nBut the second reason I’m sharing today is that when we think about things, for example, when I ask you: Why do people get married?\nYour brain is actually fragmented in thinking, you may think: marriage is for having children, if you get married, you can find someone to spend your life with.\nAll of these are fragmentary, messy, your thoughts in your brain are strung together.\nSo, you need to have a structured way of thinking, pick out a structure for those thoughts, first state what your main view is, and then discard some of the less important bits, laying out the important arguments one by one.\nOnly by expressing in this way can you clear up your thoughts and let others understand your true thoughts.\nThis is actually related to our way of thinking and the process of our own thinking, so you must have structured thinking, and then you can express in a structured manner.\nThree Steps to Train Structured Thinking. So, how should we train this kind of thinking? There are three steps.\nThe first step is called Chunking.\nFirst, you need to have the ability to chunk. This ability of chunking is not only related to your expression, but also related to your reading comprehension and your memory ability. In my opinion, all these three abilities need to use chunking.\nFor example, we just said that the pyramid structure can help you solve small problems in life, such as what to buy when you go to the supermarket today?\nYou might say: I go to the supermarket, I want to buy coriander, I want to buy ginger, I want to buy cooking wine, buy cabbage, buy tomatoes, and buy some oranges.\nIf you say it this way, it’s hard for others to remember, and it doesn’t seem clear.\nYou should say: I am going to buy three things at the supermarket today. Firstly, I need to buy condiments, secondly, I need to buy vegetables, thirdly, I need to buy fruits. So when I get to the supermarket, I need to go around by each area.\nIf you express it this way to me, I will understand more clearly.\nThese are all details of life. We may not notice them usually, but the expression of chunking is indeed clearer.\nWhat are the standards for chunking?\nThe standard we just used for chunking is category, which is the first one.\nTime can also be used as a standard for chunking. For example, if I ask you: what did you eat today?\nThen you can tell me: I ate steamed buns and porridge this morning, I ate something for lunch, and something for dinner.\nThis way of expression is chunking according to time.\nAlso, when my colleague reports to me about our company’s sales last month, he can report to me in this way. Firstly, the categories of what we did well and what we did not do well last month; and also chunk by time, the sales situation last month could be broken down into three stages.\nDo you find that expressing it this way is clearer?\nSo, the ability to chunk is the basis of our structured thinking.\nThis is the first one, called the ability to chunk, and the process of chunking can not only help you express more clearly, but also help you make trade-offs. In fact, there are a lot of unimportant details, and you will find that these can’t be included in your chunks.\nFor example, in our last month, there were three good places and four not-so-good places. But some mediocrities were discarded and not worth mentioning.\nBut if you say it all at once from beginning to end, you will say it, and others will find it verbose to listen.\nSo, the process of chunking can help you make trade-offs and sideline some not-so-important content, then categorize the important content through chunks.\nThe second step is to Refine.\nWe have broken down the content into chunks. For example, last month’s sales situation can be divided into three stages: the growth stage, the plateau stage, and the decline stage.\nThe second thing I need to do is summarize a concise sentence or keyword for each chunk, which is what is the main content of this chunk.\nKeywords and brief phrases can remind you of what to talk about when you see these keywords and phrases, and they can make clear the topic of this part, so others can know more clearly what the emphasis is in this part.\nSo when you express yourself, whether you need to make a PPT or not, many people think that only when I make a PPT, do I need to give each PPT a title to tell others what this chapter is about.\nBut actually, in the process of speaking, your brain can figure out the theme sentence and key words of this chunk through your training, slowly and without you having to write it down.\nThe third step is to order.\nWhen you have chunked your content and refined keywords and theme sentences for each chunk, at that point, you need to sort it out in your mind. How should I specifically say it?\nThrough chunking, refining, and ordering, we have completed a very layered and clear expression.\nHow does this ability come about?\nIt is trained through a lot of reading, memorization, and recapitulation.\nHowever, if you are in a hurry, like you are about to make a speech or report, and you are a person who speaks without levels and is verbose, what should you do?\nThe first method is called drawing your logic diagram.\nThink about when we usually argue a topic, for example, this topic is: why I think pigs should be kept as pets.\nThen I want to list all the ideas under my viewpoint.\nFor example, pigs have fur, rabbits have fur, cats have fur, so they are kept as pets. I think pigs have fur, so pigs should also be kept as pets. Pigs are easy to raise, the cost is low, pigs can also be put in a pen, and they don’t need to be walked every day.\nIn short, list all your ideas, maybe ten, twenty, a lot. It doesn’t matter, list all you can think of.\nDraw these thoughts into a mind map, you can use mind mapping tools, or you can use Baidu mind mapping. These are some small pieces of software that are easy to start with.\nThe advantage of using them is that when you go to delete and move in the next step, it would be easier. If you do it yourself, it is not easy to move back and forth.\nSo you have to draw all your thoughts into the mind map. After that, the second step is to organize these thoughts and do the chunking.\nFor example, you can say pigs are cheap to buy. If you buy a dog or a cat, it costs over a thousand dollars. But a pig only costs a few tens of dollars and is also easy to raise. The feed is priced low.\nActually, these all belong to a category. They all say that the cost of raising pigs is low. You need to categorize them together.\nSo, categorize all your ideas, because while thinking, one thought might encompass another, and it’s also possible that all the ideas are very detailed but they have common points.\nYou need to organize your thoughts by chunking.\nAfter the organization, you will find that some of the ideas are not very important and can’t be categorized, so you can delete them.\nThen the third step is to refine each chunk.\nFor example, we just mentioned that pigs are cheap to buy, cheap to feed, when pigs get sick, veterinarians for pigs are cheaper than vets for cats, etc.\nYou refine these thoughts into a point, called “low cost of raising pigs”.\nAfter the “low cost” point is refined, you can think more about whether there are any other cases, any other evidence that you know, or that everyone is familiar with, you can add them as you see fit, depending on the time.\nAt the last step, look at your viewpoint and the summarized arguments, and do a sequence, that is, which should be said first, and which should be said later.\nThis is the process of forming an expression, a speech.\nLogical Thinking Must Be Applied for Concise Expression. But have you noticed that these methods I told you can only ensure that you speak clearly, but they cannot guarantee that what you said makes sense.\nTaking the pig topic as an example, why should pigs be bred as pets?\nYou gave three reasons, 1. Pigs are cheaper and the cost of raising them is lower; 2. Pigs can be raised in a pen. If you raise a wild horse, it needs a prairie, you certainly can’t keep it as a pet; 3. Pigs are more aesthetically pleasing, some Dutch pigs are very cute and fun.\nSo you believe that these three points are the reasons why pigs can be considered as pets.\nIndeed, you spoke very clearly, but it is not necessarily convincing. Because pigs are not cheap, and it has little to do with them becoming pets.\nYou can’t say, just because pigs are quite cheap, we should keep them as pets. In fact, there are many cheap animals, can all be kept as pets?\nThere might be another reason that is more convincing, pigs are not aggressive. I believe that a condition that must be met to keep a pet is that the pet can not be attacking. You can’t keep a Northeast tiger at home.\nSo remember, if you want to achieve concise expression, you must at least ensure that the logic is smooth. Many people speak illogically, for example, the other day, I saw a franchise meeting. It was very grand and glorious, but the words spoken by the people on the stage were illogical.\nHe hoped that the people at the scene would take the distribution of this product and join his company, but he kept saying how difficult it was to manage this brand, under the pressure of everyone, and having gone through hardships. Then finally he said to everyone: I hope you can join me.\nI thought: there is no relationship between your viewpoint and your arguments. Whether you have it hard or not, has no connection with whether others should join.\nSome of the logical errors when speaking are not so serious, such as appeals to authority. This error is actually a serious logical error.\nIs what a certain expert says always right? Or seeing some brand endorsed by celebrities, does endorsement by stars mean it’s good?\nAppealing to authority is a logical error, but it is persuasive. The audience will buy your story.\nHowever, if your logical errors are so serious that others find it absurd after listening, or they doubt you and want to challenge you, then you’re done.\nMost Common Logical Errors\nThere are a few serious logical errors that you absolutely should not make.\nThe first is irrelevance.\nThe example of the franchise meeting I just mentioned is the first type, called irrelevance.\nThat is, your story, or your argument, has nothing to do with your theme.\nThis error may sound childish and foolish, but indeed many people are making it. The story they tell has nothing to do with their ultimate point.\nSo among all the logical errors, I think this is the most important one, called irrelevance.\nThe second is false attribution.\nThe cause and result are mismatched, which can be broken down as follows:\nThe first situation is a common error, which is attributing multiple causes to a single one.\nI read a book before, it said that Taiwanese painter Tsai Chih Chung sleeps at five or six o’clock when the sun sets, gets up at one in the morning, and works until two in the afternoon. He only eats one meal a day and is in good health. Then my friend came to a conclusion: See, eating one meal a day is good for health.\nHis good health and longevity might have to do with him eating only one meal a day, but there are other reasons.\nFor example, he has a good mentality, and where he lives is relatively good. So we can’t attribute multiple reasons to a single one. In doing so, people will find you arbitrary, unpersuasive, and logically erroneous.\nThis is the first situation of false attribution, attributing multiple causes to one cause.\nThe second situation is treating the accidental as necessary.\nFor example, this morning when I went out, I made a wish and hoped to make a fortune. Then in the afternoon, I found 100 yuan on the street. Did I pick up the 100 yuan because of the wish I made? This is treating the accidental as necessary. The connection between them is just a coincidence. If you speak to others in this way, they will feel that your logic is flawed.\nThe third situation of false attribution is “broken cause.”\nFor example, you say the reason you’re not happy after you grow up is because your parents didn’t treat you well during your childhood. But in fact, you’ve encountered a lot of other things after your childhood. For example, your marriage failed, and your job search didn’t go well — in short, you’ve been out of luck everywhere.\nIf you use a cause from many years ago that has been disrupted as a reason to explain, others will also think there is a problem when they listen.\nThese are the three types of false attribution errors we commonly see: attributing multiple causes to a single one, broken cause, and mistaking the accidental for the necessary.\nThe fourth is “overgeneralization.”\nSometimes, we really want to persuade others so much that we will use some extreme words.\nFor example, “No man is good.” When people hear this, they subconsciously want to refute you.\nAnd then there is, “Only by following me can you make money.” Can’t you make money following others?\nSo be careful with these extreme words, do not overgeneralize.\nBecause, one bad consequence brought by overgeneralizing is that if there is any counterexample in the mind of the person listening to you, they will think you have a problem with your logic and will not believe what you say.\nThe fifth is “unclear concept.”\nFor example, I think our company should cultivate more management talents, what is “more”? What is “management talent”?\nIf you always use such vague and ambiguous concepts to talk, it is easy to have a dispute during the process of communicating with others.\nIf you are a boss and you speak so ambiguously, in general, your subordinates will not execute and not take responsibility.\nThese are some of the serious logic mistakes we mentioned. There can be over 20 types of common logical errors, but we can’t go over them one by one today. The most important one is the first one we mentioned today, called irrelevance.\nIn the process of speaking, we are not able to exhaust all the reasons and evidence, as suggested in McKinsey’s Pyramid Principle.\nHowever, when we speak, we must ensure that there is a connection between our points and evidence. This is the most basic requirement for us to achieve at the level of logic.\n","date":"2024-01-24T01:56:45+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*bZpprxDx3GEMPflw","permalink":"http://localhost:1313/p/how-to-develop-logical-thinking-in-speaking/","title":"How to Develop Logical Thinking in Speaking?"},{"content":"To a certain extent, a person’s understanding ability can determine how broad their path is. Reading comprehension is a fundamental ability of a person, which is very important. It affects your memory, your expression, your thinking, and also your communication skills. Sometimes, you feel like, “Why can’t I always remember things?” Then you blame yourself for your poor memory and want to learn some memory techniques. But it’s not necessarily about memory, it might be that your understanding or reading comprehension is too poor. Because you can’t understand and process the material well or find its logical line, you can’t remember things. I’ve seen that among people who have problems with memory, eight or nine out of ten have problems with reading comprehension.\nThere are also some people who feel that their expressive ability is poor and often don’t know what to say or don’t know how to respond to what others are saying. That’s because they don’t have enough input in their minds. In other words, they have too little information input in their brains, so they can’t think of what to say, and they have nothing to say.\nAnd then there’s thinking ability. Many people feel they’re not clear in their thinking, which is because they’re not capable enough to process information. There might be a pile of things in their brains that are not organized or logical, and they get more and more confused as they think. Reading comprehension is essentially about processing information; seeing an object and reading and understanding it is processing the information the object gives me. So if your reading comprehension is not strong, and your information processing ability is relatively weak, your brain will not think clearly.\nFinally, why is reading comprehension related to the ability to communicate with others? If a person has no problem with reading comprehension, then when he listens to others speaking, he can understand the logical flow of the speech, what the key points in the speech are, and easily understand the speaker’s intention, making it easier to communicate. So reading comprehension is actually the foundation for all of these, including thinking ability, the ability to communicate with others, expressive ability, and memory. It’s very important. This is why we need to read a lot. There are many benefits to reading.\nFirstly, reading can make a person rational, and if you don’t read, it’s easier to lack rationality. Because once a person doesn’t read, then his judgment on all things will mainly come from his own experience. But how much experience can a person have in his lifetime? Sometimes his strength is quite thin, so when he looks at things, he easily lacks rationality, is biased and lacks the ability to think critically. When a person doesn’t have much idea or concept about something, it’s also easy to be blind.\nFor example, I once heard someone promoting a weight loss tea, saying it’s not only good for weight loss, but also very healthy. You’ll realize your fatty liver has improved and your body fat percentage has risen or fallen after drinking the tea, in any case, your body will get better. There were testimonials on the spot: “I used the weight loss tea and it worked.” Based on experience, wouldn’t most people doubt that this testimonial could be fake? But if you actually tried it and found that it does cure your fatty liver, what would you think? Would you find it reliable?\nYou would feel that it’s safe and healthy, that it’s a good weight loss tea. You buy it right away and recommend it to your friends. But if your reading scope is a little wider, such as when I first learned about weight loss tea, I remembered a book about medicine I had read before that mentioned many medicines can treat one disease, but can cause another.\nI thought that the tea might improve your fatty liver, but that doesn’t necessarily mean the tea is healthy, because you don’t know how it affects your other bodily functions. So I would be prudent and wouldn’t buy it lightly, which is a display of rationality. This is the source of a person’s ability to judge. When you see a statement, a method, and you think it’s right, you believe it.\nHowever, you have seen contrasting statements and actions. Among these two types of statements and actions, you need to decide which one to believe. This process is judgment. So the more you read, the more information you have in your head, the more different perspectives you know about one thing, the stronger your judgment will be.\nThe second benefit of reading is that books themselves are a valuable educational resource, and reading good books is a shortcut. You might say, “I have no money to attend extracurricular tutoring classes from early age, nor to travel.” It doesn’t matter, you can read books. Good education is not necessarily given in schools, especially in today’s exam-oriented education system. Good education is in books.\nIf I could only choose one extracurricular class for my future child, I wouldn’t choose dance or piano, I would definitely choose reading. You can have direct conversations with Bill Gates, learn directly from Buffett by reading. When you want to learn, you read good books. Books can help you break through your reality, and have conversations with the smartest and best people in the world.\nMany people overlook this resource. They’d rather chat with a friend who can’t tune in or ask a teacher who’s not reliable, but they don’t want to read books, thus completely wasting this resource of good books.\nThe third benefit of reading is that it can make you confident. Here, we divide confidence into conditional and unconditional confidence. Conditional confidence is simple to understand, it means that confidence is conditional. For example, looks-confidence, people who are good-looking can be confident. Why do some beautiful girls lack confidence? Because they don’t realize they’re beautiful. Those girls who realize their beauty often feel a sense of superiority. Another kind of conditional confidence is material confidence. Being rich does make people confident. If you don’t agree with this, it means you’re not rich yet.\nWhen a person suddenly makes a lot of money, you’ll find that he speaks louder, he realizes that he has money, which gives him a sense of confidence. In addition to looks-confidence and material-confidence, there’s also a kind of conditional self-confidence, which is called knowledge-confidence. When others don’t know something but I do, when others don’t know why but I do, when others don’t know how to do something but I do. So gradually, every time I am recognized by others, I become confident, I can often guide others, and I become a so-called KOL (Key Opinion Leader).\nAmong my classmates, there was a girl who knew a lot. When we were in the first year of junior high school, kids just realized being fat was not good-looking and they needed to lose weight. But this girl knew the principle of weight loss. She told us at that time: “You shouldn’t eat carbohydrates. They’re the first source of energy. When you’re lacking energy, you’ll first use these carbohydrates. So if you eat too much of this stuff, it’ll turn into fat and be stored in your body, making you fat.”\nI was amazed when I heard this. I only knew about weight loss at that time and didn’t know these principles because we hadn’t taken any biology classes. The girl knew this, she said: “As long as you don’t give your body too many carbohydrates, your body will burn fat when it needs energy, and in this way, you’ll lose weight.”\nAnd then she told us: “You can’t be too hungry because if you’re too hungry, your body will think that you’re lacking food, you’re experiencing famine, and it’ll protect fat and slow down the rate of consumption to let you survive in a famine, so you can’t be hungry.”\nShe was clear, rational, and had grounds for her statements. Everyone believed her, and she became more and more confident. But where did all this confidence come from? It’s from the books she read, so books can make people confident.\nLastly, reading can make you smarter. It sounds like a cliché, but it’s not. Reading can indeed make people smarter.\nOnce you’ve read a lot of books and have accumulated many background knowledge, you’ll find your understanding is constantly improving. Gao Xiaosong, who has read a lot of books, and a person who, on a regular basis, doesn’t read books are both reading the same book. Who do you think will understand faster, more deeply, more accurately?\nDefinitely Gao Xiaosong. So Gao Xiaosong seems smarter because the process of reading is actually a continuous input of book information into the brain. Also, you have to keep filling in the gaps while reading.\nA book cannot possibly list all the theories, knowledge points and all background-related knowledge for you. If it did, the book would never end, so it omits a lot of things. Therefore, people who have a lot of background knowledge can fill in the gaps, and understand quickly and correctly.\nAlso, it’s possible that two people read the same book, one person reads very deeply and gets a lot of new knowledge through the book, while the other person reads superficially. So, reading more books allows you to read faster and understand faster.\nReading is an important input for the brain. The more you input, the more you read, the faster you can think, and the smarter you are. This is because your brain is processing this information every day, so the more you use it, the better it gets.\nWhy do rural people, those farmers who face the earth and sky, sometimes look not so smart, and sometimes they seem to react slowly and are a bit blunt? That’s because their life experiences are very single — go home to eat, work during the day, most of the time they’re facing the fields, there is no other information input, so their brains are getting duller.\nReading makes people react quickly. For example, if you talk about an economic theory today, you can react quickly, because you have a lot of information stored in your brain. You can quickly call upon related knowledge, information to give feedback, and you won’t appear ignorant. So, reading can make people understand faster, react faster, and appear smarter.\nAbove is the explanation of why reading? I’ve added some small theories. These are not empty talks or clichés, but the real benefits of reading that I have experienced. If you are confused, anxious, inferior, then reading is the right solution.\nWhen reading, we often encounter several problems. The first problem is not knowing what books to read. Every day people recommend books to you, 30 must-reads for young people, 20 must-reads, 10 must-reads to boost your EQ, these books will accumulate on your bookshelf, and you don’t know which one you should read first, which one you should read later, which one you should read and which one you shouldn’t.\nTherefore, this is the first problem we encounter, which is not knowing in what direction to read. The second problem is that reading is difficult to persist in, it’s hard to keep it up.\nYou often make a plan “this year I must read 100 books,” and in the end, you only read one book, and you didn’t even finish it. The third problem is that you often forget what you’ve read. I have a friend who reads a lot of books and takes notes on Goodreads every time he reads a book. The next time I recommend this book to him, he realizes he’s read it and even took notes, but he just forgot it. So, this is the third problem we encounter.\nHow can we solve these problems? Books can be divided into four categories according to their functions.\nThe first category is books that offer experiences. The most typical are romance novels. After reading a romance novel, what specific and useful things can you get? You can’t really say, but the reading process is really enjoyable. You can finish it in one breath because in this process, you can follow the main male and female characters, experiencing joy and sorrow, and you even cry during key plot points. This is called experiencing. So after reading the whole book, the only thing you get, or the most important thing you get, is the experience. These are the books that provide experiences.\nThe second category is books that provide information. Some books can give you some information, like a fashion magazine that gives you some fashion news. Also, every year I buy some industry reports, which are filled with industry information. From these books, the most important thing we get is the information we didn’t know before.\nThe third category is books that offer knowledge. For example, if you read an economics book today, you learn about the term “sunk cost”. The term didn’t exist before and it’s also a knowledge point that you didn’t know previously, which economists discovered and summarized through long-term research. Once you learn it, you obtain this knowledge point. Basically, books in this category like economics, law, and psychology, they all give you some knowledge.\nThe last type of book is one that provides ways of thinking and methods. Such as philosophy books, they help to broaden your way of thinking and provide a method for thinking. These are books that provide methods of thinking.\nActually, it doesn’t need to be divided too clearly, as long as you have a general concept of it. I use this classification to emphasize one problem, which is the importance of a balanced reading selection. From the first to the fourth book category, you can see that the reading difficulty is increasing. The experience-oriented books are the easiest to read. Reading novels can be quite enjoyable, and perhaps books that offer knowledge and methods are more difficult to read. Therefore, we tend to prefer reading novels and the first category, which provides experiences, the second category, which offers information. We like these, which leads to an imbalance in our reading structure. In fact, the third and fourth books, which provide knowledge and ways of thinking, actually expand our knowledge.\nThe reading method we are discussing today is mainly for the third and fourth types of books, because the first and second types basically do not need any special methods. For experience-oriented books, you do not need a method, you can read it in one breath, quickly, without procrastination. So, we mainly talk about how to read the third and fourth categories.\nThe third and fourth books are more difficult to persist with, so we suggest: in terms of reading direction, read only useful books, only read those books that can change your life. For example, if you’re a lawyer, then you should first read some psychology books, professional lawyer materials, or if you have a problem recently like “wanting to get a divorce” and you don’t know what to do, then read some books related to divorce. In short, remember this principle “only read useful books”, either out of interest or to solve a problem. As we mentioned in the theory of learning before, only learning for these two purposes is not painful and can be persevered with.\nSo everyone must develop a habit, when you want to learn something, when you want to solve a problem, you must get used to using the internet and reading to solve problems, this can be considered as a basic literacy for modern people.\nWhen people often ask me some questions, I always feel that my answers may not necessarily be better than those of the masters. So instead of asking me, you might as well read a book. Sometimes, for some common-sense problems, it might be better to search on Google than to ask me.\nIn summary, when there are problems, and when you want to learn, you should use the internet and read books to solve your problems. This should be a basic literacy for modern people.\nLet me give you an example, I recently encountered some problems in the company’s strategy, so the first thing I thought of was actively searching for some books related to company strategy. In this way, I don’t bother others and I can ask for advice from some experts whom I wouldn’t otherwise be able to connect with.\nAfter I find these books, I am eager to finish them, and the reading efficiency is also very high, and the experience is also good.\nSo everyone must remember this, this is also Li Ka-shing’s reading method, called “only read books that are useful to yourself”.\nThe biggest mistake I made in reading was my belief that one should start reading from classic books. This idea was imbued in me from young by teachers and parents: that one should read good books, read like “Wuthering Heights”, read domestic classics like “Dream of the Red Chamber”. They are all good books and they should be read.\nBut in all honesty, as a kid, I was unable to read these books. They deterred my passion for reading. I would wonder why I can’t understand these books deemed as classics, touted as excellent by others. Why can’t I appreciate their goodness? I would force myself to read them over and over again, ending up unconvinced and disinterested.\nAs a result, these classics, which I would only come to comprehend and take interest in my 20s, were spoiled to me in my teens. Having gone through them at an age too young, the pleasure of reading was significantly diminished when I revisited them later on.\nSo I want to share my experience here, in this world, there’s no such thing as a must-read book. Simply start from your own interests and needs, read whatever you’re interested in and what can be useful to you. Starting from the second perspective would serve you better.\nNext, I’ll introduce you to a reading method called “thematic reading”. It means when you choose a topic, such as entrepreneurship, you delve into all the good books under this topic.\nThe merits of thematic reading are significant because you’ve done various readings on this topic, naturally you’ll come across different perspectives. Hence, your understanding of the topic will be more nuanced and rational.\nAdditionally, your reading speed will increase along with your reading efficiency. When you’re reading a book on this topic, you probably already have a decent understanding of this field, the background knowledge from the previous book will allow you to read the next book at a quicker pace. As you read more, you’ll find that your speed continues to increase, which is a benefit of thematic reading.\nLet’s move on to the method now.\nStep One: First, search for books based on your chosen theme. You will definitely have a keyword for your theme, use the keyword to search on Goodreads. For instance, if you search for “entrepreneurship”, you’ll find many high-rated books under the keyword. So look for books with relatively high ratings, this is just one searching method.\nOnce you’ve found the books on entrepreneurship, you’ll see that there are other recommended books relevant to your first book. For example, if the recommendations include the word “strategy”, that’s a related keyword, you can use this keyword to conduct another search.\nAnother method is that the book you found may be collected in some Goodreads lists, these lists might represent a theme, you can certainly find relevant books from these lists.\nIn conclusion, you should try to locate, by all means, the good books under your selected theme.\nThe second step is to read the introduction and reviews of the books, to get a feel whether or not you want to read them and how you should read them.\nMany people write book reviews on Goodreads, these reviews basically serve as notes. Most of the time, they provide a framework. By reading other people’s notes, you can have a rough idea of what the book is about and whether it’s good or not. Judge whether you should read the book, and how to read it.\nStep Three: Through the reviews and notes, evaluate which book is worth reading and select it.\nThen, check if there are digital versions of the book on Goodreads, or you can search for the Kindle version on Amazon, or look for the PDF version on Google. I advocate reading eBooks here, as much as possible, drop the paper books.\nFirstly, physical books are not convenient to carry, hence, it could cause procrastination in your reading habit. Second, moving paper books during relocations is quite a hassle. Third, reading physical books is time-consuming.\nSo, unless you have a peculiar penchant for collecting physical books, I would not recommend reading physical books. Try to adapt to reading eBooks, which increases reading efficiency and speed. If you find the book exceptionally good after reading, you may purchase a paperback copy for collection.\nAfter picking the books to read, the next step is to read it. Here I want to reiterate two principles.\nFirst, you can start reading from chapters you’re interested in. When I read “Dream of the Red Chamber”, I insisted on starting from the first chapter and wasn’t interested no matter how hard I tried. In fact, starting from the middle is also fine, at times, it could even motivate you to continue reading.\nSo, when we read books, we are not obligated to start from the first chapter, or read word by word, page by page. You can select chapters that intrigue you, and if you find parts of it confusing, you’d be more focused and efficient when you revisit the previous chapters with those questions in mind.\nSecond, you don’t have to finish every book you read. Sometimes, after reading chapters you’re interested in, you may find the rest unappealing. There’s absolutely no need to read every single word. Reading a book is like having a meal. Once you absorbed all the nutrients you needed, that suffices.\nWe tend to treat books as some kind of solemn and sacred objects because from a young age, we were taught to respect and take care of books. So, we think we should read every word from the foreword to the author’s concluding remarks. In fact, that’s not the case. There’s no necessity to finish a book because there are too many books out there, and a lot of them are great books.\nSo what exactly are the correct steps to read a book?\nHere’s what I suggest everyone should do.\nFirst, read the table of contents to grasp the general logical framework of the book. This step is extremely important. Many people finish a book without understanding its framework, only remembering bits and pieces, and aren’t sure of the author’s logic.\nTherefore, the first step is to study the table of contents since most authors arrange them logically.\nSecond, read the preface. A professional author usually explains why they wrote the book and what it covers in the preface. Do not bother with useless commendatory prefaces.\nThird, begin to read. We used to read chapter by chapter. When setting up a reading plan, we would write “read Chapters 1 to 2 on May 1st, finish the book in a week, two chapters a day”. We would plan like this and then read chapter by chapter, two chapters today, one chapter tomorrow.\nBut when you’re finished reading, you won’t understand the connection between the chapters or the book’s framework. Therefore, you shouldn’t lose sight of the framework and table of contents while reading.\nYou should read based on the table of contents and try to understand each chapter within this logical framework system. This method will make it easier to understand.\nMy best reading experience is on Kindle. Everyone must download Kindle on their computers. When you’re reading on Kindle, you can pull out the table of contents, with the book content on the right. As you read page by page, you know exactly which chapter this page belongs to from the table of contents and its relationship with the previous and following chapters.\nIn this way, the reading experience will be wonderful, more efficient, and have a deeper understanding. When you read, you should read with the mentality of output, that is, if you were to explain this book to someone else, what would you say?\nSo when you are reading, you must read with this mindset. This is an experience I recently shared with a friend. We both enjoy reading a lot. During our recent discussions, this topic came up. I had to host a book reading event, so I had to share this book with others. I found that my reading efficiency increased significantly, and the results were better.\nWe should definitely read with this mindset, and while reading, ask ourselves the following three questions. Firstly, what is this book about? Secondly, how does the book convey its message? Thirdly, what are my thoughts and assessment on it?\nAfter finishing every chapter, you can ask yourself these questions and then provide an opportunity for sharing.\nFor example, after finishing a book, you can share what the book mainly talks about in your circle of friends. During the sharing process, you will find that your understanding of this book is deeper and your reading efficiency is also higher.\nSome people may ask, “Wouldn’t reading in this manner be slow?”\nActually, it’s not. In my opinion, there are basically three reasons why someone might read slowly.\nThe first reason is rereading. After reading, they don’t know what this section is about and feel confused. They also don’t understand the connection with other chapters, so they have to read this chapter again to understand it. When we read, we should start with the table of contents to avoid repetitiveness, and this already improves speed.\nSecondly, some people like to copy while reading, copying each sentence and taking notes, sentence by sentence. This leads to slow reading speed.\nThe third reason is forgetting after reading, which is also indirectly a reason for slow reading. If you forget after reading, you have to read it a second time, so it is also considered low-efficiency, slow speed.\nNext, let me share a method of note-taking to increase the speed of note-taking.\nHow should we take reading notes? Here, I introduce a tool called “Evernote”, which is a great companion for ebooks. After downloading Evernote, you can see a small “elephant” logo in the top right corner of your Evernote. If you click on it, you have a screenshot function. When you are reading, you can open your ebook on your computer, with the table of contents on the left and the book content on the right. If you read a particularly good paragraph and want to quote it, it’s simple. Just click on the Evernote icon in the top right corner, select a screenshot, and take a screenshot of the place you want to quote.\nIf you want to annotate this image, or if you want to record the framework of the book while reading, you can click on the “elephant” in the top right corner. A box will appear where you can enter the current chapter and section you are reading, then insert the screenshot.\nWhen you have taken note of everything you need to record from this book, you can export everything to Evernote with one click. After it is exported, you can further organize it. At this point, you should have a good understanding and memory of the book.\nThere is also a possibility that you can’t remember the specific content of the book, or there’s a certain knowledge point mentioned in it that you can’t recall later.\nNot at all, Evernote supports you to search. Its search function is very powerful. As long as you remember the general content of the book, you can search for it when you think of it later. You don’t have to, like before, first find the book on the bookshelf, then look at the table of contents, and find out where you highlighted the important parts, or flip through the notebook you wrote in to find which sentence you copied when. This is very inefficient, but Evernote supports search, so just remember roughly, forget the specific knowledge points when needed, and you can search.\nThis is the method I am sharing with you, called Evernote paired with an e-book is a perfect match for reading.\nAt the end of today’s lesson, we’ll introduce two more methods: the first is called “point reading” and the second is “exclusive reading”.\nFirstly, point reading. If you find it easy to be distracted while reading, you can point to the text with your fingers. This can focus your attention on one hand, and guide your reading speed on the other hand. If you want to read faster, move your fingers a little faster subconsciously.\nThe second is exclusive reading, which is only reading for an hour. When you are setting up a reading plan, don’t be greedy because reading is a gradual process. Honestly, many times it’s not as fun as watching TV or reading novels. So when you are setting your own plans, don’t make them too complicated or too ambitious. Remember the concept of “only reading for an hour”.\nThis concept, used in conjunction with the “Snail Reading” app by NetEase, has a benefit that it only gives you one hour of free reading time per day. Within this hour, you have to pay after you finish reading. Just finish this free hour of reading, it feels like you are getting a bargain, and it’s not a long time so it’s easy to stick to.\nThe NetEase reading app is especially suitable for reading in fragmented time, such as reading for five minutes on the way to work. It will record that you have read for five minutes. When you close your phone to go to work and read for another five minutes after work, it will continue timing for you. After accumulating an hour, you can get a snail reward.\nIf you can just ensure that you get this snail every day, that’s already impressive. An hour of reading a day is a lot. Over long periods of time, you can read many books. That’s why the concept I proposed, “just read for an hour”, can prevent us from delaying reading.\nThat’s about it for today’s lesson. Lastly, here’s a suggestion. Try doing two to three thematic readings during longer holidays in the year, like May Day, National Day, and Dragon Boat Festival. You will find that having a deep understanding of two to three topics in a year already accumulates a great deal of knowledge. If you do this for three or five years, you would have a deep understanding of ten topics.\nSo, I suggest that everyone should dedicate an hour for reading in their fragmented time, and do some in-depth thematic reading when one has a longer period of time. After you have done thematic reading in a particular field, when you see some related information in the future, like news reports or certain views, your reaction will be very quick and your understanding will be very deep. It will be easy to integrate these new pieces of information, comments, and views into your original knowledge system. This way, you won’t feel like every day is either related or unrelated to you and waste your time reading, as others might feel.\n","date":"2024-01-23T13:53:34+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*O_ZyAuc_bQOtwh7j","permalink":"http://localhost:1313/p/why-should-we-read-if-well-eventually-forget-what-we-read/","title":"Why should we read if we’ll eventually forget what we read?"},{"content":"This article is written from the perspective of a front-end interviewer, summarizing some important features and principles of the Vue framework in the form of questions. The intention is to help both the author and the reader self-assess the extent of their understanding of Vue. This article is organized in order of difficulty, and it’s recommended for readers to follow the chapters sequentially, but experts can navigate as they please. After reading this article, it is hoped that readers will have some thought-provoking insights, a better understanding of their proficiency in Vue, and be able to make up for any knowledge gaps to gain a better grasp of Vue.\nCan you explain your understanding of SPA single page applications and their pros and cons? SPA (single-page application) only loads the corresponding HTML, JavaScript, and CSS when the web page is initialized. Once the page is loaded, SPA will not reload or jump due to user operations. Instead, it uses the routing mechanism to change the HTML content and the UI’s interactions with users, avoiding page reloading.\nAdvantages:\nExcellent and quick user experience. The content changes do not require reloading the entire page, avoiding unnecessary redirection and repeated rendering;\nBased on the above, SPA puts less pressure on the server;\nClear separation of front-end and back-end responsibilities, with the front-end handling interactive logic, and back-end dealing with data processing.\nDisadvantages:\nInitial load time is long: To implement single-page web application features and display effects, JavaScript, CSS need to be loaded simultaneously when loading the page, and part of the page is loaded on demand;\nForward and backward route management: Since the single-page application displays all content on one page, the browser’s forward and backward functions cannot be used. All page switching requires its stack management;\nLarger SEO difficulty: Since all content is dynamically replaced and displayed on one page, it has a natural disadvantage in terms of SEO.\nWhat is the difference between v-show and v-if? v-if is true conditional rendering, as it ensures that event listeners and child components within the conditional block are properly destroyed and rebuilt during the switch. It is also lazy: if the condition is false at initial rendering, it does nothing. It only starts rendering the conditional block when the condition first becomes true.\nv-show is much simpler. No matter what the initial condition is, the element will always be rendered, and it simply switches based on the CSS “display” property.\nSo, v-if is suitable for scenarios where the condition rarely changes at runtime and where frequent switching is not needed. v-show, on the other hand, is suitable for situations that require very frequent condition switching.\nHow are Class and Style dynamically bound? Class can be dynamically bound using object syntax and array syntax:\nObject\n1 \u0026lt;div v-bind:class=\u0026#34;{ active: isActive, \u0026#39;text-danger\u0026#39;: hasError }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 data: { isActive: true, hasError: false } Array\n1 \u0026lt;div v-bind:class=\u0026#34;[isActive ? activeClass : \u0026#39;\u0026#39;, errorClass]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 data: { activeClass: \u0026#39;active\u0026#39;, errorClass: \u0026#39;text-danger\u0026#39; } Style can also be dynamically bound using object syntax and array syntax:\nObject\n1 \u0026lt;div v-bind:style=\u0026#34;{ color: activeColor, fontSize: fontSize + \u0026#39;px\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 data: { activeColor: \u0026#39;red\u0026#39;, fontSize: 30 } Array\n1 \u0026lt;div v-bind:style=\u0026#34;[styleColor, styleSize]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 data: { styleColor: { color: \u0026#39;red\u0026#39; }, styleSize:{ fontSize:\u0026#39;23px\u0026#39; } } How to understand the one-way data flow in Vue? All props form a one-way downstream binding between parent and child props: updates to the parent prop will flow downstream to the child components, but not the other way around. This prevents the state of the parent component from being accidentally changed from the child component, making your application’s data flow difficult to understand.\nIn addition, every time the parent component is updated, all props in the child component will be refreshed to the latest values. This means that you should not change props within a child component. If you do, Vue will give a warning in the browser console. When the child component wants to modify, it can only distribute a custom event through $emit, and the parent component modifies it after receiving it.\nThere are two common scenarios for trying to change a prop:\nThis prop is used to pass an initial value; the child component then wants to use it as a local prop data. In this case, it’s best to define a local data attribute and use this prop as its initial value: 1 2 3 4 5 6 props: [\u0026#39;initialCounter\u0026#39;], data: function () { return { counter: this.initialCounter } } This prop is passed in with a raw value that needs to be converted. In this case, it’s best to use the value of this prop to define a computed property. 1 2 3 4 5 6 props: [\u0026#39;size\u0026#39;], computed: { normalizedSize: function () { return this.size.trim().toLowerCase() } } What’s the difference between computed and watch, and what scenarios are they used in? Computed: It’s a computed property that depends on other property values, and the value of computed has a cache. Only when the property values it depends on change will the value of computed be recalculated the next time it’s obtained;\nWatch: It serves more as an “observer”. It’s akin to a callback for monitoring certain data. The callback is executed for follow-up operations each time the monitored data changes.\nUsage scenarios:\nWhen we need to perform numerical calculations and depend on other data, we should use computed, because we can take advantage of the cache characteristics of computed to avoid recalculating every time the value is obtained;\nWhen we need to perform asynchronous or costly operations when data changes, we should use watch. Using the watch option allows us to perform asynchronous operations (like accessing an API), limit the frequency at which we perform this operation, and set intermediary states before we get the final result. These are things that computed properties can’t do.\nIf you directly assign a value to an item in an array, can Vue detect the change? Due to JavaScript’s limitations, Vue cannot detect the changes of an array as follows:\nWhen you directly set an array item via the index. For example: vm.items[indexOfItem] = newValue\nWhen you modify the length of the array. For example: vm.items.length = newLength\nTo solve the first issue, Vue provides the following methods:\n1 2 3 4 5 6 // Vue.set Vue.set(vm.items, indexOfItem, newValue) // vm.$set，Vue.set的一个别名 vm.$set(vm.items, indexOfItem, newValue) // Array.prototype.splice vm.items.splice(indexOfItem, 1, newValue) To solve the second issue, Vue provides the following methods:\n1 2 // Array.prototype.splice vm.items.splice(newLength) Could you discuss your understanding of the Vue lifecycle? a. What is lifecycle?\nA Vue instance has a complete lifecycle, which includes a series of processes from its creation, data initialization, template compilation, DOM mounting to rendering, updating, rendering, and unmounting. We call this the lifecycle of Vue.\nb. The function of each lifecycle stage.\nWhat is the execution order of lifecycle hook functions in Vue’s parent components and child components? The execution order of lifecycle hook functions in Vue’s parent and child components can be categorized into four parts:\nLoad Rendering Process\nParent beforeCreate -\u0026gt; Parent created -\u0026gt; Parent beforeMount -\u0026gt; Child beforeCreate -\u0026gt; Child created -\u0026gt; Child beforeMount -\u0026gt; Child mounted -\u0026gt; Parent mounted\nSubcomponent Update Process\nParent beforeUpdate -\u0026gt; Child beforeUpdate -\u0026gt; Child updated -\u0026gt; Parent updated\narent Component Update Process\nParent beforeUpdate -\u0026gt; Parent updated\nDestruction Process\nParent beforeDestroy -\u0026gt; Child beforeDestroy -\u0026gt; Child destroyed -\u0026gt; Parent destroyed\nIn which lifecycle should the asynchronous request be called? You can call it in the created, beforeMount, and mounted hook functions, because in these three hook functions, the data has been created and you can assign the data returned by the server. However, I recommend calling asynchronous requests in the created hook function for the following reasons:\nYou can get the server data faster, reducing the page loading time.\nSSR does not support the beforeMount and mounted hook functions, so placing them in created helps with consistency.\nAt what stage can we start to access and manipulate the DOM? Before the mounted hook function is called, Vue has already mounted the compiled template to the page, so you can access and manipulate the DOM in mounted. For a more detailed diagram of Vue’s specific lifecycle, you can refer to the following. Once you understand the actions at each stage of the entire lifecycle, questions related to the lifecycle won’t be a challenge in interviews.\nCan a parent component listen to the lifecycle of a child component? For example, if you have a parent component Parent and a child component Child, and if the parent component listens for the child component’s mounted event to perform some logic, you can implement it with the following method:\n1 2 3 4 5 6 7 // Parent.vue \u0026lt;Child @mounted=\u0026#34;doSomething\u0026#34;/\u0026gt; // Child.vue mounted() { this.$emit(\u0026#34;mounted\u0026#34;); } The above requires manually triggering the parent component’s event with $emit. An even simpler way is to listen to the @hook when the parent component references the child component, as shown below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Parent.vue \u0026lt;Child @hook:mounted=\u0026#34;doSomething\u0026#34; \u0026gt;\u0026lt;/Child\u0026gt; doSomething() { console.log(\u0026#39;The parent component listens to the mounted hook function ...\u0026#39;); }, // Child.vue mounted(){ console.log(\u0026#39;The child component triggers the mounted hook function. ...\u0026#39;); }, // The output order above is: // Child component triggers the mounted hook function ... // The parent component listens to the mounted hook function ... Of course, the @hook method is not only able to listen to the mounted event. Other lifecycle events, such as: created, updated, etc. can also be monitored.\nWhat do you know about keep-alive? Keep-alive is a built-in component of Vue, which can retain the state of the components it wraps, preventing them from re-rendering. It has the following features:\nIt is usually used with routing and dynamic components to cache components.\nIt provides include and exclude attributes, both of which support strings or regular expressions. include indicates that only components with matching names will be cached, exclude means any components with matching names will not be cached. The exclude attribute has higher priority than ‘include’.\nIt corresponds to two hook functions: activated and deactivated. When the component is activated, the activated hook function is triggered. When the component is removed, the deac`tivated hook function is triggered.\nWhy is data a function in a component? Why must the data in the component be a function that returns an object, while in a new Vue instance, data can directly be an object?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // data data() { return { message: \u0026#34;Child\u0026#34;, childName:this.name } } // new Vue new Vue({ el: \u0026#39;#app\u0026#39;, router, template: \u0026#39;\u0026lt;App/\u0026gt;\u0026#39;, components: {App} }) This is because components are meant to be reused, and in JavaScript, objects have reference relationships. If data in a component is an object, then the scopes are not isolated and data property values in the child components can affect each other. If the data option in a component is a function, then each instance can maintain an independent copy of the returned object, and the data property values between component instances will not interfere with each other. As for the data in a new Vue instance, it is not going to be reused, so there is no problem with referring to objects.\nWhat is the principle behind v-model? We mainly use the v-model directive in vue projects to create two-way data binding on form input, textarea, select elements, etc. It is known that v-model is essentially a syntactic sugar, using different properties and emitting different events for different input elements internally:\nText and textarea elements use the value property and input event;\nCheckbox and radio use the checked property and change event;\nSelect fields use value as a prop and change as an event.\nTaking the input form element as an example:\n1 2 3 4 \u0026lt;input v-model=\u0026#39;something\u0026#39;\u0026gt; equal to \u0026lt;input v-bind:value=\u0026#34;something\u0026#34; v-on:input=\u0026#34;something = $event.target.value\u0026#34;\u0026gt; If it’s in a custom component, v-model by default will use a prop called value and an event called input, as shown below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Parent： \u0026lt;ModelChild v-model=\u0026#34;message\u0026#34;\u0026gt;\u0026lt;/ModelChild\u0026gt; // Child： \u0026lt;div\u0026gt;{{value}}\u0026lt;/div\u0026gt; props:{ value: String }, methods: { test1(){ this.$emit(\u0026#39;input\u0026#39;, \u0026#39;jack\u0026#39;) }, }, What are the ways of communication between Vue components? Communication between Vue components is one of the common topics tested in interviews. This question is a kind of open-ended one, the more methods you answer, the more points you earn, indicating that you are more proficient in Vue. Communication between Vue components refers to the following three categories: parent-child component communication, cross-generational component communication, and sibling component communication. Below we will introduce each communication method and indicate which type of component communication is applicable.\n(1) props / $emit is applicable to parent-child component communication\nThis is a basic method for Vue components. I believe most students are familiar with it, so I won’t go into detail here.\n(2) ref and $parent / $children for parent-child component communication\nref: If used on common DOM elements, the reference points to the DOM element; if used on child components, the reference points to the component instance\n$parent / $children Accesstoparent/childinstances\n(3) EventBus(emit / $on) is applicable for parent-child, cross-generational, and sibling component communication\nThis method uses an empty Vue instance as the central event bus (event center) to trigger and listen to events, thereby implementing communication between any components, including parent-child, cross-generational, and sibling components.\n(4) attrs/listeners is suitable for cross-generational component communication\n$attrs: Contains attribute bindings (excluding class and style) in the parent scopes that are not recognized (and fetched) by prop. When a component does not declare any props, $attrs will contain all bindings (excluding class and style) from the parent scope, and can be passed to the inside components via v-bind=”$attrs”. Usually, it is used in combination with the inheritAttrs option.\n$listeners: It includes the v-on event listeners from the parent scope (without the .native modifier). It can be passed to the internal component through v-on=”$listeners”.\n(5) provide / inject is suitable for cross-generational component communication\nThe ancestor component provides variables through provider, and then the descendant component injects variables through inject. The provide / inject API mainly solves the communication problem between cross-level components, but its usage scenarios are mainly for child components to obtain the state of the upper-level components, and establish a kind of relationship between active provision and dependency injection in components across levels.\n(6) Vuex is suitable for parent-child, cross-generational, and sibling component communication\nVuex is a state management pattern developed specifically for Vue.js applications. The core of each Vuex application is the store. The store is basically a container that contains most of the state in your application.\nThe state storage of Vuex is reactive. When Vue components read the state from the store, if the state in the store changes, the corresponding components will also be efficiently updated accordingly. The only way to change the state in the store is to explicitly commit mutation. This makes it easy for us to track changes in each state.\nHave you used Vuex before? Vuex is a state management pattern developed specifically for Vue.js applications. The core of each Vuex application is the store. The store is essentially a container, containing most of the state (state) in your application.\n(1) Vuex’s state storage is reactive. When Vue components read the state from the store, if the state in the store changes, the corresponding components will also be efficiently updated.\n(2) The only way to change the state in the store is to explicitly commit a mutation. This allows us to easily track every state change.\nThe main modules include:\nState: Defines the data structure of the application state, and the default initial state can be set here.\nGetter: Allows components to get data from the Store. The mapGetters helper function simply maps the getters in the store to local computed properties.\nMutation: The only way to change the state in the store, and it must be a synchronous function.\nAction: Used to commit mutations, instead of changing the state directly, it can contain any asynchronous operations.\nModule: Allows the single Store to be split into multiple stores and saved in a single state tree at the same time.\nHave you used Vue SSR before? What is SSR? Vue.js is a framework for building client-side applications. By default, Vue components can be output in the browser, generating and operating DOM. However, the same component can also be rendered as server-side HTML strings, sent directly to the browser, and finally “activate” these static markups into fully interactive applications on the client side.\nThat is: SSR roughly means that the work of rendering the tags into a whole HTML fragment on the client side is completed on the server side. The HTML fragment formed by the server directly returns to the client side, which is called server-side rendering.\nThe advantages and disadvantages of server-side rendering SSR are as follows:\n(1) Advantages of server-side rendering:\nBetter SEO: Because the content of the SPA page is obtained through Ajax, and the search engine crawler does not wait for the completion of the Ajax asynchronous request before crawling the page content, so in the SPA, the content obtained from the page through Ajax cannot be crawled; while SSR is returned directly by the server The rendered page (data is already included in the page), so the search engine crawler can crawl the rendered page;\nFaster content arrival time (faster first screen loading): SPA will wait until all js files compiled by Vue have been downloaded before it starts rendering the page. File downloading needs a certain amount of time, so the first screen rendering needs a certain amount of time; SSR is rendered directly by the server Direct return display of the good page, no need to wait for downloading js files and rendering, etc., so SSR has a faster content arrival time;\n(2) The disadvantages of server-side rendering:\nMore development condition restrictions: For example, server-side rendering only supports two hook functions of beforCreate and created, which will cause some external expansion libraries to need special treatment before they can run in server-side rendering applications; and it can be deployed on any static file servers With the completely static single-page application SPA, the server-side rendering application needs to be in a Node.js server running environment;\nMore server load: Rendering a complete application in Node.js will obviously occupy more CPU resources (CPU-intensive) than a server that only provides static files. Therefore, if you expect to use it in a high-traffic environment, please prepare for the corresponding server load. And wisely adopt caching strategies.\nHow many routing modes are there in vue-router? vue-router has 3 routing modes: hash, history, abstract, as shown in the source code below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 switch (mode) { case \u0026#39;history\u0026#39;: this.history = new HTML5History(this, options.base) break case \u0026#39;hash\u0026#39;: this.history = new HashHistory(this, options.base, this.fallback) break case \u0026#39;abstract\u0026#39;: this.history = new AbstractHistory(this, options.base) break default: if (process.env.NODE_ENV !== \u0026#39;production\u0026#39;) { assert(false, `invalid mode: ${mode}`) } } The explanations of the 3 routing modes are as follows:\nhash: Use URL hash value for routing. Support all browsers, including browsers that do not support the HTML5 History API;\nhistory: Depends on HTML5 History API and server configuration. For more details, you can check the HTML5 History mode;\nabstract: Supports all JavaScript runtime environments, such as Node.js server-side. If no browser API is found, the router will automatically be forced into this mode.\nCan you talk about the implementation principle of the commonly used hash and history routing modes in vue-router? (1) Hash mode implementation principle The implementation of early web front-end routing is based on location.hash. The principle is simple, the value of location.hash is the content after # in the URL. For example, in the following website, its value of location.hash is #search:\n1 https://www.word.com#search The implementation of the hash routing mode is mainly based on the following features:\nThe hash value in the URL is just a state of the client, that is, when sending a request to the server, the hash part will not be sent;\nChanges in the hash value will add a record in the browser’s access history. Therefore, we can control the switch of the hash through the browser’s back and forward buttons;\nYou can use the a tag and set the href attribute, when the user clicks this tag, the hash value of the URL will change; or use JavaScript to assign a value to loaction.hash, changing the hash value of the URL;\nWe can use the hashchange event to listen for changes in the hash value and navigate (render) the page accordingly.\n(2) History mode implementation principle\nHTML5 provides the History API to implement URL changes. Among them, the two most important APIs are history.pushState() and history.repalceState(). These two APIs can operate the browser’s history record without refreshing. The only difference is that the former adds a history record, and the latter directly replaces the current history record, as shown below:\n1 2 window.history.pushState(null, null, path); window.history.replaceState(null, null, path); The implementation of the history routing mode is mainly based on the following features:\nUse the two APIs, pushState and repalceState, to implement URL changes;\nWe can use the popstate event to listen for changes in the url, and then jump (render) the page;\nhistory.pushState() or history.replaceState() will not trigger the popstate event, at this time we need to manually trigger the page jump (render).\nWhat is MVVM? Model–View–ViewModel (MVVM) is a software architectural design pattern developed by Microsoft WPF and Silverlight architects Ken Cooper and Ted Peters. It is a method of simplifying User Interface Programming in an Event-Driven way. It was first released by John Gossman, also one of the architects of WPF and Silverlight, in 2005, via his blog.\nMVVM originates from the classic Model–View–Controller (MVC) pattern. The appearance of MVVM has promoted the separation of front-end development and back-end business logic, greatly improving the efficiency of front-end development. The core of MVVM is the ViewModel layer. It acts like a transfer station (value converter), which is responsible for converting the data objects in the Model to make the data easier to manage and use. This layer is bidirectionally data bound to the view layer and interacts with the Model layer through the interface request. Such as shown in the diagram below:\n(1) View Layer\nThe View refers to the User Interface (UI). The frontend is primarily constructed using HTML and CSS.\n(2) Model Layer\nThe Model refers to the data model, loosely referring to various business logic processing and data operations conducted in the backend. For the front-end, it’s the API interface provided by the backend.\n(3) ViewModel Layer\nThe ViewModel is the view data layer organized, generated, and maintained by front-end developers. In this layer, front-end developers perform transformation processing on the Model data obtained from the backend, perform secondary encapsulation, to generate a view data model that meets the expected use of the View layer. It should be noted that the data model encapsulated by the ViewModel includes both the state and behavior of the view, while the data model in the Model layer only includes the state. For example, what a certain part of the page displays; what happens when the page is loaded; what happens when this part is clicked; what happens when this part scrolls, etc., all belong to the view behavior (interaction). Both the view state and behavior are encapsulated in the ViewModel. Such encapsulation allows the ViewModel to describe the View layer completely.\nMVVM framework has implemented two-way binding so that the content of the ViewModel is showcased in the View layer in real time. Front-end developers no longer have to inefficiently and tediously manipulate the DOM to update the view. The MVVM framework has taken care of the dirtiest and most tiring part. We developers only need to handle and maintain the ViewModel. Updating the data will automatically update the view accordingly. Therefore, what the View layer shows is not the data from the Model layer, but the data of the ViewModel. The ViewModel is responsible for interacting with the Model layer, which completely decouples the View layer and the Model layer. Such decoupling is essential for success and is a crucial part of the front-end and back-end separation plan implementation.\nHere, we use a Vue instance to demonstrate the specific implementation of MVVM. Those with Vue development experience should intuitively understand:\n(1) View Layer\n1 2 3 4 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{message}}\u0026lt;/p\u0026gt; \u0026lt;button v-on:click=\u0026#34;showMessage()\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; (2) ViewModel Layer\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { message: \u0026#39;Hello Vue!\u0026#39;, }, methods: { showMessage(){ let vm = this; alert(vm.message); } }, created(){ let vm = this; ajax({ url: \u0026#39;/your/server/data/api\u0026#39;, success(res){ vm.message = res; } }); } }) (3) Model Layer\n1 2 3 4 5 6 7 8 { \u0026#34;url\u0026#34;: \u0026#34;/your/server/data/api\u0026#34;, \u0026#34;res\u0026#34;: { \u0026#34;success\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;IoveC\u0026#34;, \u0026#34;domain\u0026#34;: \u0026#34;www.cnblogs.com\u0026#34; } } How does Vue implement data two-way binding? The two-way binding of data in Vue mainly refers to: when data changes, the view is updated; when the view changes, data is updated, as shown in the following figure: That is:\nWhen the content of the input box changes, the data in the Data changes synchronously. That is, the change from View =\u0026gt; Data.\nWhen data in the Data changes, the content of the text node changes synchronously. That is, the change from Data =\u0026gt; View.\nAmong them, when the View changes and updates the Data, it can be implemented through event listening, so the main task of Vue’s data two-way binding is how to update the View based on Data changes.\nVue mainly uses the following four steps to achieve data two-way binding:\nImplement a listener Observer: Traverse the data object, including the properties of the child attribute object, and use Object.defineProperty() to add a setter and getter to each property. In this way, assigning a value to a property of this object will trigger the setter, so you can listen to the data changes.\nImplement a parser Compile: Parse the Vue template instructions, replace all variables in the template with data, then initialize the rendering of the page view, bind the updating function to each instruction corresponding node, add subscribers who listen to data, once the data changes, receive notification, call the update function to update the data.\nImplement a subscriber Watcher: Watcher subscriber is a bridge for communication between Observer and Compile, the main task is to subscribe to the message of property value changes in Observer, when receiving the message of property value changes, trigger the corresponding update function in the parser Compile.\nImplement a subscriber Dep: The subscriber adopts the publish-subscribe design pattern to collect subscriber Watcher and manage the listener Observer and subscriber Watcher uniformly.\nThe flowchart for the above four steps is shown below.\nHow does Vue framework implement monitoring of objects and arrays? If asked how Vue implements data two-way binding, everyone will definitely answer that by using Object.defineProperty() to intercept data. However, Object.defineProperty() can only intercept properties, cannot hijack the entire object, similarly, it can’t intercept arrays. But as we know when using the Vue framework, Vue can detect changes in objects and arrays (operations of some methods), so how does it achieve this? Let’s take a look at the relevant code below:\n1 2 3 4 5 6 7 8 9 10 11 12 /** * Observe a list of Array items. */ observeArray (items: Array\u0026lt;any\u0026gt;) { for (let i = 0, l = items.length; i \u0026lt; l; i++) { observe(items[i]) // The \u0026#34;observe\u0026#34; function is used to monitor changes in data. } } /** * Recursively traversing the properties. */ let childOb = !shallow \u0026amp;\u0026amp; observe(val) By looking at the above part of the Vue source code, we now know that the Vue framework achieves the monitoring of objects and arrays (operations of some methods) by using Object.defineProperty() through traversing arrays and recursively traversing objects.\nComparisons between Proxy and Object.defineProperty are as follows: Advantages of Proxy include:\nProxy can directly listen to objects rather than attributes;\nProxy can directly listen to array changes;\nProxy has as many as 13 interception methods, not limited to apply, ownKeys, deleteProperty, has and so on, which are not available in Object.defineProperty;\nProxy returns a new object, we can only operate the new object to achieve the purpose, while Object.defineProperty can only traverse object properties to modify directly;\nAs a new standard, Proxy will receive continuous performance optimization from browser manufacturers, also known as the performance dividend of the new standard.\nAdvantages of Object.defineProperty include:\nGood compatibility, supports IE9, while Proxy has browser compatibility problems and cannot be smoothed by polyfill. That’s why the author of Vue declared that it needs to wait for the next major version (3.0) to rewrite with Proxy.\nHow does Vue use vm.$set () to solve the problem that new properties of objects cannot be responsive? Due to the limitations of modern JavaScript, Vue cannot detect the addition or deletion of object properties. Since Vue will convert properties to getter/setter during the initialization of instances, properties must exist in the data object for Vue to convert them into responsive. However, Vue provides Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value) to add responsive properties to objects, so how does the framework itself implement it?\nWe look at the corresponding Vue source code: vue/src/core/instance/index.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 export function set (target: Array\u0026lt;any\u0026gt; | Object, key: any, val: any): any { // target is array if (Array.isArray(target) \u0026amp;\u0026amp; isValidArrayIndex(key)) { // Modify the length of the array to avoid incorrect execution of splice() due to index \u0026gt; array length target.length = Math.max(target.length, key) // Use the splice mutation method of the array to trigger responsiveness target.splice(key, 1, val) return val } // If key already exists, modify the property value directly if (key in target \u0026amp;\u0026amp; !(key in Object.prototype)) { target[key] = val return val } const ob = (target: any).__ob__ // If target itself is not responsive data, assign value directly if (!ob) { target[key] = val return val } // Handle the property with responsiveness defineReactive(ob.value, key, val) ob.dep.notify() return val } By reading the above source code, we know that the principle of vm.$set is:\nIf the target is an array, the splice method of the array is directly used to trigger responsiveness;\nIf the target is an object, we will first determine whether a property exists and whether the object is responsive. Ultimately, if responsive processing is needed for the property, defineReactive method is called for responsive processing (defineReactive method is the method called by Vue when initializing the object and adding getter and setter to the object property using Object.defineProperty).\nAdvantages and disadvantages of virtual DOM Advantages:\nGuarantees a lower performance limit: The framework’s virtual DOM needs to adapt to any operations that the upper-level API might generate. Its implementation of some DOM operations must be universal, so its performance is not the best. However, it is much better than crude DOM operations, so the framework’s virtual DOM can at least guarantee that when you don’t need to optimize manually, it can still provide decent performance, i.e., guarantee the lower limit of performance;\nNo need to manually manipulate the DOM: We no longer need to manually operate the DOM. We only need to write good View-Model code logic. The framework will help us update the view in a predictable way based on the virtual DOM and data bi-directional binding, greatly improving our development efficiency;\nCross-platform compatibility: The virtual DOM is essentially a JavaScript object, while the DOM is strongly related to the platform. In comparison, the virtual DOM can be more conveniently operated cross-platform, such as server rendering, weex development, etc.\nDisadvantages:\nCannot perform extreme optimization: Although the virtual DOM + reasonable optimization is sufficient to meet the performance requirements of most applications, in some highly performance-demanding applications, the virtual DOM cannot achieve targeted extreme optimization. The implementation principle of Virtual DOM The implementation principle of Virtual DOM mainly includes the following three parts:\nSimulating the real DOM tree with JavaScript objects: This presents an abstraction of the real DOM.\nThe Diff algorithm: This is used to compare the differences between two virtual DOM trees.\nThe Patch algorithm: This is used to apply the differences between the two virtual DOM objects to the real DOM tree.\nWhat does key do in Vue? In Vue, the key serves as a unique identifier for vnodes. Through this key, our ‘diff’ operations can become more accurate and faster. The diff process in Vue can be summarized as follows: ‘oldCh’ and ‘newCh’ each have two variables — oldStartIndex, oldEndIndex and newStartIndex, ‘newEndIndex’. New nodes and old nodes will be compared pairwise, that is, there are four comparison methods: newStartIndex and oldStartIndex, newEndIndex and oldEndIndex, newStartIndex and oldEndIndex, newEndIndex and oldStartIndex. If all the four comparisons do not match, and if key is set, a further comparison will be made based on key. In the comparison process, the traversal is toward the middle. Once StartIdx \u0026gt; EndIdx, it indicates that either ‘oldCh’ or ‘newCh’ has been traversed, and the comparison ends.\nTherefore, the role of key in Vue is: key serves as a unique identifier for vnode in Vue. Through this key, our diff operations can become more accurate and faster.\nAccurate: Since with key, in-place reuse is not applied. In the comparison of a.key === b.key in sameNode function, in-place reuse can be avoided. Therefore, it will be more accurate.\nFaster: Using the uniqueness of key to generate a map object to get the corresponding node is faster than the traversal method, as shown in the source code.\nWhat optimizations have you performed on the Vue project? (1). Code level optimization\nDistinguish between v-if and v-show usage scenarios\nDistinguish between computed and watch usage scenarios\nA key must be added to the item for v-for iteration, and the simultaneous use of v-if should be avoided\nLong list performance optimization\nEvent destruction\nImage resource lazy loading\nRoute lazy loading\nImport third-party plugins as needed\nOptimize the performance of infinite lists\nServer-Side Rendering (SSR) or Pre-rendering\n(2). Webpack level optimization\nCompression of images by Webpack\nReduce redundant code from ES6 to ES5\nExtract common code\nTemplate precompilation\nExtract the CSS of the component\nOptimize SourceMap\nAnalysis of the building results\nVue project compilation optimization\n(3). Basic Web technology optimization\nEnable gzip compression\nBrowser caching\nUse of CDN\nUse Chrome Performance to find performance bottlenecks\n","date":"2024-01-22T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*j1QzZDqnrYjXm2hG","permalink":"http://localhost:1313/p/28-vue-interview-questions-with-detailed-explanations/","title":"28 Vue Interview Questions with Detailed Explanations"},{"content":"Get this In Vue2, this in each component points to the current component instance, and this also contains globally mounted things, routes, state management, etc.\nHowever, there is no this in the Composition API of Vue3. If you want a similar usage, there are two, one is to access the current component instance, and the other is to access the global instance. You can print it out by yourself and take a look.\n1 2 3 4 5 6 7 8 9 \u0026lt;script setup\u0026gt; import { getCurrentInstance } from \u0026#39;vue\u0026#39; // Proxy is the current component instance, which can be understood as this at the component level, without the global instance, route, state management, etc. const { proxy, appContext } = getCurrentInstance() // This global is the global instance. const global = appContext.config.globalProperties \u0026lt;/script\u0026gt; Global Registration(Property/Function) In Vue2, if we want to mount something globally, we usually do it as follows, and then we can get it through this.xxx in all components.\n1 Vue.prototype.xxx = xxx But in Vue3 you can’t write like this. Instead, it changes to a global object that can be accessed by all components, which is the object of the global instance mentioned above. For example, make global registration in main.js.\n1 2 3 4 5 6 // main.js import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; const app = createApp(App) // add global property app.config.globalProperties.name = \u0026#39;xxx\u0026#39; Call it in other components.\n1 2 3 4 5 6 7 \u0026lt;script setup\u0026gt; import { getCurrentInstance } from \u0026#39;vue\u0026#39; const { appContext } = getCurrentInstance() const global = appContext.config.globalProperties console.log(global.name) \u0026lt;/script\u0026gt; Template In Vue2, there can only be one root node, while Vue3 supports multiple root nodes, which everyone knows.\nIn essence, each component in Vue3 is still a root node, because the DOM tree can only be a tree structure. It’s just that Vue3 added a judgment during the compilation stage. If the current component has more than one root element, it will add a fragment component to package this multi-root component, which means this component still only has one root node. And the fragment, like keep-alive, is an built-in component that will not be rendered.\nGet DOM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;template\u0026gt; \u0026lt;el-form ref=\u0026#34;formRef\u0026#34;\u0026gt;\u0026lt;/el-form\u0026gt; \u0026lt;child-component /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import ChildComponent from \u0026#39;./child.vue\u0026#39; import { getCurrentInstance } from \u0026#39;vue\u0026#39; import { ElForm } from \u0026#39;element-plus\u0026#39; // Method one, the variable name must be the same as the ref attribute on the DOM, which can automatically form a binding. const formRef = ref(null) console.log(formRef.value) // Method two const { proxy } = getCurrentInstance() proxy.$refs.formRef.validate((valid) =\u0026gt; { ... }) // Method three，For example, in ts, you can directly get the component type. // You can get sub-components like this. const formRef = ref\u0026lt;InstanceType\u0026lt;typeof ChildComponent\u0026gt;\u0026gt;() // You can also get the component type of element ui like this. const formRef = ref\u0026lt;InstanceType\u0026lt;typeof ElForm\u0026gt;\u0026gt;() formRef.value?.validate((valid) =\u0026gt; { ... }) \u0026lt;/script\u0026gt; Initialization In Vue2, when you enter the page and then request the interface, or some other initial operations, they are generally placed in created or mounted, while in Vue3 beforeCreated and created are not used, because setup is executed before these two, and having these two would be superfluous.\nSo the content that was used in the beforeCreated / created / beforeMount / mounted hooks can be directly placed in the setup in Vue3, or in onMounted/onBeforeMount.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;script setup\u0026gt; import { onMounted } from \u0026#39;vue\u0026#39; // Request function. const getData = () =\u0026gt; { xxxApi.then(() =\u0026gt; { ... }) } onMounted(() =\u0026gt; { getData() }) \u0026lt;/script\u0026gt; Unbinding In Vue2, there are generally two methods for operations such as clearing timers, listeners, etc:\nOne is to use $once in conjunction with hook: BeforeDestroy, which is not supported by Vue3. The other is to use the beforeDestroy / deactivated hooks. In Vue3, the hook functions are just renamed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;script setup\u0026gt; import { onBeforeUnmount, onDeactivated } from \u0026#39;vue\u0026#39; // Before the component is unloaded, it corresponds to beforeDestroy in Vue2. onBeforeUnmount(() =\u0026gt; { clearTimeout(timer) window.removeAddEventListener(\u0026#39;...\u0026#39;) }) // Exit cache component, corresponds to deactivated in Vue2. onDeactivated(() =\u0026gt; { clearTimeout(timer) window.removeAddEventListener(\u0026#39;...\u0026#39;) }) \u0026lt;/script\u0026gt; Ref and Reactive Both are used to create responsive objects, ref is commonly used to create basic types, reactive is typically used to create responsiveness, this is advocated by official, yet not necessarily in reality. Some people use ref to define arrays, some people define only one reactive in a component and put all data in it, just like Vue2’s data, and some people use both.\nThere are two points to note:\nIf ref is passed in an referenced type, the internal source code also calls reactive to implement it.\nThe property returned by ref is used directly in the template, but in JS it needs to be obtained through .value, as shown below. Because the ref returns a wrapped object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;{{ count }}\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, reactive } from \u0026#39;vue\u0026#39; const count = ref(1) const arr = ref([]) console.log(arr.value) // [] const data = reactive({ name: \u0026#39;xxx\u0026#39;, age: 18, ... }) console.log(data.name) \u0026lt;/script\u0026gt; Why does ref have to return a wrapped object? It’s well known that data in Vue2 all return an object.\nBecause object reference types can be used for proxies or hijacking, if only the basic type is returned, it is stored in the stack, and once execution in the execution stack is completed, it is recovered, with no possibility of adding a proxy or hijacking. Naturally it’s impossible to track subsequent changes, so it has to return an object, so that it can be responsive.\ntoRef and toRefs The common point of these two methods is to create responsive references, mainly used to take the properties out of the responsive objects, or destructure the responsive objects, and the destructured property values are still responsive. If you destructure them directly without these two methods, you will lose the responsive effect.\nThe main advantage is that we can use the direct variable xxx without needing data.xxx. And when we modify xxx, we are also directly modifying the underlying object’s properties.\nThe difference between these two: The one with “s” and without “s”, are singular and plural. The meaning is to take one or to take many.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;script setup\u0026gt; import { reactive, toRef, toRefs } from \u0026#39;vue\u0026#39; const data = reactive({ name: \u0026#39;xxx\u0026#39;, age: 18 }) // Although you can get name/age this way, they become ordinary variables and lose reactive effect. const { name, age } = data // A responsive property is taken out. const name = toRef(data, \u0026#39;name\u0026#39;) // The properties that are destructured in this way all have responsive effects. const { name, age } = toRefs(data) // Whether it\u0026#39;s toRef or toRefs, modifying in this way will change the name in data. // That means changing the properties of the source object, which is the typical behavior of reactive. name.value = \u0026#39;xxx\u0026#39; \u0026lt;/script\u0026gt; watch watch is used to monitor an existing property, and to do certain operations when changes occur. The following three ways of writing are commonly used in Vue2.\n1 2 3 4 5 6 7 8 9 10 11 watch: { userId: \u0026#39;getData\u0026#39;, userName (newName, oldName) { this.getData() }, userInfo: { handler (newVal, newVal) { this.getData() }, immediate: true, deep: true } } In Vue3, the listening syntax is much more enriched.\nVue3’s watch is a function that can receive three parameters, the first parameter is the property to be monitored, the second one is the callback function to receive the new and old values, and the third one is the configuration item.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;script setup\u0026gt; import { watch, ref, reactive } from \u0026#39;vue\u0026#39; const name = ref(\u0026#39;xxx\u0026#39;) const data = reactive({ age: 18, money: 100000000000000000000, children: [] }) // Listening ref attribute watch(name, (newName, oldName) =\u0026gt; { ... }) // This is how you listen for other properties, routes, or state management. watch( () =\u0026gt; data.age, (newAge, oldAge) =\u0026gt; { ... } ) // To listen to multiple properties, put multiple values ​​in the array, and the returned new and old values ​​are also in the form of an array. watch([data.age, data.money], ([newAge, newMoney], [oldAge, oldMoney]) =\u0026gt; { ... }) // The third parameter is an object, which is a configurable item with five configurable properties. watch(data.children, (newList, oldList) =\u0026gt; { ... }, { // Similar to Vue2 immediate: true, deep: true, // The execution timing of the callback function, which is called by default before the component is updated. If it\u0026#39;s called after the update, change it to \u0026#39;post\u0026#39;. flush: \u0026#39;pre\u0026#39;, // The default value is \u0026#39;pre\u0026#39;, you can change it to \u0026#39;post\u0026#39; or \u0026#39;sync\u0026#39;. // use debug onTrack (e) { debugger } onTrigger (e) { debugger } }) \u0026lt;/script\u0026gt; Inside the watch callback function, you can accept the third parameter onInvalidate, which is a function that clears side effects. For the first time, the callback function of the listening (handler) is not going to trigger onInvalidate, and subsequently, will trigger onInvalidate by default each time.\nIn other words, it’s default operation mechanism called before updating, for example, in the following code, when the key triggers an update, it will print 222 first and then print xxx. If you need to call after updating, you can add flush: post in the third configuration of watch.\n1 2 3 4 5 6 7 8 9 // The callback function receives a parameter, which is a function used to clear side effects. watch(key, (newKey, oldKey, onInvalidate) =\u0026gt; { console.log(\u0026#39;xxx\u0026#39;) // By default, the DOM obtained is the DOM before the update. If it is flush: post, you can get the DOM after the update. console.log(\u0026#39;DOM：\u0026#39;, dom.innterHTML) onInvalidate(() =\u0026gt; { console.log(2222) }) }) The use scenario of onInvalidate is such as: for example, there are some asynchronous operations in the callback function (handler) of listening, and when triggering watch again, it can be used to cancel/ignore/reset/initialize some operations of the previous unfinished asynchronous tasks, such as canceling the unfinished request when triggering watch last time.\nwatchEffect In Vue3, in addition to watch, there is also a watchEffect. The differences are:\nwatch is to listen to one or more values passed in, and it will return new and old values when triggered, and by default it will not execute for the first time.\nwatchEffect is a function that is executed immediately, so it will be executed by default for the first time, and there is no need to pass in listening content. It will automatically collect the data sources in the function as dependencies, and it will re-execute the function when the dependencies change. (a bit like computed), and it will not return new and old values.\nThe timing of side effect clearance and refreshment of side effects are the same, the difference is that in watch, it will be passed as the third argument of the callback, in watchEffect it is the first argument of the callback function.\nNormally, both will stop listening automatically after the component is destroyed/unmounted, but there are exceptions, such as asynchronous methods, listeners created in setTimeout need to manually stop listening, and the stop method is as follows.\n1 2 3 4 5 6 7 // Assigning a listening method. const unwatch = watch(\u0026#39;key\u0026#39;, callback) const unwatchEffect = watchEffect(() =\u0026gt; {}) // When you need to stop listening, manually call to stop listening. unwatch() unwatchEffect() Use of watchEffect:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;script setup\u0026gt; import { watchEffect } from \u0026#39;vue\u0026#39; // Normal use. watchEffect(() =\u0026gt; { // It will automatically collect the properties used by this function as dependencies for monitoring. // It monitors the userInfo.name property, and will not monitor userInfo. console.log(userInfo.name) }) // There are two parameters. The first one is to trigger the monitoring callback function, and the second one is optional configuration items. watchEffect(() =\u0026gt; {...}, { // This is where the configuration items are. The meaning is the same as watch, but there are only three available configuration items. flush: \u0026#39;pre\u0026#39;, onTrack (e) { debugger } onTrigger (e) { debugger } }) // The callback function receives one parameter, which is the function to clear side effects, similar to the one in watch. watchEffect(onInvalidate =\u0026gt; { console.log(\u0026#39;xxx\u0026#39;) onInvalidate(() =\u0026gt; { console.log(2222) }) }) \u0026lt;/script\u0026gt; If you need to change the configuration item flush to post or sync in watchEffect, you can directly use the alias, as follows.\n1 2 3 4 5 6 7 8 9 10 11 watchEffect(() =\u0026gt; {...}, { flush: \u0026#39;post\u0026#39;, }) // it\u0026#39;s the same as the one below watchPostEffect(() =\u0026gt; {}) ----------------------------- watchEffect(() =\u0026gt; {...}, { flush: \u0026#39;sync\u0026#39;, }) // it\u0026#39;s the same as the one below watchSyncEffect(() =\u0026gt; {}) computed In Vue2, the most common use cases for computed are: mapGetters/mapState for fetching property from state management, getting property from a URL, conditional judgments, type conversions, etc., and it supports both function and object writing methods.\nIn Vue3, computed is no longer an object, but a function. The usage is somewhat similar in general, the first argument of the function is the listener source, used to return the computed new value. It also supports object writing methods, and the second argument can be used for debugging.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;script setup\u0026gt; import { computed } from \u0026#39;vue\u0026#39; const props = defineProps([\u0026#39;visible\u0026#39;, \u0026#39;type\u0026#39;]) const emit = defineEmits([\u0026#34;myClick\u0026#34;]) // Function method, computed type. const isFirst = computed(() =\u0026gt; props.type === 1) // Object method const status = computed({ get () { return props.visible }, // It is equivalent to this.visible in Vue2. set (val) { emit(\u0026#39;myClick\u0026#39;, val) } // It is equivalent tothis.$emit(\u0026#39;input\u0026#39;, val)in Vue2. }) // The second argument of computed is also an object, used for debugging. const hehe = computed(Parameter one either of the above can be used， { onTrack (e) { debugger } onTrigger (e) { debugger } }) \u0026lt;/script\u0026gt; nextTick The usage method of nextTick, excluding the use of this, everything else is exactly the same as Vue2, and there are still three ways.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;script setup\u0026gt; import { nextTick} from \u0026#39;vue\u0026#39; // one const handleClick = async () =\u0026gt; { await nextTick() console.log(\u0026#39;xxx\u0026#39;) } // two nextTick(() =\u0026gt; { console.log(\u0026#39;xxx\u0026#39;) }) // three nextTick().then(() =\u0026gt; { console.log(\u0026#39;xxx\u0026#39;) }) \u0026lt;/script\u0026gt; mixins and hooks In Vue2, logic extraction and reuse generally use mixins, but there are three disadvantages:\nThere is no independent namespace, mixins will cause naming conflicts with the internals of the component\nIf you don’t go through the code, you won’t know what’s in the imported mixins\nWhen multiple mixins are introduced, you don’t know which one the mixin you are using comes from\nThe hooks syntax for logic extraction and reuse in Vue3 is actually just a function that can accept arguments and use the returned values. Or, it can be understood this way: how to write commonly used methods that need to be encapsulated? You can do it just like that in Vue3.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // xxx.js expport const getData = () =\u0026gt; {} export default function unInstance () { ... return {...} } // xxx.vue import unInstance, { getData } from \u0026#39;xx.js\u0026#39; const { ... } = unInstance() onMounted(() =\u0026gt; { getData() }) Regarding how to write more elegant code with hooks, one needs to write more and practice more. It’s not something that can be mastered with a few sentences and lines of code.\nComponent communication There are several ways to communicate between components in Vue3:\nprops + defineProps\ndefineEmits\ndefineExpose / ref\nuseAttrs\nv-model (supports multiple)\nprovide / inject\nVuex / Pinia\nmultiple v-model In Vue2, only one v-model can be written on each component. If the child component does not write a model, it can be received by props by default, and modifications are made through the this.$emit(‘input’) event.\nIn Vue3, each component supports writing multiple v-model, eliminating the need for .sync and model renaming operations. When writing v-model, you need to include the name, as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // parent \u0026lt;template\u0026gt; \u0026lt;child v-model:name=\u0026#34;name\u0026#34; v-model:age=\u0026#34;age\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34; const name = ref(\u0026#39;xxx\u0026#39;) const age = ref(18) \u0026lt;/script\u0026gt; // child \u0026lt;script setup\u0026gt; const emit = defineEmits([\u0026#39;update:name\u0026#39;, \u0026#39;update:age\u0026#39;]) const handleClick = () =\u0026gt; { console.log(\u0026#39;clicked\u0026#39;) emit(\u0026#39;update:name\u0026#39;, \u0026#39;yyy\u0026#39;) } \u0026lt;/script\u0026gt; State Management The usage of Vuex is basically the same as Vue2. If you are starting from scratch, it’s recommended to use Pinia directly.\nrouter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // main.js import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import Router from \u0026#39;./router\u0026#39; const app = createApp(App) app.use(Router) ... // router/index.js import { createRouter, createWebHistory, RouteRecordRaw } from \u0026#39;vue-router\u0026#39; const routes = [ { path: \u0026#39;/\u0026#39;, redirect: { name: \u0026#39;login\u0026#39; } } ] const router = createRouter({ history: createWebHistory(process.env.BASE_URL), routes }) export default router // .vue file \u0026lt;script setup\u0026gt; import { useRoute, useRouter } from \u0026#34;vue-router\u0026#34; // \u0026#39;route\u0026#39; corresponds to this.$route in Vue2. const route = useRoute() // router corresponds to this.$routerin Vue2. const router = useRouter() \u0026lt;/script\u0026gt; CSS Style Penetration In Vue2, when it’s not possible to modify the style of sub-components or components within a library in scoped, you can use CSS style penetration. Regardless of whether it’s Less or SASS, you use /deep/ .class {} for style penetration. However, Vue3 does not support the /deep/ syntax, it has been replaced with :deep(.class) for style penetration.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;style lang=\u0026#34;scss\u0026#34; scoped\u0026gt; // If this doesn\u0026#39;t work .el-form { .el-form-item { ... } } // Vue2 /deep/ .el-form { .el-form-item { ... } } // Vue3 :deep(.el-form) { .el-form-item { ... } } \u0026lt;/style\u0026gt; Binding JS Variables with CSS 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;name\u0026#34;\u0026gt;xxx\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref } from \u0026#34;vue\u0026#34; const str = ref(\u0026#39;#f00\u0026#39;) // red \u0026lt;/script\u0026gt; \u0026lt;style scoped lang=\u0026#34;scss\u0026#34;\u0026gt; .name { background-color: v-bind(str); } \u0026lt;/style\u0026gt; ","date":"2024-01-21T16:22:38+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*WzmFm3IVFVQLnzcA","permalink":"http://localhost:1313/p/vue3-develop-document/","title":"Vue3 develop document"},{"content":"1. What level of cognitive ability do we currently have? The cognitive ability consists of four most important points: essence, system, long-term perspective, and methods.\nEssence The logic here is as follows: there are countless specific phenomena, intricate and difficult to grasp. But within them lie common principles. By refining, summarizing, and generalizing these principles, we can elevate our cognition from the level of specific phenomena to the level of abstract laws, and eventually reach the essence through continuous improvement. The essence (the final abstract law) is far fewer compared to the specifics, allowing us to potentially improve our mastery of it and achieve the goal of controlling the many with the few.\nFor instance, I once saw this comment: “Our math teacher began introducing the four basic ideas of high school mathematics from the second year of high school: classification, transformation, combination of number and figure, and functions and equations. For each problem discussed, the teacher would analyze the idea behind it, then explain the key points of the problem from a higher level, and finally talk about common errors. These skills of summarizing and connecting ideas are what I learned from my math teacher.”\nWhy did we need to summarize the complicated mathematical solutions into four basic ideas: classification discussion, transformation, combination of number and form, and function and equation?\nThe reason is quite simple: if you are always at the level of the “eye” (specific phenomena), then there will be as many “eyes” as there are problems — it will be a chaotic mess before your eyes and you will not be able to master problem-solving. However, if you rise to the level of the “line” (abstract rules), you can organize the tens of thousands of “eyes” with just four “lines”. At this point, your mastery ability is relatively enhanced.\nTo illustrate, we can imagine the problem-solving process as like finding a specific house in a strange town, where there are tens of thousands of houses. Our task is to find the final house based on the clues (problem statement).\nOnce you are able to classify and categorize most problems with the four mathematical ideas, it’s as if you’ve placed the tens of thousands of houses onto four streets. The ideas of classification discussion, transformation, combination of numbers and figures, and functions and equations, are like the east main street, west main street, south main street, and north main street respectively.\nThe further refinement under the four mathematical ideas is like the different alleys on the main streets. Gradually, you’ll be able to pinpoint the location of the house: “east main street — happy alley — happy community — XXX building — XXX unit — XXX room.”\nThis approach of summarizing and generalizing tens of thousands of different types of problems into these four kinds of mathematical ideas provides you with a clear judgment path. After a period of training, the judgment process will be very quick, and you may be able to directly determine the solution to the problem at a glance. This is the so-called intuition of a math expert.\nFor someone whose cognitive level hasn’t reached this height, it’s as if they are navigating through the town’s tens of thousands of houses with a vague clue, relying mostly on luck, which is significantly less efficient. It’s like other people are using a map, while you know nothing about the area.\nFrom here, we can see that cognitive ability, to a large extent, is the level at which you view problems, which in turn depends on your ability to extract and generalize abstract principles from complicated phenomena. The so-called philosophy of “the Dao engenders One; One engenders Two; Two engenders Three; Three engenders all things,” actually reverses the process of cognition, from the many to the three, to the two, to the one, to the Dao.\nSystem The logic here is as follows: to a certain degree, the more advanced and effective things usually have more complex structures (just like modern political and financial systems which are extremely intricate systems). Therefore, understanding more complex structures becomes a route for us to greatly enhance our abilities. To meet the demand for comprehending intricate things, we must have cognitive capability for complex systems.\nThe combination of two simple things, if paired properly, tends to create an efficiency that multiplies rather than simply adds. For instance, my major in university was law. When I was about to graduate, a highly successful senior told me this: a person who is good at law may have a combat power of 10. If this person is also good at English, his combat power can immediately be raised to 50. Later, I found out that for a student graduating from a prestigious law school in China who wants to join a large firm in China or abroad, English ability is a very important criterion.\nTake playing games as another example. If you have watched competitive game matches, especially formal matches of now popular games like League of Legends or Dota, you will find that when people evaluate whether a team is strong, they often say: this team is strong in all positions and has no apparent weak points. What this means is that a team of five people can only be called a strong team if everyone’s level reaches a certain point, and additionally, they have absolute strengths. If there is a noticeably weak position or a time with strong disadvantages, then they can easily be targeted and defeated.\nA high cognitive level signifies an ability to understand complexity and systems. It doesn’t simply look at one point in isolation, but rather considers issues within certain systems. Viewing things in a broad context, such as past, present, and future; surface, middle and deep layers; trends, rhythms and details; enemies, neutrals, and friends; long, medium and short terms; politics, economy, law, etc.\nSeeing many things, and seeing them comprehensively, then making comprehensive judgements, because the power of a complex system is far stronger than the power of single points without a system.\nIsolated, partial and absolute ways of cognition are inefficient and erroneous.\nMany people lament the unfairness of society after graduation, saying that others had worse academic performance but the job opportunities and development are much better than theirs, which is simply unfair. However, they forgot that once you step into the society, everyone is demonstrating their abilities. Your past good grades is just one aspect. Others might have a good family background, good connections, high insights, abundant resources, be efficient in handling affairs, have emotional intelligence, and good luck… The rule of game has changed. This is already a systematic competition. You are still insisting on the strength and weakness of a certain point, obviously narrowing your field of vision. If this affects your mentality and overall progress, in fact, it’s detrimental to your growth.\nLong-term perspective The logic here is: the development curve of things is not linear, but a periodic alternation of platform phase (quantitative change) and leap phase (qualitative change) — I believe many people must have seen similar explanations online before. You can only embrace the leap phase if you endure the platform phase. So, no matter what you do, maintaining a long-term perspective and patience is very important. You must be mentally prepared that for a considerable period (the plateau phase) there will be investments but no obvious return. This carries risk, but if you don’t take the risk, you will miss the great rewards of the leap phase.\nPeople often overestimate their short-term abilities, yet underestimate what they can achieve in the long term.\nTo put it in simple terms, it’s about learning to fish for big gains with a long line and save money regularly.\nI will quote another of my responses here, which refers to a change in my understanding over the years: maintain patience.\nIt’s about considering current issues from a longer time range perspective, such as one year, three years, ten years, or even longer.\nNot wrestling with the immediate success or failure of things, but pondering: what does this thing mean to me from the scale of ten years?\nI found out that such patience brings a lot of benefits, some expected and some not anticipated.\nSuch as calmness, immediate successes or failures do not determine everything, so even if there’s a failure or the result doesn’t meet expectations, it won’t have too much of an impact.\nAnd courage, since this is the case, naturally you would dare to try some things you didn’t dare to try before.\nAlso flexibility, if this path is blocked, just switch to another. If it doesn’t work, switch again — there’s no hurry.\nAnd confidence, if not one year, maybe three years is enough. If not, then ten years. I’m not giving up.\nAccompanying patience are two concepts.\nOne is the degree of completion, as in how much percent. For instance, we still fail at something through hard work, but we have gained experience and improved capabilities. Although the thing is a failure, the degree of completion towards doing this thing has increased. For instance, it has grown from thirty percent to sixty percent.\nThe second is the growth of life (and the iteration of versions) — that is, not treating a thing as a lifeless machine, but a life that can constantly grow. It can derive energy from success or failures to promote its own evolution. It generates a consciousness of version evolution (iteration) from 1.0 to 2.0 to 3.0 to 4.0 and so on. Each version doesn’t have to be perfect, but each is more perfected than the last.\nPatience, degree of completion, growth, and iteration collectively transform a growth pattern.\nFrom experience so far, growth under this pattern compared to previous patterns (anxiety, urgency, one-off dealing, perfectionism) is quicker and more solid.\nmethods When doing things, the more the methods and tools used conform to its regularity (internal and external rules), the higher the efficiency will be. “If a craftsman wants to do his work well, he must first sharpen his tools.” The methods and tools are directly related to efficiency, which is as important as whether you use an airplane or tank, or just a spear or dart when you go into battle.\nBefore 2009, my method of memorizing words was quite foolish, even for long words I would memorize them letter by letter. In 2009, during my postgraduate entrance examination, I encountered the concept of word roots, which was equivalent to a sudden upgrade from memorizing words letter by letter to memorizing them by their “radicals” or structural components. (The root of a word can be roughly understood as the radical of an English word).\nLet’s understand it this way: if you’re learning the Chinese language and you want to learn the word ‘好’, if you don’t know radicals, you would have to remember how to write it stroke by stroke, instead of recognizing it as ‘女’ plus ‘子’. The difference in efficiency is huge.\nThis is the significance of method and tool, it can greatly enhance efficiency. Big problems have large solutions, and small problems have small methods. The significance of the method and tool lies in solving the problem in a targeted way. For instance, if you want to eat a walnut, it’s much easier and more efficient to use a nutcracker than trying to crack it with a brick or a door. The key is to find it.\nTo sum up — essence, system, long-term, method.\n2. How to improve one’s cognitive level? Maintain a Consciousness of Improvement This is the first step. We should always maintain a consciousness of improving our cognitive level, from large aspects like life planning to small tasks like cooking and washing dishes. We should constantly ask ourselves: “Could there be a better way to do this better, more efficiently, and at a lower cost?” If you don’t have this consciousness, whether you’re unaware of it or lack the will to improve, your cognitive level will remain at its current state. Because I have been asking myself this question these years, I have managed to achieve some results in certain areas, despite my unexceptional aptitude. As the saying goes, don’t fear slowness, fear stagnation. As long as you hold onto the consciousness of improvement, you can seize fleeting opportunities and make progress.\nSeek Sources of Stimulation This is a crucial point. You need to find the object and direction of learning. In the past, due to the high cost and low efficiency of information dissemination, this was one of the biggest challenges. However, with the advent of the internet era, this has become much easier than before. Thanks to online bookstores and websites like Zhihu, the chances of accessing quality information sources have increased.\nGradually Digest and Absorb In this step, I want to introduce a concept: downgrading. Sometimes when you come across information sources of a high cognitive level, they may be far beyond your cognitive level and you won’t be able to understand them. To put it simply, they’re too tough for you to chew. So you need to lower the difficulty level, soften it, to help with absorption.\nStrive for Practice and Improvement There’s a saying, acquiring knowledge by reading tends to be shallow, true knowledge requires practice. All things, only when you start practicing, can you talk about truly gaining a cognition of it. No matter how many things you’ve seen, and how much you feel your cognitive level has improved, you must apply it to actual practice. Practice will give you genuine feedback, making you realize whether your progress is real and valid, or it merely appears so, or you’ve had mistaken learning.\n3. Supplement Learn to summarize and conclude. This issue is very important, but it’s too extensive and profound, it would take a long discussion to cover, so I will hold off discussing it for now. I would suggest everyone read “On Practice” and “On Contradiction” for further understanding.\nPay attention to your experiences, recognize successful cases of cognitive level improvement, understand them fully, apply them widely, and use such points to lead to broader areas and transfer them horizontally. For instance, if one day you find yourself escalating a level in perceiving a certain issue, it often means you have grasped a universal method. You should cherish this experience, even if it comes from playing poker or video games.\nKeep an open mind and always accumulate. To put it bluntly, we shouldn’t be defensive or always on the lookout for other people’s flaws. Nobody’s perfect, but we should pay more attention to other people’s strengths, as this can help us locate more sources of stimulation. Additionally, when we have seen or learned something, we must record it immediately, to facilitate future reference, and also to encourage the process of analysis, comprehension, and summarization.\nThink independently. Lastly, I want to say, you have to judge any matters according to your specific situation, absorb the essence, and discard what is unsuitable. Only by doing this can you achieve true progress. This applies both to studying and examinations, and to life in general.\n","date":"2024-01-17T13:53:34+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*NAA1Jjcyk42KmRrf","permalink":"http://localhost:1313/p/how-can-we-improve-our-cognitive-abilities/","title":"How can we improve our cognitive abilities?"},{"content":"A million years ago, humans had just learned to make fire, ending the days of eating raw meat and drinking blood. At dusk, a group of ape men returned to the cave with their prey and started a fire.\nAt this moment, another person walked in from outside the cave, his face hidden in the darkness, unclear to others.\n1 A smart ape-man raised a torch, and tentatively approached the newcomer, scrutinizing him all over. Yes, he looked the same as himself, apparently of the same kind, but this smart ape-man always felt that something was not quite right.\nHe asked the man in low murmurs, \u0026ldquo;I\u0026rsquo;ve never seen you before.\u0026rdquo;\nThe man laughed, \u0026ldquo;Just a passer-by, wanting to sleep.\u0026rdquo;\nHumans are social animals, so the people in the cave agreed to his request.\nAt deep night, when everyone else had fallen asleep, the man who held the torch earlier couldn\u0026rsquo;t sleep at all. He kept thinking of one question over and over again -\nWhat exactly was wrong with this person who came in?\nA nose, two eyes, a mouth, two ears, two arms, two legs…\nEverything seemed normal, and nothing extra like any tail or wings stood out.\nThe clever ape-man couldn\u0026rsquo;t solve this mystery at the moment, but he felt that something was off!\nHe silently glanced at the man who had come to stay overnight, who was sound asleep at this moment.\nLate in the night, he also fell asleep and had a dream where he saw the man who had lodged there again.\nIn the dream, only the two of them were there, and he felt a bit scared, calling upon the gods as a blessing.\nThat man seemed to see through his thoughts and said, \u0026ldquo;Shh, even the heavens do not know of my existence…\u0026rdquo;\nThe two got closer and closer, and as he shook all over, watching the other, he finally remembered what seemed off!\nAfter he woke up, he ran out of the cave like a madman, howling fiercely!\n\u0026ldquo;It\u0026rsquo;s too terrifying! I need to tell everyone this secret!\u0026rdquo;\nFrom that moment on, mankind\u0026rsquo;s gene for fear of \u0026rsquo;that\u0026rsquo; has been passed down. Thus, the term \u0026lsquo;Uncanny Valley\u0026rsquo; has also been derived in modern society.\n2 Click!\nIn my home office, at this moment, my cousin Lin Yu types the last word on her computer and looks up at me.\n\u0026ldquo;So what happened next? What kind of secret did the clever ape-man end up discovering?\u0026rdquo;\nI asked, curious.\nMy cousin shut her computer, picked up the coffee next to her, and ambiguously said as she sipped it,\n\u0026ldquo;This is a story I just wrote, I\u0026rsquo;m not even sure what the secret is.\u0026rdquo;\nHearing her answer, my face fell, \u0026ldquo;Huh, I was just so entranced watching you write. I was waiting for you to figure out the answer. You\u0026rsquo;re the author, and you don\u0026rsquo;t even know!\u0026rdquo;\nMy cousin looked at me, \u0026ldquo;Lin Yan, don\u0026rsquo;t you usually have a lot of ideas? Why don\u0026rsquo;t you help me figure out how to develop this secret.\u0026rdquo;\nI was speechless, \u0026ldquo;What the heck? You\u0026rsquo;re a horror story writer, and you came to me for answers?\u0026rdquo;\nMy cousin patted me on the shoulder, \u0026ldquo;This is called brainstorming. My initial plan was to make the passing ape-man a monster, but that seemed too cliche and lacked suspense.\u0026rdquo;\n\u0026ldquo;Since your story is themed around the uncanny valley, you certainly can\u0026rsquo;t describe it as a monster …\u0026rdquo;\nAnd with that, I stood up and took a book from the shelf - a foreign book mainly about the works of various world-renowned horror authors, along with some theoretical analysis of horror.\nFinding a particular page, I handed the book to my cousin. I sat back down and said, \u0026ldquo;You see, the earliest theory about the uncanny valley pertains to robots and non-human objects.\u0026rdquo;\nMy cousin grimaced, \u0026ldquo;I\u0026rsquo;ve known about this basic theory for long.\u0026rdquo;\nShe claimed so, but she still patiently studied the book.\nI couldn\u0026rsquo;t help but laugh: \u0026ldquo;So since your story starts with an ancient ape-man, robots are clearly out of the question. It\u0026rsquo;s illogical, would break immersion.\u0026rdquo;\nSearching for a particular page, I handed the book to my cousin and sat back down. \u0026ldquo;See, the earliest theory of the uncanny valley pertains to robots and non-human entities.\u0026rdquo;\nMy cousin pouted, \u0026ldquo;I\u0026rsquo;ve been aware of this basic theory for a long time.\u0026rdquo;\nEven though she said that she was still patiently studying the book.\nI couldn\u0026rsquo;t help but laugh, \u0026ldquo;So, since your story starts with an ancient ape-man, a robot is immediately out of the question. It\u0026rsquo;s illogical, and the anachronism breaks immersion.\u0026rdquo;\nWithout lifting her head, my cousin said, \u0026ldquo;Exactly. So, I initially defined this thing as something that looks the same as humans but has one fatal flaw, and this flaw, once discovered by humans, will out it.\u0026rdquo;\nThis piqued my interest. \u0026ldquo;That sounds good. So what is the flaw?\u0026rdquo;\nAnnoyed, my cousin said, \u0026ldquo;Didn\u0026rsquo;t I just say? I haven\u0026rsquo;t thought it through yet.\u0026rdquo;\nSeeing that my cousin was still deep in thought, I flippantly suggested, \u0026ldquo;Mars people? Lizard people? People from the underground?\u0026rdquo;\n\u0026ldquo;Go away!\u0026rdquo; My cousin waved me off dismissively. \u0026ldquo;Such a boring setting.\u0026rdquo;\nAfter a while, my cousin pointed to her computer. \u0026ldquo;But I\u0026rsquo;ve already chosen a name for it.\u0026rdquo;\n\u0026ldquo;What name?\u0026rdquo;\n\u0026ldquo;We are human, so they are… human-like!\u0026rdquo;\nUpon hearing this name, I leaned back on the couch. \u0026ldquo;Why are you so casual? Besides, if a reader doesn\u0026rsquo;t hear well, they might think it\u0026rsquo;s \u0026lsquo;startling\u0026rsquo;, making it even more startling.\u0026rdquo;\nWith a gesture of disdain, my cousin continued to read her book.\nSuddenly, I remembered a snippet from the novel earlier and asked curiously, \u0026ldquo;Cousin, why does the clever ape-man feel something is off when he first sees the human-like?\u0026rdquo;\nShe gave me a deep look and asked puzzlingly, \u0026ldquo;Lin Yan, do you feel scared looking at me?\u0026rdquo;\n\u0026ldquo;Huh?\u0026rdquo; The question confused me. \u0026ldquo;What do you mean?\u0026rdquo;\nSeeing my reaction, my cousin\u0026rsquo;s tense face relaxed into a playful smile. She said,\n\u0026ldquo;One characteristic of the human-like is that even before their flaw is discovered, a small portion of humans can detect them and will feel fear towards the human-like.\u0026rdquo;\n\u0026ldquo;But fear must have a source. If the human-like flaw hasn\u0026rsquo;t been discovered, how can humans feel afraid?\u0026rdquo; My curiosity grew.\nMy cousin put the book on the table and suddenly stopped talking. Staring blankly at me with an expressionless face.\n\u0026ldquo;Big sis, why are you staring at me?\u0026rdquo;\nI felt a bit uncomfortable with her demeanor.\nShe tilted her head slightly with an ambiguous smile and asked,\n\u0026ldquo;Why do you assume that the person who came to your house today is your real cousin?\u0026rdquo;\n3 With a buzz, I instantly felt my scalp tighten!\n\u0026ldquo;You… are joking around again.\u0026rdquo;\nI tried not to appear too embarrassed on the face. I assumed she\u0026rsquo;d be amused again, as she was when she saw my shocked reaction earlier.\nBut…\nA few seconds later, something felt wrong. My cousin was still staring at me with that indifferent and eerie gaze!\nIt was completely out of sync with her usual persona!\nI couldn\u0026rsquo;t say anything. My body wound tight, all I wanted to do was to escape this room.\nMy cousin at that moment looked as if she was possessed by an unknown entity, or like a mentally disturbed person - as if her acquired persona of over twenty years was merely a charade, and only now was her true self revealing.\nThen suddenly, she got up and moved her face closer to mine.\n\u0026ldquo;Hey!\u0026rdquo;\nI jumped at the situation, my body tensing up.\nHer face got closer to mine, and then, she burst out laughing.\n\u0026ldquo;Silly little brother, you got scared by me again.\u0026rdquo;\nShe turned around and sat back down in her chair, her demeanor returning to the familiar one, with a cunning smile of success on her lips.\nWith a sigh of relief, I threw a hand cushion at her and shouted,\n\u0026ldquo;Lin Yu! Are you crazy?!\u0026rdquo;\n\u0026ldquo;Hahahaha!\u0026rdquo; Seeing my reaction, my cousin became even more amused.\n\u0026ldquo;Just wait, one day I\u0026rsquo;ll frighten you too!\u0026rdquo; I said helplessly.\nMy cousin put her laptop into her backpack and said, \u0026ldquo;I was doing a little experiment earlier, and also answering your question.\u0026rdquo;\n\u0026ldquo;What question?\u0026rdquo;\n\u0026ldquo;Weren\u0026rsquo;t you asking me why humans inexplicably feel afraid of the human-like? I think our recent experiment could partly explain that.\u0026rdquo;\nReflecting on her demeanor just a minute ago, I had an epiphany, \u0026ldquo;I get it. You\u0026rsquo;re saying, when a familiar person suddenly becomes strange and eerie, that\u0026rsquo;s also a form of the uncanny valley, right?\u0026rdquo;\n\u0026ldquo;Exactly!\u0026rdquo; My cousin snapped her fingers, \u0026ldquo;Assume I\u0026rsquo;m a human-like. You didn\u0026rsquo;t notice my flaw, but you were still scared. This was because my abnormality created an enigma, causing you to fear.\u0026rdquo;\nI nodded involuntarily. Her words did make sense.\n\u0026ldquo;So, have you figured out how to write the story about the ape-man and the human-like?\u0026rdquo;\nMy cousin sighed and put on her backpack, \u0026ldquo;Not yet. I need to think more about what the flaw of the human-like could be.\u0026rdquo;\n\u0026ldquo;Alright, I hope you can think of a fascinating flaw. Let me know as soon as you do.\u0026rdquo;\n\u0026ldquo;We\u0026rsquo;ll see.\u0026rdquo; My cousin waved her hand dismissively and left the room.\nUpon opening the lock, she had just taken a step when she suddenly paused and asked me a question in a low voice,\n\u0026ldquo;Lin Yan, do you remember a sentence from the story I was writing earlier?\u0026rdquo;\n\u0026ldquo;Which sentence?\u0026rdquo;\nWithout turning her head, she said, \u0026ldquo;The human-like stated that even God was unaware of its existence. So, where do you think it came from?\u0026rdquo;\nBam! She closed the door tightly behind her.\nFor some reason, despite it being noon, I felt a chill run through my body. Her last sentence, I couldn\u0026rsquo;t comprehend…\n4 Three days later, this event was still looming in my mind. I even started resisting sleep every night, afraid of dreaming about the troop of apes and … that human-like.\nI opened up my phone and saw that my cousin Lin Yu\u0026rsquo;s writing blog had been updated with a story about the human-like.\n\u0026ldquo;Perhaps she has figured out the human-like\u0026rsquo;s flaw!\u0026rdquo; Excited, I clicked in and started browsing. After all, I was really curious about this secret.\nHere is her updated document:\nWhen another tribe found the clever ape-man, he had gone insane. He was completely covered in mud and had a lot of wounds. It seemed like he had suffered a lot on his journey.\nApe-men from that time didn\u0026rsquo;t know the concept of going mad. Seeing his state, they thought he was possessed by an evil spirit. So, they tied him up and surrounded him in the middle of the crowd, praying again and again.\n\u0026ldquo;It\u0026rsquo;s already here! It\u0026rsquo;s blended in among us!\u0026rdquo;\nThe clever ape-man couldn\u0026rsquo;t stop roaring, repeatedly shouting these words.\nThis added to the fear, making people dare not approach him.\n\u0026ldquo;I\u0026rsquo;ll tell you the secret about it!\u0026rdquo;\nUpon hearing this, the leader of the tribe stood up and slowly walked towards him.\n\u0026ldquo;Who is it? What secret do you want to tell?\u0026rdquo;\nThe clever ape-man twisted his body, hopping about, and shouted,\n\u0026ldquo;A person entered our tribe, no! It\u0026rsquo;s not a person! Although it looks the same as us, but…\u0026rdquo;\nBefore he could finish, the leader suddenly leaned in, face to face, and began to speak:\n\u0026ldquo;Look at me, think carefully, how do you want to say it?\u0026rdquo;\n\u0026ldquo;You!!!\u0026rdquo; The clever ape-man\u0026rsquo;s pupils dilated abruptly. Looking at the approaching leader, his heart abruptly stopped.\nAt that time, it was too common for a person to die. The crowd didn\u0026rsquo;t understand the situation and casually discarded the ape-man\u0026rsquo;s corpse in the forest.\nPerhaps there was something off with that leader. He might be the human-like. Regrettably, with the death of the clever ape-man, nobody knew of this incident.\nA million years ago, Earth was still thriving with many animals. One day, a cheetah chasing its prey accidentally wandered into a cave.\nYes, it was the cave where the human-like had once taken shelter.\nThe cheetah seemed quite curious about the place and started wandering around inside.\nPlease note!\nAnimals tend to avoid human crowds, as they can scent human activities. However, this cheetah didn\u0026rsquo;t feel any human presence around.\nThere were piles of prey carcasses and some stone artifacts on the cave wall.\nThe cheetah vaguely felt something was wrong. Its underdeveloped brain attempted to make sense of it.\nThere should have been human activities here, but I can\u0026rsquo;t see or smell anyone.\nThe cheetah could not understand and decided to claim this prey as its own. It was about to start its feast when -\nA human face appeared out of nowhere.\n\u0026ldquo;Are you looking for me?\u0026rdquo;\n","date":"2024-01-12T01:51:06+08:00","image":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QBZD4BUKuJntCWq51iV9jQ.jpeg","permalink":"http://localhost:1313/p/this-world-is-not-true/","title":"This world is not true…"}]